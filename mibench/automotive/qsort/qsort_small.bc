; ModuleID = 'qsort_small.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.9.0"

%struct.__sFILE = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, i8*, i32 (i8*)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i32 (i8*, i8*, i32)*, %struct.__sbuf, %struct.__sFILEX*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i64 }
%struct.__sbuf = type { i8*, i32 }
%struct.__sFILEX = type opaque
%struct.myStringStruct = type { [128 x i8] }

@__stderrp = external global %struct.__sFILE*
@.str = private unnamed_addr constant [27 x i8] c"Usage: qsort_small <file>\0A\00", align 1
@.str1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str2 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str3 = private unnamed_addr constant [24 x i8] c"\0ASorting %d elements.\0A\0A\00", align 1
@.str4 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define i32 @compare(i8* %elem1, i8* %elem2) #0 {
entry:
  %elem1.addr = alloca i8*, align 8
  %elem2.addr = alloca i8*, align 8
  %result = alloca i32, align 4
  store i8* %elem1, i8** %elem1.addr, align 8
  store i8* %elem2, i8** %elem2.addr, align 8
  %0 = load i8** %elem1.addr, align 8
  %1 = bitcast i8* %0 to %struct.myStringStruct*
  %qstring = getelementptr inbounds %struct.myStringStruct* %1, i32 0, i32 0
  %arraydecay = getelementptr inbounds [128 x i8]* %qstring, i32 0, i32 0
  %2 = load i8** %elem2.addr, align 8
  %3 = bitcast i8* %2 to %struct.myStringStruct*
  %qstring1 = getelementptr inbounds %struct.myStringStruct* %3, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [128 x i8]* %qstring1, i32 0, i32 0
  %call = call i32 @strcmp(i8* %arraydecay, i8* %arraydecay2)
  store i32 %call, i32* %result, align 4
  %4 = load i32* %result, align 4
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load i32* %result, align 4
  %cmp3 = icmp eq i32 %5, 0
  %cond = select i1 %cmp3, i32 0, i32 -1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi i32 [ 1, %cond.true ], [ %cond, %cond.false ]
  ret i32 %cond4
}

declare i32 @strcmp(i8*, i8*) #1

; Function Attrs: nounwind ssp uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %array = alloca [60000 x %struct.myStringStruct], align 16
  %fp = alloca %struct.__sFILE*, align 8
  %i = alloca i32, align 4
  %count = alloca i32, align 4
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  store i32 0, i32* %count, align 4
  %0 = load i32* %argc.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.__sFILE** @__stderrp, align 8
  %call = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %1, i8* getelementptr inbounds ([27 x i8]* @.str, i32 0, i32 0))
  call void @exit(i32 -1) #3
  unreachable

if.else:                                          ; preds = %entry
  %2 = load i8*** %argv.addr, align 8
  %arrayidx = getelementptr inbounds i8** %2, i64 1
  %3 = load i8** %arrayidx, align 8
  %call1 = call %struct.__sFILE* @"\01_fopen"(i8* %3, i8* getelementptr inbounds ([2 x i8]* @.str1, i32 0, i32 0))
  store %struct.__sFILE* %call1, %struct.__sFILE** %fp, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %4 = load %struct.__sFILE** %fp, align 8
  %5 = load i32* %count, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx2 = getelementptr inbounds [60000 x %struct.myStringStruct]* %array, i32 0, i64 %idxprom
  %qstring = getelementptr inbounds %struct.myStringStruct* %arrayidx2, i32 0, i32 0
  %call3 = call i32 (%struct.__sFILE*, i8*, ...)* @fscanf(%struct.__sFILE* %4, i8* getelementptr inbounds ([3 x i8]* @.str2, i32 0, i32 0), [128 x i8]* %qstring)
  %cmp4 = icmp eq i32 %call3, 1
  br i1 %cmp4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %6 = load i32* %count, align 4
  %cmp5 = icmp slt i32 %6, 60000
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %cmp5, %land.rhs ]
  br i1 %7, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %8 = load i32* %count, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %count, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %if.end

if.end:                                           ; preds = %while.end
  %9 = load i32* %count, align 4
  %call6 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([24 x i8]* @.str3, i32 0, i32 0), i32 %9)
  %arraydecay = getelementptr inbounds [60000 x %struct.myStringStruct]* %array, i32 0, i32 0
  %10 = bitcast %struct.myStringStruct* %arraydecay to i8*
  %11 = load i32* %count, align 4
  %conv = sext i32 %11 to i64
  call void @qsort(i8* %10, i64 %conv, i64 128, i32 (i8*, i8*)* @compare)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %12 = load i32* %i, align 4
  %13 = load i32* %count, align 4
  %cmp7 = icmp slt i32 %12, %13
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load i32* %i, align 4
  %idxprom9 = sext i32 %14 to i64
  %arrayidx10 = getelementptr inbounds [60000 x %struct.myStringStruct]* %array, i32 0, i64 %idxprom9
  %qstring11 = getelementptr inbounds %struct.myStringStruct* %arrayidx10, i32 0, i32 0
  %arraydecay12 = getelementptr inbounds [128 x i8]* %qstring11, i32 0, i32 0
  %call13 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i8* %arraydecay12)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i32* %i, align 4
  %inc14 = add nsw i32 %15, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @fprintf(%struct.__sFILE*, i8*, ...) #1

; Function Attrs: noreturn
declare void @exit(i32) #2

declare %struct.__sFILE* @"\01_fopen"(i8*, i8*) #1

declare i32 @fscanf(%struct.__sFILE*, i8*, ...) #1

declare i32 @printf(i8*, ...) #1

declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)*) #1

attributes #0 = { nounwind ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }
