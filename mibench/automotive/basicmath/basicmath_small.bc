; ModuleID = 'basicmath_small.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.9.0"

%struct.int_sqrt = type { i32, i32 }

@.str = private unnamed_addr constant [39 x i8] c"********* CUBIC FUNCTIONS ***********\0A\00", align 1
@.str1 = private unnamed_addr constant [11 x i8] c"Solutions:\00", align 1
@.str2 = private unnamed_addr constant [4 x i8] c" %f\00", align 1
@.str3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str4 = private unnamed_addr constant [41 x i8] c"********* INTEGER SQR ROOTS ***********\0A\00", align 1
@.str5 = private unnamed_addr constant [17 x i8] c"sqrt(%3d) = %2d\0A\00", align 1
@.str6 = private unnamed_addr constant [17 x i8] c"\0Asqrt(%lX) = %X\0A\00", align 1
@.str7 = private unnamed_addr constant [40 x i8] c"********* ANGLE CONVERSION ***********\0A\00", align 1
@.str8 = private unnamed_addr constant [31 x i8] c"%3.0f degrees = %.12f radians\0A\00", align 1
@.str9 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str10 = private unnamed_addr constant [31 x i8] c"%.12f radians = %3.0f degrees\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a1 = alloca double, align 8
  %b1 = alloca double, align 8
  %c1 = alloca double, align 8
  %d1 = alloca double, align 8
  %a2 = alloca double, align 8
  %b2 = alloca double, align 8
  %c2 = alloca double, align 8
  %d2 = alloca double, align 8
  %a3 = alloca double, align 8
  %b3 = alloca double, align 8
  %c3 = alloca double, align 8
  %d3 = alloca double, align 8
  %a4 = alloca double, align 8
  %b4 = alloca double, align 8
  %c4 = alloca double, align 8
  %d4 = alloca double, align 8
  %x = alloca [3 x double], align 16
  %X = alloca double, align 8
  %solutions = alloca i32, align 4
  %i = alloca i32, align 4
  %l = alloca i64, align 8
  %q = alloca %struct.int_sqrt, align 4
  %n = alloca i64, align 8
  store i32 0, i32* %retval
  store double 1.000000e+00, double* %a1, align 8
  store double -1.050000e+01, double* %b1, align 8
  store double 3.200000e+01, double* %c1, align 8
  store double -3.000000e+01, double* %d1, align 8
  store double 1.000000e+00, double* %a2, align 8
  store double -4.500000e+00, double* %b2, align 8
  store double 1.700000e+01, double* %c2, align 8
  store double -3.000000e+01, double* %d2, align 8
  store double 1.000000e+00, double* %a3, align 8
  store double -3.500000e+00, double* %b3, align 8
  store double 2.200000e+01, double* %c3, align 8
  store double -3.100000e+01, double* %d3, align 8
  store double 1.000000e+00, double* %a4, align 8
  store double -1.370000e+01, double* %b4, align 8
  store double 1.000000e+00, double* %c4, align 8
  store double -3.500000e+01, double* %d4, align 8
  store i64 1072497001, i64* %l, align 8
  store i64 0, i64* %n, align 8
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([39 x i8]* @.str, i32 0, i32 0))
  %0 = load double* %a1, align 8
  %1 = load double* %b1, align 8
  %2 = load double* %c1, align 8
  %3 = load double* %d1, align 8
  %arraydecay = getelementptr inbounds [3 x double]* %x, i32 0, i32 0
  call void @SolveCubic(double %0, double %1, double %2, double %3, i32* %solutions, double* %arraydecay)
  %call1 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([11 x i8]* @.str1, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32* %i, align 4
  %5 = load i32* %solutions, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds [3 x double]* %x, i32 0, i64 %idxprom
  %7 = load double* %arrayidx, align 8
  %call2 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str2, i32 0, i32 0), double %7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str3, i32 0, i32 0))
  %9 = load double* %a2, align 8
  %10 = load double* %b2, align 8
  %11 = load double* %c2, align 8
  %12 = load double* %d2, align 8
  %arraydecay4 = getelementptr inbounds [3 x double]* %x, i32 0, i32 0
  call void @SolveCubic(double %9, double %10, double %11, double %12, i32* %solutions, double* %arraydecay4)
  %call5 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([11 x i8]* @.str1, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc12, %for.end
  %13 = load i32* %i, align 4
  %14 = load i32* %solutions, align 4
  %cmp7 = icmp slt i32 %13, %14
  br i1 %cmp7, label %for.body8, label %for.end14

for.body8:                                        ; preds = %for.cond6
  %15 = load i32* %i, align 4
  %idxprom9 = sext i32 %15 to i64
  %arrayidx10 = getelementptr inbounds [3 x double]* %x, i32 0, i64 %idxprom9
  %16 = load double* %arrayidx10, align 8
  %call11 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str2, i32 0, i32 0), double %16)
  br label %for.inc12

for.inc12:                                        ; preds = %for.body8
  %17 = load i32* %i, align 4
  %inc13 = add nsw i32 %17, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond6

for.end14:                                        ; preds = %for.cond6
  %call15 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str3, i32 0, i32 0))
  %18 = load double* %a3, align 8
  %19 = load double* %b3, align 8
  %20 = load double* %c3, align 8
  %21 = load double* %d3, align 8
  %arraydecay16 = getelementptr inbounds [3 x double]* %x, i32 0, i32 0
  call void @SolveCubic(double %18, double %19, double %20, double %21, i32* %solutions, double* %arraydecay16)
  %call17 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([11 x i8]* @.str1, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc24, %for.end14
  %22 = load i32* %i, align 4
  %23 = load i32* %solutions, align 4
  %cmp19 = icmp slt i32 %22, %23
  br i1 %cmp19, label %for.body20, label %for.end26

for.body20:                                       ; preds = %for.cond18
  %24 = load i32* %i, align 4
  %idxprom21 = sext i32 %24 to i64
  %arrayidx22 = getelementptr inbounds [3 x double]* %x, i32 0, i64 %idxprom21
  %25 = load double* %arrayidx22, align 8
  %call23 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str2, i32 0, i32 0), double %25)
  br label %for.inc24

for.inc24:                                        ; preds = %for.body20
  %26 = load i32* %i, align 4
  %inc25 = add nsw i32 %26, 1
  store i32 %inc25, i32* %i, align 4
  br label %for.cond18

for.end26:                                        ; preds = %for.cond18
  %call27 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str3, i32 0, i32 0))
  %27 = load double* %a4, align 8
  %28 = load double* %b4, align 8
  %29 = load double* %c4, align 8
  %30 = load double* %d4, align 8
  %arraydecay28 = getelementptr inbounds [3 x double]* %x, i32 0, i32 0
  call void @SolveCubic(double %27, double %28, double %29, double %30, i32* %solutions, double* %arraydecay28)
  %call29 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([11 x i8]* @.str1, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc36, %for.end26
  %31 = load i32* %i, align 4
  %32 = load i32* %solutions, align 4
  %cmp31 = icmp slt i32 %31, %32
  br i1 %cmp31, label %for.body32, label %for.end38

for.body32:                                       ; preds = %for.cond30
  %33 = load i32* %i, align 4
  %idxprom33 = sext i32 %33 to i64
  %arrayidx34 = getelementptr inbounds [3 x double]* %x, i32 0, i64 %idxprom33
  %34 = load double* %arrayidx34, align 8
  %call35 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str2, i32 0, i32 0), double %34)
  br label %for.inc36

for.inc36:                                        ; preds = %for.body32
  %35 = load i32* %i, align 4
  %inc37 = add nsw i32 %35, 1
  store i32 %inc37, i32* %i, align 4
  br label %for.cond30

for.end38:                                        ; preds = %for.cond30
  %call39 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str3, i32 0, i32 0))
  store double 1.000000e+00, double* %a1, align 8
  br label %for.cond40

for.cond40:                                       ; preds = %for.inc71, %for.end38
  %36 = load double* %a1, align 8
  %cmp41 = fcmp olt double %36, 1.000000e+01
  br i1 %cmp41, label %for.body42, label %for.end73

for.body42:                                       ; preds = %for.cond40
  store double 1.000000e+01, double* %b1, align 8
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc68, %for.body42
  %37 = load double* %b1, align 8
  %cmp44 = fcmp ogt double %37, 0.000000e+00
  br i1 %cmp44, label %for.body45, label %for.end70

for.body45:                                       ; preds = %for.cond43
  store double 5.000000e+00, double* %c1, align 8
  br label %for.cond46

for.cond46:                                       ; preds = %for.inc66, %for.body45
  %38 = load double* %c1, align 8
  %cmp47 = fcmp olt double %38, 1.500000e+01
  br i1 %cmp47, label %for.body48, label %for.end67

for.body48:                                       ; preds = %for.cond46
  store double -1.000000e+00, double* %d1, align 8
  br label %for.cond49

for.cond49:                                       ; preds = %for.inc64, %for.body48
  %39 = load double* %d1, align 8
  %cmp50 = fcmp ogt double %39, -1.100000e+01
  br i1 %cmp50, label %for.body51, label %for.end65

for.body51:                                       ; preds = %for.cond49
  %40 = load double* %a1, align 8
  %41 = load double* %b1, align 8
  %42 = load double* %c1, align 8
  %43 = load double* %d1, align 8
  %arraydecay52 = getelementptr inbounds [3 x double]* %x, i32 0, i32 0
  call void @SolveCubic(double %40, double %41, double %42, double %43, i32* %solutions, double* %arraydecay52)
  %call53 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([11 x i8]* @.str1, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond54

for.cond54:                                       ; preds = %for.inc60, %for.body51
  %44 = load i32* %i, align 4
  %45 = load i32* %solutions, align 4
  %cmp55 = icmp slt i32 %44, %45
  br i1 %cmp55, label %for.body56, label %for.end62

for.body56:                                       ; preds = %for.cond54
  %46 = load i32* %i, align 4
  %idxprom57 = sext i32 %46 to i64
  %arrayidx58 = getelementptr inbounds [3 x double]* %x, i32 0, i64 %idxprom57
  %47 = load double* %arrayidx58, align 8
  %call59 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str2, i32 0, i32 0), double %47)
  br label %for.inc60

for.inc60:                                        ; preds = %for.body56
  %48 = load i32* %i, align 4
  %inc61 = add nsw i32 %48, 1
  store i32 %inc61, i32* %i, align 4
  br label %for.cond54

for.end62:                                        ; preds = %for.cond54
  %call63 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str3, i32 0, i32 0))
  br label %for.inc64

for.inc64:                                        ; preds = %for.end62
  %49 = load double* %d1, align 8
  %dec = fadd double %49, -1.000000e+00
  store double %dec, double* %d1, align 8
  br label %for.cond49

for.end65:                                        ; preds = %for.cond49
  br label %for.inc66

for.inc66:                                        ; preds = %for.end65
  %50 = load double* %c1, align 8
  %add = fadd double %50, 5.000000e-01
  store double %add, double* %c1, align 8
  br label %for.cond46

for.end67:                                        ; preds = %for.cond46
  br label %for.inc68

for.inc68:                                        ; preds = %for.end67
  %51 = load double* %b1, align 8
  %dec69 = fadd double %51, -1.000000e+00
  store double %dec69, double* %b1, align 8
  br label %for.cond43

for.end70:                                        ; preds = %for.cond43
  br label %for.inc71

for.inc71:                                        ; preds = %for.end70
  %52 = load double* %a1, align 8
  %inc72 = fadd double %52, 1.000000e+00
  store double %inc72, double* %a1, align 8
  br label %for.cond40

for.end73:                                        ; preds = %for.cond40
  %call74 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([41 x i8]* @.str4, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond75

for.cond75:                                       ; preds = %for.inc79, %for.end73
  %53 = load i32* %i, align 4
  %cmp76 = icmp slt i32 %53, 1001
  br i1 %cmp76, label %for.body77, label %for.end81

for.body77:                                       ; preds = %for.cond75
  %54 = load i32* %i, align 4
  %conv = sext i32 %54 to i64
  call void @usqrt(i64 %conv, %struct.int_sqrt* %q)
  %55 = load i32* %i, align 4
  %sqrt = getelementptr inbounds %struct.int_sqrt* %q, i32 0, i32 0
  %56 = load i32* %sqrt, align 4
  %call78 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([17 x i8]* @.str5, i32 0, i32 0), i32 %55, i32 %56)
  br label %for.inc79

for.inc79:                                        ; preds = %for.body77
  %57 = load i32* %i, align 4
  %inc80 = add nsw i32 %57, 1
  store i32 %inc80, i32* %i, align 4
  br label %for.cond75

for.end81:                                        ; preds = %for.cond75
  %58 = load i64* %l, align 8
  call void @usqrt(i64 %58, %struct.int_sqrt* %q)
  %59 = load i64* %l, align 8
  %sqrt82 = getelementptr inbounds %struct.int_sqrt* %q, i32 0, i32 0
  %60 = load i32* %sqrt82, align 4
  %call83 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([17 x i8]* @.str6, i32 0, i32 0), i64 %59, i32 %60)
  %call84 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([40 x i8]* @.str7, i32 0, i32 0))
  store double 0.000000e+00, double* %X, align 8
  br label %for.cond85

for.cond85:                                       ; preds = %for.inc92, %for.end81
  %61 = load double* %X, align 8
  %cmp86 = fcmp ole double %61, 3.600000e+02
  br i1 %cmp86, label %for.body88, label %for.end94

for.body88:                                       ; preds = %for.cond85
  %62 = load double* %X, align 8
  %63 = load double* %X, align 8
  %call89 = call double @atan(double 1.000000e+00) #3
  %mul = fmul double 4.000000e+00, %call89
  %mul90 = fmul double %63, %mul
  %div = fdiv double %mul90, 1.800000e+02
  %call91 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([31 x i8]* @.str8, i32 0, i32 0), double %62, double %div)
  br label %for.inc92

for.inc92:                                        ; preds = %for.body88
  %64 = load double* %X, align 8
  %add93 = fadd double %64, 1.000000e+00
  store double %add93, double* %X, align 8
  br label %for.cond85

for.end94:                                        ; preds = %for.cond85
  %call95 = call i32 (i8*, ...)* bitcast (i32 (...)* @puts to i32 (i8*, ...)*)(i8* getelementptr inbounds ([1 x i8]* @.str9, i32 0, i32 0))
  store double 0.000000e+00, double* %X, align 8
  br label %for.cond96

for.cond96:                                       ; preds = %for.inc109, %for.end94
  %65 = load double* %X, align 8
  %call97 = call double @atan(double 1.000000e+00) #3
  %mul98 = fmul double 4.000000e+00, %call97
  %mul99 = fmul double 2.000000e+00, %mul98
  %add100 = fadd double %mul99, 1.000000e-06
  %cmp101 = fcmp ole double %65, %add100
  br i1 %cmp101, label %for.body103, label %for.end114

for.body103:                                      ; preds = %for.cond96
  %66 = load double* %X, align 8
  %67 = load double* %X, align 8
  %mul104 = fmul double %67, 1.800000e+02
  %call105 = call double @atan(double 1.000000e+00) #3
  %mul106 = fmul double 4.000000e+00, %call105
  %div107 = fdiv double %mul104, %mul106
  %call108 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([31 x i8]* @.str10, i32 0, i32 0), double %66, double %div107)
  br label %for.inc109

for.inc109:                                       ; preds = %for.body103
  %call110 = call double @atan(double 1.000000e+00) #3
  %mul111 = fmul double 4.000000e+00, %call110
  %div112 = fdiv double %mul111, 1.800000e+02
  %68 = load double* %X, align 8
  %add113 = fadd double %68, %div112
  store double %add113, double* %X, align 8
  br label %for.cond96

for.end114:                                       ; preds = %for.cond96
  ret i32 0
}

declare i32 @printf(i8*, ...) #1

declare void @SolveCubic(double, double, double, double, i32*, double*) #1

declare void @usqrt(i64, %struct.int_sqrt*) #1

; Function Attrs: nounwind readnone
declare double @atan(double) #2

declare i32 @puts(...) #1

attributes #0 = { nounwind ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
