// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/Assembly/PrintModulePass.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("basicmath_small.bc", getGlobalContext());
 mod->setDataLayout("e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128");
 mod->setTargetTriple("x86_64-apple-macosx10.9.0");
 
 // Type Definitions
 ArrayType* ArrayTy_0 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 39);
 
 PointerType* PointerTy_1 = PointerType::get(ArrayTy_0, 0);
 
 ArrayType* ArrayTy_2 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 11);
 
 PointerType* PointerTy_3 = PointerType::get(ArrayTy_2, 0);
 
 ArrayType* ArrayTy_4 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 4);
 
 PointerType* PointerTy_5 = PointerType::get(ArrayTy_4, 0);
 
 ArrayType* ArrayTy_6 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 2);
 
 PointerType* PointerTy_7 = PointerType::get(ArrayTy_6, 0);
 
 ArrayType* ArrayTy_8 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 41);
 
 PointerType* PointerTy_9 = PointerType::get(ArrayTy_8, 0);
 
 ArrayType* ArrayTy_10 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 17);
 
 PointerType* PointerTy_11 = PointerType::get(ArrayTy_10, 0);
 
 ArrayType* ArrayTy_12 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 40);
 
 PointerType* PointerTy_13 = PointerType::get(ArrayTy_12, 0);
 
 ArrayType* ArrayTy_14 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 31);
 
 PointerType* PointerTy_15 = PointerType::get(ArrayTy_14, 0);
 
 ArrayType* ArrayTy_16 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 1);
 
 PointerType* PointerTy_17 = PointerType::get(ArrayTy_16, 0);
 
 std::vector<Type*>FuncTy_18_args;
 FunctionType* FuncTy_18 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_18_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_19 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 PointerType* PointerTy_20 = PointerType::get(Type::getDoubleTy(mod->getContext()), 0);
 
 ArrayType* ArrayTy_22 = ArrayType::get(Type::getDoubleTy(mod->getContext()), 3);
 
 PointerType* PointerTy_21 = PointerType::get(ArrayTy_22, 0);
 
 PointerType* PointerTy_23 = PointerType::get(IntegerType::get(mod->getContext(), 64), 0);
 
 StructType *StructTy_struct_int_sqrt = mod->getTypeByName("struct.int_sqrt");
 if (!StructTy_struct_int_sqrt) {
 StructTy_struct_int_sqrt = StructType::create(mod->getContext(), "struct.int_sqrt");
 }
 std::vector<Type*>StructTy_struct_int_sqrt_fields;
 StructTy_struct_int_sqrt_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_int_sqrt_fields.push_back(IntegerType::get(mod->getContext(), 32));
 if (StructTy_struct_int_sqrt->isOpaque()) {
 StructTy_struct_int_sqrt->setBody(StructTy_struct_int_sqrt_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_24 = PointerType::get(StructTy_struct_int_sqrt, 0);
 
 PointerType* PointerTy_25 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 std::vector<Type*>FuncTy_27_args;
 FuncTy_27_args.push_back(PointerTy_25);
 FunctionType* FuncTy_27 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_27_args,
  /*isVarArg=*/true);
 
 PointerType* PointerTy_26 = PointerType::get(FuncTy_27, 0);
 
 std::vector<Type*>FuncTy_29_args;
 FuncTy_29_args.push_back(Type::getDoubleTy(mod->getContext()));
 FuncTy_29_args.push_back(Type::getDoubleTy(mod->getContext()));
 FuncTy_29_args.push_back(Type::getDoubleTy(mod->getContext()));
 FuncTy_29_args.push_back(Type::getDoubleTy(mod->getContext()));
 FuncTy_29_args.push_back(PointerTy_19);
 FuncTy_29_args.push_back(PointerTy_20);
 FunctionType* FuncTy_29 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_29_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_28 = PointerType::get(FuncTy_29, 0);
 
 std::vector<Type*>FuncTy_31_args;
 FuncTy_31_args.push_back(IntegerType::get(mod->getContext(), 64));
 FuncTy_31_args.push_back(PointerTy_24);
 FunctionType* FuncTy_31 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_31_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_30 = PointerType::get(FuncTy_31, 0);
 
 std::vector<Type*>FuncTy_33_args;
 FuncTy_33_args.push_back(Type::getDoubleTy(mod->getContext()));
 FunctionType* FuncTy_33 = FunctionType::get(
  /*Result=*/Type::getDoubleTy(mod->getContext()),
  /*Params=*/FuncTy_33_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_32 = PointerType::get(FuncTy_33, 0);
 
 std::vector<Type*>FuncTy_34_args;
 FunctionType* FuncTy_34 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_34_args,
  /*isVarArg=*/true);
 
 
 // Function Declarations
 
 Function* func_main = mod->getFunction("main");
 if (!func_main) {
 func_main = Function::Create(
  /*Type=*/FuncTy_18,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"main", mod); 
 func_main->setCallingConv(CallingConv::C);
 }
 AttributeSet func_main_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::StackProtect);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_main_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_main->setAttributes(func_main_PAL);
 
 Function* func_printf = mod->getFunction("printf");
 if (!func_printf) {
 func_printf = Function::Create(
  /*Type=*/FuncTy_27,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"printf", mod); // (external, no body)
 func_printf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_printf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_printf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_printf->setAttributes(func_printf_PAL);
 
 Function* func_SolveCubic = mod->getFunction("SolveCubic");
 if (!func_SolveCubic) {
 func_SolveCubic = Function::Create(
  /*Type=*/FuncTy_29,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"SolveCubic", mod); // (external, no body)
 func_SolveCubic->setCallingConv(CallingConv::C);
 }
 AttributeSet func_SolveCubic_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_SolveCubic_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_SolveCubic->setAttributes(func_SolveCubic_PAL);
 
 Function* func_usqrt = mod->getFunction("usqrt");
 if (!func_usqrt) {
 func_usqrt = Function::Create(
  /*Type=*/FuncTy_31,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"usqrt", mod); // (external, no body)
 func_usqrt->setCallingConv(CallingConv::C);
 }
 AttributeSet func_usqrt_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_usqrt_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_usqrt->setAttributes(func_usqrt_PAL);
 
 Function* func_atan = mod->getFunction("atan");
 if (!func_atan) {
 func_atan = Function::Create(
  /*Type=*/FuncTy_33,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"atan", mod); // (external, no body)
 func_atan->setCallingConv(CallingConv::C);
 }
 AttributeSet func_atan_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_atan_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_atan->setAttributes(func_atan_PAL);
 
 Function* func_puts = mod->getFunction("puts");
 if (!func_puts) {
 func_puts = Function::Create(
  /*Type=*/FuncTy_34,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"puts", mod); // (external, no body)
 func_puts->setCallingConv(CallingConv::C);
 }
 AttributeSet func_puts_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_puts_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_puts->setAttributes(func_puts_PAL);
 
 // Global Variable Declarations

 
 GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_0,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str");
 gvar_array__str->setAlignment(1);
 
 GlobalVariable* gvar_array__str1 = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_2,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str1");
 gvar_array__str1->setAlignment(1);
 
 GlobalVariable* gvar_array__str2 = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_4,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str2");
 gvar_array__str2->setAlignment(1);
 
 GlobalVariable* gvar_array__str3 = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_6,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str3");
 gvar_array__str3->setAlignment(1);
 
 GlobalVariable* gvar_array__str4 = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_8,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str4");
 gvar_array__str4->setAlignment(1);
 
 GlobalVariable* gvar_array__str5 = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_10,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str5");
 gvar_array__str5->setAlignment(1);
 
 GlobalVariable* gvar_array__str6 = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_10,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str6");
 gvar_array__str6->setAlignment(1);
 
 GlobalVariable* gvar_array__str7 = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_12,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str7");
 gvar_array__str7->setAlignment(1);
 
 GlobalVariable* gvar_array__str8 = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_14,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str8");
 gvar_array__str8->setAlignment(1);
 
 GlobalVariable* gvar_array__str9 = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_16,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str9");
 gvar_array__str9->setAlignment(1);
 
 GlobalVariable* gvar_array__str10 = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_14,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str10");
 gvar_array__str10->setAlignment(1);
 
 // Constant Definitions
 Constant *const_array_35 = ConstantDataArray::getString(mod->getContext(), "********* CUBIC FUNCTIONS ***********\x0A", true);
 Constant *const_array_36 = ConstantDataArray::getString(mod->getContext(), "Solutions:", true);
 Constant *const_array_37 = ConstantDataArray::getString(mod->getContext(), " %f", true);
 Constant *const_array_38 = ConstantDataArray::getString(mod->getContext(), "\x0A", true);
 Constant *const_array_39 = ConstantDataArray::getString(mod->getContext(), "********* INTEGER SQR ROOTS ***********\x0A", true);
 Constant *const_array_40 = ConstantDataArray::getString(mod->getContext(), "sqrt(%3d) = %2d\x0A", true);
 Constant *const_array_41 = ConstantDataArray::getString(mod->getContext(), "\x0Asqrt(%lX) = %X\x0A", true);
 Constant *const_array_42 = ConstantDataArray::getString(mod->getContext(), "********* ANGLE CONVERSION ***********\x0A", true);
 Constant *const_array_43 = ConstantDataArray::getString(mod->getContext(), "%3.0f degrees = %.12f radians\x0A", true);
 ConstantAggregateZero* const_array_44 = ConstantAggregateZero::get(ArrayTy_16);
 Constant *const_array_45 = ConstantDataArray::getString(mod->getContext(), "%.12f radians = %3.0f degrees\x0A", true);
 ConstantInt* const_int32_46 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 ConstantInt* const_int32_47 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 ConstantFP* const_double_48 = ConstantFP::get(mod->getContext(), APFloat(1.000000e+00));
 ConstantFP* const_double_49 = ConstantFP::get(mod->getContext(), APFloat(-1.050000e+01));
 ConstantFP* const_double_50 = ConstantFP::get(mod->getContext(), APFloat(3.200000e+01));
 ConstantFP* const_double_51 = ConstantFP::get(mod->getContext(), APFloat(-3.000000e+01));
 ConstantFP* const_double_52 = ConstantFP::get(mod->getContext(), APFloat(-4.500000e+00));
 ConstantFP* const_double_53 = ConstantFP::get(mod->getContext(), APFloat(1.700000e+01));
 ConstantFP* const_double_54 = ConstantFP::get(mod->getContext(), APFloat(-3.500000e+00));
 ConstantFP* const_double_55 = ConstantFP::get(mod->getContext(), APFloat(2.200000e+01));
 ConstantFP* const_double_56 = ConstantFP::get(mod->getContext(), APFloat(-3.100000e+01));
 ConstantFP* const_double_57 = ConstantFP::get(mod->getContext(), APFloat(-1.370000e+01));
 ConstantFP* const_double_58 = ConstantFP::get(mod->getContext(), APFloat(-3.500000e+01));
 ConstantInt* const_int64_59 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("1072497001"), 10));
 ConstantInt* const_int64_60 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("0"), 10));
 std::vector<Constant*> const_ptr_61_indices;
 const_ptr_61_indices.push_back(const_int32_47);
 const_ptr_61_indices.push_back(const_int32_47);
 Constant* const_ptr_61 = ConstantExpr::getGetElementPtr(gvar_array__str, const_ptr_61_indices);
 std::vector<Constant*> const_ptr_62_indices;
 const_ptr_62_indices.push_back(const_int32_47);
 const_ptr_62_indices.push_back(const_int32_47);
 Constant* const_ptr_62 = ConstantExpr::getGetElementPtr(gvar_array__str1, const_ptr_62_indices);
 std::vector<Constant*> const_ptr_63_indices;
 const_ptr_63_indices.push_back(const_int32_47);
 const_ptr_63_indices.push_back(const_int32_47);
 Constant* const_ptr_63 = ConstantExpr::getGetElementPtr(gvar_array__str2, const_ptr_63_indices);
 std::vector<Constant*> const_ptr_64_indices;
 const_ptr_64_indices.push_back(const_int32_47);
 const_ptr_64_indices.push_back(const_int32_47);
 Constant* const_ptr_64 = ConstantExpr::getGetElementPtr(gvar_array__str3, const_ptr_64_indices);
 ConstantFP* const_double_65 = ConstantFP::get(mod->getContext(), APFloat(1.000000e+01));
 ConstantFP* const_double_66 = ConstantFP::get(mod->getContext(), APFloat(0.000000e+00));
 ConstantFP* const_double_67 = ConstantFP::get(mod->getContext(), APFloat(5.000000e+00));
 ConstantFP* const_double_68 = ConstantFP::get(mod->getContext(), APFloat(1.500000e+01));
 ConstantFP* const_double_69 = ConstantFP::get(mod->getContext(), APFloat(-1.000000e+00));
 ConstantFP* const_double_70 = ConstantFP::get(mod->getContext(), APFloat(-1.100000e+01));
 ConstantFP* const_double_71 = ConstantFP::get(mod->getContext(), APFloat(5.000000e-01));
 std::vector<Constant*> const_ptr_72_indices;
 const_ptr_72_indices.push_back(const_int32_47);
 const_ptr_72_indices.push_back(const_int32_47);
 Constant* const_ptr_72 = ConstantExpr::getGetElementPtr(gvar_array__str4, const_ptr_72_indices);
 ConstantInt* const_int32_73 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1001"), 10));
 std::vector<Constant*> const_ptr_74_indices;
 const_ptr_74_indices.push_back(const_int32_47);
 const_ptr_74_indices.push_back(const_int32_47);
 Constant* const_ptr_74 = ConstantExpr::getGetElementPtr(gvar_array__str5, const_ptr_74_indices);
 std::vector<Constant*> const_ptr_75_indices;
 const_ptr_75_indices.push_back(const_int32_47);
 const_ptr_75_indices.push_back(const_int32_47);
 Constant* const_ptr_75 = ConstantExpr::getGetElementPtr(gvar_array__str6, const_ptr_75_indices);
 std::vector<Constant*> const_ptr_76_indices;
 const_ptr_76_indices.push_back(const_int32_47);
 const_ptr_76_indices.push_back(const_int32_47);
 Constant* const_ptr_76 = ConstantExpr::getGetElementPtr(gvar_array__str7, const_ptr_76_indices);
 ConstantFP* const_double_77 = ConstantFP::get(mod->getContext(), APFloat(3.600000e+02));
 ConstantFP* const_double_78 = ConstantFP::get(mod->getContext(), APFloat(4.000000e+00));
 ConstantFP* const_double_79 = ConstantFP::get(mod->getContext(), APFloat(1.800000e+02));
 std::vector<Constant*> const_ptr_80_indices;
 const_ptr_80_indices.push_back(const_int32_47);
 const_ptr_80_indices.push_back(const_int32_47);
 Constant* const_ptr_80 = ConstantExpr::getGetElementPtr(gvar_array__str8, const_ptr_80_indices);
 std::vector<Constant*> const_ptr_81_indices;
 const_ptr_81_indices.push_back(const_int32_47);
 const_ptr_81_indices.push_back(const_int32_47);
 Constant* const_ptr_81 = ConstantExpr::getGetElementPtr(gvar_array__str9, const_ptr_81_indices);
 Constant* const_ptr_82 = ConstantExpr::getCast(Instruction::BitCast, func_puts, PointerTy_26);
 ConstantFP* const_double_83 = ConstantFP::get(mod->getContext(), APFloat(2.000000e+00));
 ConstantFP* const_double_84 = ConstantFP::get(mod->getContext(), APFloat(1.000000e-06));
 std::vector<Constant*> const_ptr_85_indices;
 const_ptr_85_indices.push_back(const_int32_47);
 const_ptr_85_indices.push_back(const_int32_47);
 Constant* const_ptr_85 = ConstantExpr::getGetElementPtr(gvar_array__str10, const_ptr_85_indices);
 
 // Global Variable Definitions
 gvar_array__str->setInitializer(const_array_35);
 gvar_array__str1->setInitializer(const_array_36);
 gvar_array__str2->setInitializer(const_array_37);
 gvar_array__str3->setInitializer(const_array_38);
 gvar_array__str4->setInitializer(const_array_39);
 gvar_array__str5->setInitializer(const_array_40);
 gvar_array__str6->setInitializer(const_array_41);
 gvar_array__str7->setInitializer(const_array_42);
 gvar_array__str8->setInitializer(const_array_43);
 gvar_array__str9->setInitializer(const_array_44);
 gvar_array__str10->setInitializer(const_array_45);
 
 // Function Definitions
 
 // Function: main (func_main)
 {
  
  BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func_main,0);
  BasicBlock* label_for_cond = BasicBlock::Create(mod->getContext(), "for.cond",func_main,0);
  BasicBlock* label_for_body = BasicBlock::Create(mod->getContext(), "for.body",func_main,0);
  BasicBlock* label_for_inc = BasicBlock::Create(mod->getContext(), "for.inc",func_main,0);
  BasicBlock* label_for_end = BasicBlock::Create(mod->getContext(), "for.end",func_main,0);
  BasicBlock* label_for_cond6 = BasicBlock::Create(mod->getContext(), "for.cond6",func_main,0);
  BasicBlock* label_for_body8 = BasicBlock::Create(mod->getContext(), "for.body8",func_main,0);
  BasicBlock* label_for_inc12 = BasicBlock::Create(mod->getContext(), "for.inc12",func_main,0);
  BasicBlock* label_for_end14 = BasicBlock::Create(mod->getContext(), "for.end14",func_main,0);
  BasicBlock* label_for_cond18 = BasicBlock::Create(mod->getContext(), "for.cond18",func_main,0);
  BasicBlock* label_for_body20 = BasicBlock::Create(mod->getContext(), "for.body20",func_main,0);
  BasicBlock* label_for_inc24 = BasicBlock::Create(mod->getContext(), "for.inc24",func_main,0);
  BasicBlock* label_for_end26 = BasicBlock::Create(mod->getContext(), "for.end26",func_main,0);
  BasicBlock* label_for_cond30 = BasicBlock::Create(mod->getContext(), "for.cond30",func_main,0);
  BasicBlock* label_for_body32 = BasicBlock::Create(mod->getContext(), "for.body32",func_main,0);
  BasicBlock* label_for_inc36 = BasicBlock::Create(mod->getContext(), "for.inc36",func_main,0);
  BasicBlock* label_for_end38 = BasicBlock::Create(mod->getContext(), "for.end38",func_main,0);
  BasicBlock* label_for_cond40 = BasicBlock::Create(mod->getContext(), "for.cond40",func_main,0);
  BasicBlock* label_for_body42 = BasicBlock::Create(mod->getContext(), "for.body42",func_main,0);
  BasicBlock* label_for_cond43 = BasicBlock::Create(mod->getContext(), "for.cond43",func_main,0);
  BasicBlock* label_for_body45 = BasicBlock::Create(mod->getContext(), "for.body45",func_main,0);
  BasicBlock* label_for_cond46 = BasicBlock::Create(mod->getContext(), "for.cond46",func_main,0);
  BasicBlock* label_for_body48 = BasicBlock::Create(mod->getContext(), "for.body48",func_main,0);
  BasicBlock* label_for_cond49 = BasicBlock::Create(mod->getContext(), "for.cond49",func_main,0);
  BasicBlock* label_for_body51 = BasicBlock::Create(mod->getContext(), "for.body51",func_main,0);
  BasicBlock* label_for_cond54 = BasicBlock::Create(mod->getContext(), "for.cond54",func_main,0);
  BasicBlock* label_for_body56 = BasicBlock::Create(mod->getContext(), "for.body56",func_main,0);
  BasicBlock* label_for_inc60 = BasicBlock::Create(mod->getContext(), "for.inc60",func_main,0);
  BasicBlock* label_for_end62 = BasicBlock::Create(mod->getContext(), "for.end62",func_main,0);
  BasicBlock* label_for_inc64 = BasicBlock::Create(mod->getContext(), "for.inc64",func_main,0);
  BasicBlock* label_for_end65 = BasicBlock::Create(mod->getContext(), "for.end65",func_main,0);
  BasicBlock* label_for_inc66 = BasicBlock::Create(mod->getContext(), "for.inc66",func_main,0);
  BasicBlock* label_for_end67 = BasicBlock::Create(mod->getContext(), "for.end67",func_main,0);
  BasicBlock* label_for_inc68 = BasicBlock::Create(mod->getContext(), "for.inc68",func_main,0);
  BasicBlock* label_for_end70 = BasicBlock::Create(mod->getContext(), "for.end70",func_main,0);
  BasicBlock* label_for_inc71 = BasicBlock::Create(mod->getContext(), "for.inc71",func_main,0);
  BasicBlock* label_for_end73 = BasicBlock::Create(mod->getContext(), "for.end73",func_main,0);
  BasicBlock* label_for_cond75 = BasicBlock::Create(mod->getContext(), "for.cond75",func_main,0);
  BasicBlock* label_for_body77 = BasicBlock::Create(mod->getContext(), "for.body77",func_main,0);
  BasicBlock* label_for_inc79 = BasicBlock::Create(mod->getContext(), "for.inc79",func_main,0);
  BasicBlock* label_for_end81 = BasicBlock::Create(mod->getContext(), "for.end81",func_main,0);
  BasicBlock* label_for_cond85 = BasicBlock::Create(mod->getContext(), "for.cond85",func_main,0);
  BasicBlock* label_for_body88 = BasicBlock::Create(mod->getContext(), "for.body88",func_main,0);
  BasicBlock* label_for_inc92 = BasicBlock::Create(mod->getContext(), "for.inc92",func_main,0);
  BasicBlock* label_for_end94 = BasicBlock::Create(mod->getContext(), "for.end94",func_main,0);
  BasicBlock* label_for_cond96 = BasicBlock::Create(mod->getContext(), "for.cond96",func_main,0);
  BasicBlock* label_for_body103 = BasicBlock::Create(mod->getContext(), "for.body103",func_main,0);
  BasicBlock* label_for_inc109 = BasicBlock::Create(mod->getContext(), "for.inc109",func_main,0);
  BasicBlock* label_for_end114 = BasicBlock::Create(mod->getContext(), "for.end114",func_main,0);
  
  // Block entry (label_entry)
  AllocaInst* ptr_retval = new AllocaInst(IntegerType::get(mod->getContext(), 32), "retval", label_entry);
  ptr_retval->setAlignment(4);
  AllocaInst* ptr_a1 = new AllocaInst(Type::getDoubleTy(mod->getContext()), "a1", label_entry);
  ptr_a1->setAlignment(8);
  AllocaInst* ptr_b1 = new AllocaInst(Type::getDoubleTy(mod->getContext()), "b1", label_entry);
  ptr_b1->setAlignment(8);
  AllocaInst* ptr_c1 = new AllocaInst(Type::getDoubleTy(mod->getContext()), "c1", label_entry);
  ptr_c1->setAlignment(8);
  AllocaInst* ptr_d1 = new AllocaInst(Type::getDoubleTy(mod->getContext()), "d1", label_entry);
  ptr_d1->setAlignment(8);
  AllocaInst* ptr_a2 = new AllocaInst(Type::getDoubleTy(mod->getContext()), "a2", label_entry);
  ptr_a2->setAlignment(8);
  AllocaInst* ptr_b2 = new AllocaInst(Type::getDoubleTy(mod->getContext()), "b2", label_entry);
  ptr_b2->setAlignment(8);
  AllocaInst* ptr_c2 = new AllocaInst(Type::getDoubleTy(mod->getContext()), "c2", label_entry);
  ptr_c2->setAlignment(8);
  AllocaInst* ptr_d2 = new AllocaInst(Type::getDoubleTy(mod->getContext()), "d2", label_entry);
  ptr_d2->setAlignment(8);
  AllocaInst* ptr_a3 = new AllocaInst(Type::getDoubleTy(mod->getContext()), "a3", label_entry);
  ptr_a3->setAlignment(8);
  AllocaInst* ptr_b3 = new AllocaInst(Type::getDoubleTy(mod->getContext()), "b3", label_entry);
  ptr_b3->setAlignment(8);
  AllocaInst* ptr_c3 = new AllocaInst(Type::getDoubleTy(mod->getContext()), "c3", label_entry);
  ptr_c3->setAlignment(8);
  AllocaInst* ptr_d3 = new AllocaInst(Type::getDoubleTy(mod->getContext()), "d3", label_entry);
  ptr_d3->setAlignment(8);
  AllocaInst* ptr_a4 = new AllocaInst(Type::getDoubleTy(mod->getContext()), "a4", label_entry);
  ptr_a4->setAlignment(8);
  AllocaInst* ptr_b4 = new AllocaInst(Type::getDoubleTy(mod->getContext()), "b4", label_entry);
  ptr_b4->setAlignment(8);
  AllocaInst* ptr_c4 = new AllocaInst(Type::getDoubleTy(mod->getContext()), "c4", label_entry);
  ptr_c4->setAlignment(8);
  AllocaInst* ptr_d4 = new AllocaInst(Type::getDoubleTy(mod->getContext()), "d4", label_entry);
  ptr_d4->setAlignment(8);
  AllocaInst* ptr_x = new AllocaInst(ArrayTy_22, "x", label_entry);
  ptr_x->setAlignment(16);
  AllocaInst* ptr_X = new AllocaInst(Type::getDoubleTy(mod->getContext()), "X", label_entry);
  ptr_X->setAlignment(8);
  AllocaInst* ptr_solutions = new AllocaInst(IntegerType::get(mod->getContext(), 32), "solutions", label_entry);
  ptr_solutions->setAlignment(4);
  AllocaInst* ptr_i = new AllocaInst(IntegerType::get(mod->getContext(), 32), "i", label_entry);
  ptr_i->setAlignment(4);
  AllocaInst* ptr_l = new AllocaInst(IntegerType::get(mod->getContext(), 64), "l", label_entry);
  ptr_l->setAlignment(8);
  AllocaInst* ptr_q = new AllocaInst(StructTy_struct_int_sqrt, "q", label_entry);
  ptr_q->setAlignment(4);
  AllocaInst* ptr_n = new AllocaInst(IntegerType::get(mod->getContext(), 64), "n", label_entry);
  ptr_n->setAlignment(8);
  StoreInst* void_86 = new StoreInst(const_int32_47, ptr_retval, false, label_entry);
  StoreInst* void_87 = new StoreInst(const_double_48, ptr_a1, false, label_entry);
  void_87->setAlignment(8);
  StoreInst* void_88 = new StoreInst(const_double_49, ptr_b1, false, label_entry);
  void_88->setAlignment(8);
  StoreInst* void_89 = new StoreInst(const_double_50, ptr_c1, false, label_entry);
  void_89->setAlignment(8);
  StoreInst* void_90 = new StoreInst(const_double_51, ptr_d1, false, label_entry);
  void_90->setAlignment(8);
  StoreInst* void_91 = new StoreInst(const_double_48, ptr_a2, false, label_entry);
  void_91->setAlignment(8);
  StoreInst* void_92 = new StoreInst(const_double_52, ptr_b2, false, label_entry);
  void_92->setAlignment(8);
  StoreInst* void_93 = new StoreInst(const_double_53, ptr_c2, false, label_entry);
  void_93->setAlignment(8);
  StoreInst* void_94 = new StoreInst(const_double_51, ptr_d2, false, label_entry);
  void_94->setAlignment(8);
  StoreInst* void_95 = new StoreInst(const_double_48, ptr_a3, false, label_entry);
  void_95->setAlignment(8);
  StoreInst* void_96 = new StoreInst(const_double_54, ptr_b3, false, label_entry);
  void_96->setAlignment(8);
  StoreInst* void_97 = new StoreInst(const_double_55, ptr_c3, false, label_entry);
  void_97->setAlignment(8);
  StoreInst* void_98 = new StoreInst(const_double_56, ptr_d3, false, label_entry);
  void_98->setAlignment(8);
  StoreInst* void_99 = new StoreInst(const_double_48, ptr_a4, false, label_entry);
  void_99->setAlignment(8);
  StoreInst* void_100 = new StoreInst(const_double_57, ptr_b4, false, label_entry);
  void_100->setAlignment(8);
  StoreInst* void_101 = new StoreInst(const_double_48, ptr_c4, false, label_entry);
  void_101->setAlignment(8);
  StoreInst* void_102 = new StoreInst(const_double_58, ptr_d4, false, label_entry);
  void_102->setAlignment(8);
  StoreInst* void_103 = new StoreInst(const_int64_59, ptr_l, false, label_entry);
  void_103->setAlignment(8);
  StoreInst* void_104 = new StoreInst(const_int64_60, ptr_n, false, label_entry);
  void_104->setAlignment(8);
  CallInst* int32_call = CallInst::Create(func_printf, const_ptr_61, "call", label_entry);
  int32_call->setCallingConv(CallingConv::C);
  int32_call->setTailCall(false);
  AttributeSet int32_call_PAL;
  int32_call->setAttributes(int32_call_PAL);
  
  LoadInst* double_105 = new LoadInst(ptr_a1, "", false, label_entry);
  double_105->setAlignment(8);
  LoadInst* double_106 = new LoadInst(ptr_b1, "", false, label_entry);
  double_106->setAlignment(8);
  LoadInst* double_107 = new LoadInst(ptr_c1, "", false, label_entry);
  double_107->setAlignment(8);
  LoadInst* double_108 = new LoadInst(ptr_d1, "", false, label_entry);
  double_108->setAlignment(8);
  std::vector<Value*> ptr_arraydecay_indices;
  ptr_arraydecay_indices.push_back(const_int32_47);
  ptr_arraydecay_indices.push_back(const_int32_47);
  Instruction* ptr_arraydecay = GetElementPtrInst::Create(ptr_x, ptr_arraydecay_indices, "arraydecay", label_entry);
  std::vector<Value*> void_109_params;
  void_109_params.push_back(double_105);
  void_109_params.push_back(double_106);
  void_109_params.push_back(double_107);
  void_109_params.push_back(double_108);
  void_109_params.push_back(ptr_solutions);
  void_109_params.push_back(ptr_arraydecay);
  CallInst* void_109 = CallInst::Create(func_SolveCubic, void_109_params, "", label_entry);
  void_109->setCallingConv(CallingConv::C);
  void_109->setTailCall(false);
  AttributeSet void_109_PAL;
  void_109->setAttributes(void_109_PAL);
  
  CallInst* int32_call1 = CallInst::Create(func_printf, const_ptr_62, "call1", label_entry);
  int32_call1->setCallingConv(CallingConv::C);
  int32_call1->setTailCall(false);
  AttributeSet int32_call1_PAL;
  int32_call1->setAttributes(int32_call1_PAL);
  
  StoreInst* void_110 = new StoreInst(const_int32_47, ptr_i, false, label_entry);
  void_110->setAlignment(4);
  BranchInst::Create(label_for_cond, label_entry);
  
  // Block for.cond (label_for_cond)
  LoadInst* int32_112 = new LoadInst(ptr_i, "", false, label_for_cond);
  int32_112->setAlignment(4);
  LoadInst* int32_113 = new LoadInst(ptr_solutions, "", false, label_for_cond);
  int32_113->setAlignment(4);
  ICmpInst* int1_cmp = new ICmpInst(*label_for_cond, ICmpInst::ICMP_SLT, int32_112, int32_113, "cmp");
  BranchInst::Create(label_for_body, label_for_end, int1_cmp, label_for_cond);
  
  // Block for.body (label_for_body)
  LoadInst* int32_115 = new LoadInst(ptr_i, "", false, label_for_body);
  int32_115->setAlignment(4);
  CastInst* int64_idxprom = new SExtInst(int32_115, IntegerType::get(mod->getContext(), 64), "idxprom", label_for_body);
  std::vector<Value*> ptr_arrayidx_indices;
  ptr_arrayidx_indices.push_back(const_int32_47);
  ptr_arrayidx_indices.push_back(int64_idxprom);
  Instruction* ptr_arrayidx = GetElementPtrInst::Create(ptr_x, ptr_arrayidx_indices, "arrayidx", label_for_body);
  LoadInst* double_116 = new LoadInst(ptr_arrayidx, "", false, label_for_body);
  double_116->setAlignment(8);
  std::vector<Value*> int32_call2_params;
  int32_call2_params.push_back(const_ptr_63);
  int32_call2_params.push_back(double_116);
  CallInst* int32_call2 = CallInst::Create(func_printf, int32_call2_params, "call2", label_for_body);
  int32_call2->setCallingConv(CallingConv::C);
  int32_call2->setTailCall(false);
  AttributeSet int32_call2_PAL;
  int32_call2->setAttributes(int32_call2_PAL);
  
  BranchInst::Create(label_for_inc, label_for_body);
  
  // Block for.inc (label_for_inc)
  LoadInst* int32_118 = new LoadInst(ptr_i, "", false, label_for_inc);
  int32_118->setAlignment(4);
  BinaryOperator* int32_inc = BinaryOperator::Create(Instruction::Add, int32_118, const_int32_46, "inc", label_for_inc);
  StoreInst* void_119 = new StoreInst(int32_inc, ptr_i, false, label_for_inc);
  void_119->setAlignment(4);
  BranchInst::Create(label_for_cond, label_for_inc);
  
  // Block for.end (label_for_end)
  CallInst* int32_call3 = CallInst::Create(func_printf, const_ptr_64, "call3", label_for_end);
  int32_call3->setCallingConv(CallingConv::C);
  int32_call3->setTailCall(false);
  AttributeSet int32_call3_PAL;
  int32_call3->setAttributes(int32_call3_PAL);
  
  LoadInst* double_121 = new LoadInst(ptr_a2, "", false, label_for_end);
  double_121->setAlignment(8);
  LoadInst* double_122 = new LoadInst(ptr_b2, "", false, label_for_end);
  double_122->setAlignment(8);
  LoadInst* double_123 = new LoadInst(ptr_c2, "", false, label_for_end);
  double_123->setAlignment(8);
  LoadInst* double_124 = new LoadInst(ptr_d2, "", false, label_for_end);
  double_124->setAlignment(8);
  std::vector<Value*> ptr_arraydecay4_indices;
  ptr_arraydecay4_indices.push_back(const_int32_47);
  ptr_arraydecay4_indices.push_back(const_int32_47);
  Instruction* ptr_arraydecay4 = GetElementPtrInst::Create(ptr_x, ptr_arraydecay4_indices, "arraydecay4", label_for_end);
  std::vector<Value*> void_125_params;
  void_125_params.push_back(double_121);
  void_125_params.push_back(double_122);
  void_125_params.push_back(double_123);
  void_125_params.push_back(double_124);
  void_125_params.push_back(ptr_solutions);
  void_125_params.push_back(ptr_arraydecay4);
  CallInst* void_125 = CallInst::Create(func_SolveCubic, void_125_params, "", label_for_end);
  void_125->setCallingConv(CallingConv::C);
  void_125->setTailCall(false);
  AttributeSet void_125_PAL;
  void_125->setAttributes(void_125_PAL);
  
  CallInst* int32_call5 = CallInst::Create(func_printf, const_ptr_62, "call5", label_for_end);
  int32_call5->setCallingConv(CallingConv::C);
  int32_call5->setTailCall(false);
  AttributeSet int32_call5_PAL;
  int32_call5->setAttributes(int32_call5_PAL);
  
  StoreInst* void_126 = new StoreInst(const_int32_47, ptr_i, false, label_for_end);
  void_126->setAlignment(4);
  BranchInst::Create(label_for_cond6, label_for_end);
  
  // Block for.cond6 (label_for_cond6)
  LoadInst* int32_128 = new LoadInst(ptr_i, "", false, label_for_cond6);
  int32_128->setAlignment(4);
  LoadInst* int32_129 = new LoadInst(ptr_solutions, "", false, label_for_cond6);
  int32_129->setAlignment(4);
  ICmpInst* int1_cmp7 = new ICmpInst(*label_for_cond6, ICmpInst::ICMP_SLT, int32_128, int32_129, "cmp7");
  BranchInst::Create(label_for_body8, label_for_end14, int1_cmp7, label_for_cond6);
  
  // Block for.body8 (label_for_body8)
  LoadInst* int32_131 = new LoadInst(ptr_i, "", false, label_for_body8);
  int32_131->setAlignment(4);
  CastInst* int64_idxprom9 = new SExtInst(int32_131, IntegerType::get(mod->getContext(), 64), "idxprom9", label_for_body8);
  std::vector<Value*> ptr_arrayidx10_indices;
  ptr_arrayidx10_indices.push_back(const_int32_47);
  ptr_arrayidx10_indices.push_back(int64_idxprom9);
  Instruction* ptr_arrayidx10 = GetElementPtrInst::Create(ptr_x, ptr_arrayidx10_indices, "arrayidx10", label_for_body8);
  LoadInst* double_132 = new LoadInst(ptr_arrayidx10, "", false, label_for_body8);
  double_132->setAlignment(8);
  std::vector<Value*> int32_call11_params;
  int32_call11_params.push_back(const_ptr_63);
  int32_call11_params.push_back(double_132);
  CallInst* int32_call11 = CallInst::Create(func_printf, int32_call11_params, "call11", label_for_body8);
  int32_call11->setCallingConv(CallingConv::C);
  int32_call11->setTailCall(false);
  AttributeSet int32_call11_PAL;
  int32_call11->setAttributes(int32_call11_PAL);
  
  BranchInst::Create(label_for_inc12, label_for_body8);
  
  // Block for.inc12 (label_for_inc12)
  LoadInst* int32_134 = new LoadInst(ptr_i, "", false, label_for_inc12);
  int32_134->setAlignment(4);
  BinaryOperator* int32_inc13 = BinaryOperator::Create(Instruction::Add, int32_134, const_int32_46, "inc13", label_for_inc12);
  StoreInst* void_135 = new StoreInst(int32_inc13, ptr_i, false, label_for_inc12);
  void_135->setAlignment(4);
  BranchInst::Create(label_for_cond6, label_for_inc12);
  
  // Block for.end14 (label_for_end14)
  CallInst* int32_call15 = CallInst::Create(func_printf, const_ptr_64, "call15", label_for_end14);
  int32_call15->setCallingConv(CallingConv::C);
  int32_call15->setTailCall(false);
  AttributeSet int32_call15_PAL;
  int32_call15->setAttributes(int32_call15_PAL);
  
  LoadInst* double_137 = new LoadInst(ptr_a3, "", false, label_for_end14);
  double_137->setAlignment(8);
  LoadInst* double_138 = new LoadInst(ptr_b3, "", false, label_for_end14);
  double_138->setAlignment(8);
  LoadInst* double_139 = new LoadInst(ptr_c3, "", false, label_for_end14);
  double_139->setAlignment(8);
  LoadInst* double_140 = new LoadInst(ptr_d3, "", false, label_for_end14);
  double_140->setAlignment(8);
  std::vector<Value*> ptr_arraydecay16_indices;
  ptr_arraydecay16_indices.push_back(const_int32_47);
  ptr_arraydecay16_indices.push_back(const_int32_47);
  Instruction* ptr_arraydecay16 = GetElementPtrInst::Create(ptr_x, ptr_arraydecay16_indices, "arraydecay16", label_for_end14);
  std::vector<Value*> void_141_params;
  void_141_params.push_back(double_137);
  void_141_params.push_back(double_138);
  void_141_params.push_back(double_139);
  void_141_params.push_back(double_140);
  void_141_params.push_back(ptr_solutions);
  void_141_params.push_back(ptr_arraydecay16);
  CallInst* void_141 = CallInst::Create(func_SolveCubic, void_141_params, "", label_for_end14);
  void_141->setCallingConv(CallingConv::C);
  void_141->setTailCall(false);
  AttributeSet void_141_PAL;
  void_141->setAttributes(void_141_PAL);
  
  CallInst* int32_call17 = CallInst::Create(func_printf, const_ptr_62, "call17", label_for_end14);
  int32_call17->setCallingConv(CallingConv::C);
  int32_call17->setTailCall(false);
  AttributeSet int32_call17_PAL;
  int32_call17->setAttributes(int32_call17_PAL);
  
  StoreInst* void_142 = new StoreInst(const_int32_47, ptr_i, false, label_for_end14);
  void_142->setAlignment(4);
  BranchInst::Create(label_for_cond18, label_for_end14);
  
  // Block for.cond18 (label_for_cond18)
  LoadInst* int32_144 = new LoadInst(ptr_i, "", false, label_for_cond18);
  int32_144->setAlignment(4);
  LoadInst* int32_145 = new LoadInst(ptr_solutions, "", false, label_for_cond18);
  int32_145->setAlignment(4);
  ICmpInst* int1_cmp19 = new ICmpInst(*label_for_cond18, ICmpInst::ICMP_SLT, int32_144, int32_145, "cmp19");
  BranchInst::Create(label_for_body20, label_for_end26, int1_cmp19, label_for_cond18);
  
  // Block for.body20 (label_for_body20)
  LoadInst* int32_147 = new LoadInst(ptr_i, "", false, label_for_body20);
  int32_147->setAlignment(4);
  CastInst* int64_idxprom21 = new SExtInst(int32_147, IntegerType::get(mod->getContext(), 64), "idxprom21", label_for_body20);
  std::vector<Value*> ptr_arrayidx22_indices;
  ptr_arrayidx22_indices.push_back(const_int32_47);
  ptr_arrayidx22_indices.push_back(int64_idxprom21);
  Instruction* ptr_arrayidx22 = GetElementPtrInst::Create(ptr_x, ptr_arrayidx22_indices, "arrayidx22", label_for_body20);
  LoadInst* double_148 = new LoadInst(ptr_arrayidx22, "", false, label_for_body20);
  double_148->setAlignment(8);
  std::vector<Value*> int32_call23_params;
  int32_call23_params.push_back(const_ptr_63);
  int32_call23_params.push_back(double_148);
  CallInst* int32_call23 = CallInst::Create(func_printf, int32_call23_params, "call23", label_for_body20);
  int32_call23->setCallingConv(CallingConv::C);
  int32_call23->setTailCall(false);
  AttributeSet int32_call23_PAL;
  int32_call23->setAttributes(int32_call23_PAL);
  
  BranchInst::Create(label_for_inc24, label_for_body20);
  
  // Block for.inc24 (label_for_inc24)
  LoadInst* int32_150 = new LoadInst(ptr_i, "", false, label_for_inc24);
  int32_150->setAlignment(4);
  BinaryOperator* int32_inc25 = BinaryOperator::Create(Instruction::Add, int32_150, const_int32_46, "inc25", label_for_inc24);
  StoreInst* void_151 = new StoreInst(int32_inc25, ptr_i, false, label_for_inc24);
  void_151->setAlignment(4);
  BranchInst::Create(label_for_cond18, label_for_inc24);
  
  // Block for.end26 (label_for_end26)
  CallInst* int32_call27 = CallInst::Create(func_printf, const_ptr_64, "call27", label_for_end26);
  int32_call27->setCallingConv(CallingConv::C);
  int32_call27->setTailCall(false);
  AttributeSet int32_call27_PAL;
  int32_call27->setAttributes(int32_call27_PAL);
  
  LoadInst* double_153 = new LoadInst(ptr_a4, "", false, label_for_end26);
  double_153->setAlignment(8);
  LoadInst* double_154 = new LoadInst(ptr_b4, "", false, label_for_end26);
  double_154->setAlignment(8);
  LoadInst* double_155 = new LoadInst(ptr_c4, "", false, label_for_end26);
  double_155->setAlignment(8);
  LoadInst* double_156 = new LoadInst(ptr_d4, "", false, label_for_end26);
  double_156->setAlignment(8);
  std::vector<Value*> ptr_arraydecay28_indices;
  ptr_arraydecay28_indices.push_back(const_int32_47);
  ptr_arraydecay28_indices.push_back(const_int32_47);
  Instruction* ptr_arraydecay28 = GetElementPtrInst::Create(ptr_x, ptr_arraydecay28_indices, "arraydecay28", label_for_end26);
  std::vector<Value*> void_157_params;
  void_157_params.push_back(double_153);
  void_157_params.push_back(double_154);
  void_157_params.push_back(double_155);
  void_157_params.push_back(double_156);
  void_157_params.push_back(ptr_solutions);
  void_157_params.push_back(ptr_arraydecay28);
  CallInst* void_157 = CallInst::Create(func_SolveCubic, void_157_params, "", label_for_end26);
  void_157->setCallingConv(CallingConv::C);
  void_157->setTailCall(false);
  AttributeSet void_157_PAL;
  void_157->setAttributes(void_157_PAL);
  
  CallInst* int32_call29 = CallInst::Create(func_printf, const_ptr_62, "call29", label_for_end26);
  int32_call29->setCallingConv(CallingConv::C);
  int32_call29->setTailCall(false);
  AttributeSet int32_call29_PAL;
  int32_call29->setAttributes(int32_call29_PAL);
  
  StoreInst* void_158 = new StoreInst(const_int32_47, ptr_i, false, label_for_end26);
  void_158->setAlignment(4);
  BranchInst::Create(label_for_cond30, label_for_end26);
  
  // Block for.cond30 (label_for_cond30)
  LoadInst* int32_160 = new LoadInst(ptr_i, "", false, label_for_cond30);
  int32_160->setAlignment(4);
  LoadInst* int32_161 = new LoadInst(ptr_solutions, "", false, label_for_cond30);
  int32_161->setAlignment(4);
  ICmpInst* int1_cmp31 = new ICmpInst(*label_for_cond30, ICmpInst::ICMP_SLT, int32_160, int32_161, "cmp31");
  BranchInst::Create(label_for_body32, label_for_end38, int1_cmp31, label_for_cond30);
  
  // Block for.body32 (label_for_body32)
  LoadInst* int32_163 = new LoadInst(ptr_i, "", false, label_for_body32);
  int32_163->setAlignment(4);
  CastInst* int64_idxprom33 = new SExtInst(int32_163, IntegerType::get(mod->getContext(), 64), "idxprom33", label_for_body32);
  std::vector<Value*> ptr_arrayidx34_indices;
  ptr_arrayidx34_indices.push_back(const_int32_47);
  ptr_arrayidx34_indices.push_back(int64_idxprom33);
  Instruction* ptr_arrayidx34 = GetElementPtrInst::Create(ptr_x, ptr_arrayidx34_indices, "arrayidx34", label_for_body32);
  LoadInst* double_164 = new LoadInst(ptr_arrayidx34, "", false, label_for_body32);
  double_164->setAlignment(8);
  std::vector<Value*> int32_call35_params;
  int32_call35_params.push_back(const_ptr_63);
  int32_call35_params.push_back(double_164);
  CallInst* int32_call35 = CallInst::Create(func_printf, int32_call35_params, "call35", label_for_body32);
  int32_call35->setCallingConv(CallingConv::C);
  int32_call35->setTailCall(false);
  AttributeSet int32_call35_PAL;
  int32_call35->setAttributes(int32_call35_PAL);
  
  BranchInst::Create(label_for_inc36, label_for_body32);
  
  // Block for.inc36 (label_for_inc36)
  LoadInst* int32_166 = new LoadInst(ptr_i, "", false, label_for_inc36);
  int32_166->setAlignment(4);
  BinaryOperator* int32_inc37 = BinaryOperator::Create(Instruction::Add, int32_166, const_int32_46, "inc37", label_for_inc36);
  StoreInst* void_167 = new StoreInst(int32_inc37, ptr_i, false, label_for_inc36);
  void_167->setAlignment(4);
  BranchInst::Create(label_for_cond30, label_for_inc36);
  
  // Block for.end38 (label_for_end38)
  CallInst* int32_call39 = CallInst::Create(func_printf, const_ptr_64, "call39", label_for_end38);
  int32_call39->setCallingConv(CallingConv::C);
  int32_call39->setTailCall(false);
  AttributeSet int32_call39_PAL;
  int32_call39->setAttributes(int32_call39_PAL);
  
  StoreInst* void_169 = new StoreInst(const_double_48, ptr_a1, false, label_for_end38);
  void_169->setAlignment(8);
  BranchInst::Create(label_for_cond40, label_for_end38);
  
  // Block for.cond40 (label_for_cond40)
  LoadInst* double_171 = new LoadInst(ptr_a1, "", false, label_for_cond40);
  double_171->setAlignment(8);
  FCmpInst* int1_cmp41 = new FCmpInst(*label_for_cond40, FCmpInst::FCMP_OLT, double_171, const_double_65, "cmp41");
  BranchInst::Create(label_for_body42, label_for_end73, int1_cmp41, label_for_cond40);
  
  // Block for.body42 (label_for_body42)
  StoreInst* void_173 = new StoreInst(const_double_65, ptr_b1, false, label_for_body42);
  void_173->setAlignment(8);
  BranchInst::Create(label_for_cond43, label_for_body42);
  
  // Block for.cond43 (label_for_cond43)
  LoadInst* double_175 = new LoadInst(ptr_b1, "", false, label_for_cond43);
  double_175->setAlignment(8);
  FCmpInst* int1_cmp44 = new FCmpInst(*label_for_cond43, FCmpInst::FCMP_OGT, double_175, const_double_66, "cmp44");
  BranchInst::Create(label_for_body45, label_for_end70, int1_cmp44, label_for_cond43);
  
  // Block for.body45 (label_for_body45)
  StoreInst* void_177 = new StoreInst(const_double_67, ptr_c1, false, label_for_body45);
  void_177->setAlignment(8);
  BranchInst::Create(label_for_cond46, label_for_body45);
  
  // Block for.cond46 (label_for_cond46)
  LoadInst* double_179 = new LoadInst(ptr_c1, "", false, label_for_cond46);
  double_179->setAlignment(8);
  FCmpInst* int1_cmp47 = new FCmpInst(*label_for_cond46, FCmpInst::FCMP_OLT, double_179, const_double_68, "cmp47");
  BranchInst::Create(label_for_body48, label_for_end67, int1_cmp47, label_for_cond46);
  
  // Block for.body48 (label_for_body48)
  StoreInst* void_181 = new StoreInst(const_double_69, ptr_d1, false, label_for_body48);
  void_181->setAlignment(8);
  BranchInst::Create(label_for_cond49, label_for_body48);
  
  // Block for.cond49 (label_for_cond49)
  LoadInst* double_183 = new LoadInst(ptr_d1, "", false, label_for_cond49);
  double_183->setAlignment(8);
  FCmpInst* int1_cmp50 = new FCmpInst(*label_for_cond49, FCmpInst::FCMP_OGT, double_183, const_double_70, "cmp50");
  BranchInst::Create(label_for_body51, label_for_end65, int1_cmp50, label_for_cond49);
  
  // Block for.body51 (label_for_body51)
  LoadInst* double_185 = new LoadInst(ptr_a1, "", false, label_for_body51);
  double_185->setAlignment(8);
  LoadInst* double_186 = new LoadInst(ptr_b1, "", false, label_for_body51);
  double_186->setAlignment(8);
  LoadInst* double_187 = new LoadInst(ptr_c1, "", false, label_for_body51);
  double_187->setAlignment(8);
  LoadInst* double_188 = new LoadInst(ptr_d1, "", false, label_for_body51);
  double_188->setAlignment(8);
  std::vector<Value*> ptr_arraydecay52_indices;
  ptr_arraydecay52_indices.push_back(const_int32_47);
  ptr_arraydecay52_indices.push_back(const_int32_47);
  Instruction* ptr_arraydecay52 = GetElementPtrInst::Create(ptr_x, ptr_arraydecay52_indices, "arraydecay52", label_for_body51);
  std::vector<Value*> void_189_params;
  void_189_params.push_back(double_185);
  void_189_params.push_back(double_186);
  void_189_params.push_back(double_187);
  void_189_params.push_back(double_188);
  void_189_params.push_back(ptr_solutions);
  void_189_params.push_back(ptr_arraydecay52);
  CallInst* void_189 = CallInst::Create(func_SolveCubic, void_189_params, "", label_for_body51);
  void_189->setCallingConv(CallingConv::C);
  void_189->setTailCall(false);
  AttributeSet void_189_PAL;
  void_189->setAttributes(void_189_PAL);
  
  CallInst* int32_call53 = CallInst::Create(func_printf, const_ptr_62, "call53", label_for_body51);
  int32_call53->setCallingConv(CallingConv::C);
  int32_call53->setTailCall(false);
  AttributeSet int32_call53_PAL;
  int32_call53->setAttributes(int32_call53_PAL);
  
  StoreInst* void_190 = new StoreInst(const_int32_47, ptr_i, false, label_for_body51);
  void_190->setAlignment(4);
  BranchInst::Create(label_for_cond54, label_for_body51);
  
  // Block for.cond54 (label_for_cond54)
  LoadInst* int32_192 = new LoadInst(ptr_i, "", false, label_for_cond54);
  int32_192->setAlignment(4);
  LoadInst* int32_193 = new LoadInst(ptr_solutions, "", false, label_for_cond54);
  int32_193->setAlignment(4);
  ICmpInst* int1_cmp55 = new ICmpInst(*label_for_cond54, ICmpInst::ICMP_SLT, int32_192, int32_193, "cmp55");
  BranchInst::Create(label_for_body56, label_for_end62, int1_cmp55, label_for_cond54);
  
  // Block for.body56 (label_for_body56)
  LoadInst* int32_195 = new LoadInst(ptr_i, "", false, label_for_body56);
  int32_195->setAlignment(4);
  CastInst* int64_idxprom57 = new SExtInst(int32_195, IntegerType::get(mod->getContext(), 64), "idxprom57", label_for_body56);
  std::vector<Value*> ptr_arrayidx58_indices;
  ptr_arrayidx58_indices.push_back(const_int32_47);
  ptr_arrayidx58_indices.push_back(int64_idxprom57);
  Instruction* ptr_arrayidx58 = GetElementPtrInst::Create(ptr_x, ptr_arrayidx58_indices, "arrayidx58", label_for_body56);
  LoadInst* double_196 = new LoadInst(ptr_arrayidx58, "", false, label_for_body56);
  double_196->setAlignment(8);
  std::vector<Value*> int32_call59_params;
  int32_call59_params.push_back(const_ptr_63);
  int32_call59_params.push_back(double_196);
  CallInst* int32_call59 = CallInst::Create(func_printf, int32_call59_params, "call59", label_for_body56);
  int32_call59->setCallingConv(CallingConv::C);
  int32_call59->setTailCall(false);
  AttributeSet int32_call59_PAL;
  int32_call59->setAttributes(int32_call59_PAL);
  
  BranchInst::Create(label_for_inc60, label_for_body56);
  
  // Block for.inc60 (label_for_inc60)
  LoadInst* int32_198 = new LoadInst(ptr_i, "", false, label_for_inc60);
  int32_198->setAlignment(4);
  BinaryOperator* int32_inc61 = BinaryOperator::Create(Instruction::Add, int32_198, const_int32_46, "inc61", label_for_inc60);
  StoreInst* void_199 = new StoreInst(int32_inc61, ptr_i, false, label_for_inc60);
  void_199->setAlignment(4);
  BranchInst::Create(label_for_cond54, label_for_inc60);
  
  // Block for.end62 (label_for_end62)
  CallInst* int32_call63 = CallInst::Create(func_printf, const_ptr_64, "call63", label_for_end62);
  int32_call63->setCallingConv(CallingConv::C);
  int32_call63->setTailCall(false);
  AttributeSet int32_call63_PAL;
  int32_call63->setAttributes(int32_call63_PAL);
  
  BranchInst::Create(label_for_inc64, label_for_end62);
  
  // Block for.inc64 (label_for_inc64)
  LoadInst* double_202 = new LoadInst(ptr_d1, "", false, label_for_inc64);
  double_202->setAlignment(8);
  BinaryOperator* double_dec = BinaryOperator::Create(Instruction::FAdd, double_202, const_double_69, "dec", label_for_inc64);
  StoreInst* void_203 = new StoreInst(double_dec, ptr_d1, false, label_for_inc64);
  void_203->setAlignment(8);
  BranchInst::Create(label_for_cond49, label_for_inc64);
  
  // Block for.end65 (label_for_end65)
  BranchInst::Create(label_for_inc66, label_for_end65);
  
  // Block for.inc66 (label_for_inc66)
  LoadInst* double_206 = new LoadInst(ptr_c1, "", false, label_for_inc66);
  double_206->setAlignment(8);
  BinaryOperator* double_add = BinaryOperator::Create(Instruction::FAdd, double_206, const_double_71, "add", label_for_inc66);
  StoreInst* void_207 = new StoreInst(double_add, ptr_c1, false, label_for_inc66);
  void_207->setAlignment(8);
  BranchInst::Create(label_for_cond46, label_for_inc66);
  
  // Block for.end67 (label_for_end67)
  BranchInst::Create(label_for_inc68, label_for_end67);
  
  // Block for.inc68 (label_for_inc68)
  LoadInst* double_210 = new LoadInst(ptr_b1, "", false, label_for_inc68);
  double_210->setAlignment(8);
  BinaryOperator* double_dec69 = BinaryOperator::Create(Instruction::FAdd, double_210, const_double_69, "dec69", label_for_inc68);
  StoreInst* void_211 = new StoreInst(double_dec69, ptr_b1, false, label_for_inc68);
  void_211->setAlignment(8);
  BranchInst::Create(label_for_cond43, label_for_inc68);
  
  // Block for.end70 (label_for_end70)
  BranchInst::Create(label_for_inc71, label_for_end70);
  
  // Block for.inc71 (label_for_inc71)
  LoadInst* double_214 = new LoadInst(ptr_a1, "", false, label_for_inc71);
  double_214->setAlignment(8);
  BinaryOperator* double_inc72 = BinaryOperator::Create(Instruction::FAdd, double_214, const_double_48, "inc72", label_for_inc71);
  StoreInst* void_215 = new StoreInst(double_inc72, ptr_a1, false, label_for_inc71);
  void_215->setAlignment(8);
  BranchInst::Create(label_for_cond40, label_for_inc71);
  
  // Block for.end73 (label_for_end73)
  CallInst* int32_call74 = CallInst::Create(func_printf, const_ptr_72, "call74", label_for_end73);
  int32_call74->setCallingConv(CallingConv::C);
  int32_call74->setTailCall(false);
  AttributeSet int32_call74_PAL;
  int32_call74->setAttributes(int32_call74_PAL);
  
  StoreInst* void_217 = new StoreInst(const_int32_47, ptr_i, false, label_for_end73);
  void_217->setAlignment(4);
  BranchInst::Create(label_for_cond75, label_for_end73);
  
  // Block for.cond75 (label_for_cond75)
  LoadInst* int32_219 = new LoadInst(ptr_i, "", false, label_for_cond75);
  int32_219->setAlignment(4);
  ICmpInst* int1_cmp76 = new ICmpInst(*label_for_cond75, ICmpInst::ICMP_SLT, int32_219, const_int32_73, "cmp76");
  BranchInst::Create(label_for_body77, label_for_end81, int1_cmp76, label_for_cond75);
  
  // Block for.body77 (label_for_body77)
  LoadInst* int32_221 = new LoadInst(ptr_i, "", false, label_for_body77);
  int32_221->setAlignment(4);
  CastInst* int64_conv = new SExtInst(int32_221, IntegerType::get(mod->getContext(), 64), "conv", label_for_body77);
  std::vector<Value*> void_222_params;
  void_222_params.push_back(int64_conv);
  void_222_params.push_back(ptr_q);
  CallInst* void_222 = CallInst::Create(func_usqrt, void_222_params, "", label_for_body77);
  void_222->setCallingConv(CallingConv::C);
  void_222->setTailCall(false);
  AttributeSet void_222_PAL;
  void_222->setAttributes(void_222_PAL);
  
  LoadInst* int32_223 = new LoadInst(ptr_i, "", false, label_for_body77);
  int32_223->setAlignment(4);
  std::vector<Value*> ptr_sqrt_indices;
  ptr_sqrt_indices.push_back(const_int32_47);
  ptr_sqrt_indices.push_back(const_int32_47);
  Instruction* ptr_sqrt = GetElementPtrInst::Create(ptr_q, ptr_sqrt_indices, "sqrt", label_for_body77);
  LoadInst* int32_224 = new LoadInst(ptr_sqrt, "", false, label_for_body77);
  int32_224->setAlignment(4);
  std::vector<Value*> int32_call78_params;
  int32_call78_params.push_back(const_ptr_74);
  int32_call78_params.push_back(int32_223);
  int32_call78_params.push_back(int32_224);
  CallInst* int32_call78 = CallInst::Create(func_printf, int32_call78_params, "call78", label_for_body77);
  int32_call78->setCallingConv(CallingConv::C);
  int32_call78->setTailCall(false);
  AttributeSet int32_call78_PAL;
  int32_call78->setAttributes(int32_call78_PAL);
  
  BranchInst::Create(label_for_inc79, label_for_body77);
  
  // Block for.inc79 (label_for_inc79)
  LoadInst* int32_226 = new LoadInst(ptr_i, "", false, label_for_inc79);
  int32_226->setAlignment(4);
  BinaryOperator* int32_inc80 = BinaryOperator::Create(Instruction::Add, int32_226, const_int32_46, "inc80", label_for_inc79);
  StoreInst* void_227 = new StoreInst(int32_inc80, ptr_i, false, label_for_inc79);
  void_227->setAlignment(4);
  BranchInst::Create(label_for_cond75, label_for_inc79);
  
  // Block for.end81 (label_for_end81)
  LoadInst* int64_229 = new LoadInst(ptr_l, "", false, label_for_end81);
  int64_229->setAlignment(8);
  std::vector<Value*> void_230_params;
  void_230_params.push_back(int64_229);
  void_230_params.push_back(ptr_q);
  CallInst* void_230 = CallInst::Create(func_usqrt, void_230_params, "", label_for_end81);
  void_230->setCallingConv(CallingConv::C);
  void_230->setTailCall(false);
  AttributeSet void_230_PAL;
  void_230->setAttributes(void_230_PAL);
  
  LoadInst* int64_231 = new LoadInst(ptr_l, "", false, label_for_end81);
  int64_231->setAlignment(8);
  std::vector<Value*> ptr_sqrt82_indices;
  ptr_sqrt82_indices.push_back(const_int32_47);
  ptr_sqrt82_indices.push_back(const_int32_47);
  Instruction* ptr_sqrt82 = GetElementPtrInst::Create(ptr_q, ptr_sqrt82_indices, "sqrt82", label_for_end81);
  LoadInst* int32_232 = new LoadInst(ptr_sqrt82, "", false, label_for_end81);
  int32_232->setAlignment(4);
  std::vector<Value*> int32_call83_params;
  int32_call83_params.push_back(const_ptr_75);
  int32_call83_params.push_back(int64_231);
  int32_call83_params.push_back(int32_232);
  CallInst* int32_call83 = CallInst::Create(func_printf, int32_call83_params, "call83", label_for_end81);
  int32_call83->setCallingConv(CallingConv::C);
  int32_call83->setTailCall(false);
  AttributeSet int32_call83_PAL;
  int32_call83->setAttributes(int32_call83_PAL);
  
  CallInst* int32_call84 = CallInst::Create(func_printf, const_ptr_76, "call84", label_for_end81);
  int32_call84->setCallingConv(CallingConv::C);
  int32_call84->setTailCall(false);
  AttributeSet int32_call84_PAL;
  int32_call84->setAttributes(int32_call84_PAL);
  
  StoreInst* void_233 = new StoreInst(const_double_66, ptr_X, false, label_for_end81);
  void_233->setAlignment(8);
  BranchInst::Create(label_for_cond85, label_for_end81);
  
  // Block for.cond85 (label_for_cond85)
  LoadInst* double_235 = new LoadInst(ptr_X, "", false, label_for_cond85);
  double_235->setAlignment(8);
  FCmpInst* int1_cmp86 = new FCmpInst(*label_for_cond85, FCmpInst::FCMP_OLE, double_235, const_double_77, "cmp86");
  BranchInst::Create(label_for_body88, label_for_end94, int1_cmp86, label_for_cond85);
  
  // Block for.body88 (label_for_body88)
  LoadInst* double_237 = new LoadInst(ptr_X, "", false, label_for_body88);
  double_237->setAlignment(8);
  LoadInst* double_238 = new LoadInst(ptr_X, "", false, label_for_body88);
  double_238->setAlignment(8);
  CallInst* double_call89 = CallInst::Create(func_atan, const_double_48, "call89", label_for_body88);
  double_call89->setCallingConv(CallingConv::C);
  double_call89->setTailCall(false);
  AttributeSet double_call89_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     B.addAttribute(Attribute::ReadNone);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   double_call89_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  double_call89->setAttributes(double_call89_PAL);
  
  BinaryOperator* double_mul = BinaryOperator::Create(Instruction::FMul, const_double_78, double_call89, "mul", label_for_body88);
  BinaryOperator* double_mul90 = BinaryOperator::Create(Instruction::FMul, double_238, double_mul, "mul90", label_for_body88);
  BinaryOperator* double_div = BinaryOperator::Create(Instruction::FDiv, double_mul90, const_double_79, "div", label_for_body88);
  std::vector<Value*> int32_call91_params;
  int32_call91_params.push_back(const_ptr_80);
  int32_call91_params.push_back(double_237);
  int32_call91_params.push_back(double_div);
  CallInst* int32_call91 = CallInst::Create(func_printf, int32_call91_params, "call91", label_for_body88);
  int32_call91->setCallingConv(CallingConv::C);
  int32_call91->setTailCall(false);
  AttributeSet int32_call91_PAL;
  int32_call91->setAttributes(int32_call91_PAL);
  
  BranchInst::Create(label_for_inc92, label_for_body88);
  
  // Block for.inc92 (label_for_inc92)
  LoadInst* double_240 = new LoadInst(ptr_X, "", false, label_for_inc92);
  double_240->setAlignment(8);
  BinaryOperator* double_add93 = BinaryOperator::Create(Instruction::FAdd, double_240, const_double_48, "add93", label_for_inc92);
  StoreInst* void_241 = new StoreInst(double_add93, ptr_X, false, label_for_inc92);
  void_241->setAlignment(8);
  BranchInst::Create(label_for_cond85, label_for_inc92);
  
  // Block for.end94 (label_for_end94)
  CallInst* int32_call95 = CallInst::Create(const_ptr_82, const_ptr_81, "call95", label_for_end94);
  int32_call95->setCallingConv(CallingConv::C);
  int32_call95->setTailCall(false);
  AttributeSet int32_call95_PAL;
  int32_call95->setAttributes(int32_call95_PAL);
  
  StoreInst* void_243 = new StoreInst(const_double_66, ptr_X, false, label_for_end94);
  void_243->setAlignment(8);
  BranchInst::Create(label_for_cond96, label_for_end94);
  
  // Block for.cond96 (label_for_cond96)
  LoadInst* double_245 = new LoadInst(ptr_X, "", false, label_for_cond96);
  double_245->setAlignment(8);
  CallInst* double_call97 = CallInst::Create(func_atan, const_double_48, "call97", label_for_cond96);
  double_call97->setCallingConv(CallingConv::C);
  double_call97->setTailCall(false);
  AttributeSet double_call97_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     B.addAttribute(Attribute::ReadNone);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   double_call97_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  double_call97->setAttributes(double_call97_PAL);
  
  BinaryOperator* double_mul98 = BinaryOperator::Create(Instruction::FMul, const_double_78, double_call97, "mul98", label_for_cond96);
  BinaryOperator* double_mul99 = BinaryOperator::Create(Instruction::FMul, const_double_83, double_mul98, "mul99", label_for_cond96);
  BinaryOperator* double_add100 = BinaryOperator::Create(Instruction::FAdd, double_mul99, const_double_84, "add100", label_for_cond96);
  FCmpInst* int1_cmp101 = new FCmpInst(*label_for_cond96, FCmpInst::FCMP_OLE, double_245, double_add100, "cmp101");
  BranchInst::Create(label_for_body103, label_for_end114, int1_cmp101, label_for_cond96);
  
  // Block for.body103 (label_for_body103)
  LoadInst* double_247 = new LoadInst(ptr_X, "", false, label_for_body103);
  double_247->setAlignment(8);
  LoadInst* double_248 = new LoadInst(ptr_X, "", false, label_for_body103);
  double_248->setAlignment(8);
  BinaryOperator* double_mul104 = BinaryOperator::Create(Instruction::FMul, double_248, const_double_79, "mul104", label_for_body103);
  CallInst* double_call105 = CallInst::Create(func_atan, const_double_48, "call105", label_for_body103);
  double_call105->setCallingConv(CallingConv::C);
  double_call105->setTailCall(false);
  AttributeSet double_call105_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     B.addAttribute(Attribute::ReadNone);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   double_call105_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  double_call105->setAttributes(double_call105_PAL);
  
  BinaryOperator* double_mul106 = BinaryOperator::Create(Instruction::FMul, const_double_78, double_call105, "mul106", label_for_body103);
  BinaryOperator* double_div107 = BinaryOperator::Create(Instruction::FDiv, double_mul104, double_mul106, "div107", label_for_body103);
  std::vector<Value*> int32_call108_params;
  int32_call108_params.push_back(const_ptr_85);
  int32_call108_params.push_back(double_247);
  int32_call108_params.push_back(double_div107);
  CallInst* int32_call108 = CallInst::Create(func_printf, int32_call108_params, "call108", label_for_body103);
  int32_call108->setCallingConv(CallingConv::C);
  int32_call108->setTailCall(false);
  AttributeSet int32_call108_PAL;
  int32_call108->setAttributes(int32_call108_PAL);
  
  BranchInst::Create(label_for_inc109, label_for_body103);
  
  // Block for.inc109 (label_for_inc109)
  CallInst* double_call110 = CallInst::Create(func_atan, const_double_48, "call110", label_for_inc109);
  double_call110->setCallingConv(CallingConv::C);
  double_call110->setTailCall(false);
  AttributeSet double_call110_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     B.addAttribute(Attribute::ReadNone);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   double_call110_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  double_call110->setAttributes(double_call110_PAL);
  
  BinaryOperator* double_mul111 = BinaryOperator::Create(Instruction::FMul, const_double_78, double_call110, "mul111", label_for_inc109);
  BinaryOperator* double_div112 = BinaryOperator::Create(Instruction::FDiv, double_mul111, const_double_79, "div112", label_for_inc109);
  LoadInst* double_250 = new LoadInst(ptr_X, "", false, label_for_inc109);
  double_250->setAlignment(8);
  BinaryOperator* double_add113 = BinaryOperator::Create(Instruction::FAdd, double_250, double_div112, "add113", label_for_inc109);
  StoreInst* void_251 = new StoreInst(double_add113, ptr_X, false, label_for_inc109);
  void_251->setAlignment(8);
  BranchInst::Create(label_for_cond96, label_for_inc109);
  
  // Block for.end114 (label_for_end114)
  ReturnInst::Create(mod->getContext(), const_int32_47, label_for_end114);
  
 }
 
 return mod;
}
