; ModuleID = 'phtoelm.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.9.0"

%struct.trie_s = type opaque
%struct.Elm_s = type { i8*, i8, i8, i8, i8, i8*, i8*, i64, [19 x %struct.interp_t] }
%struct.interp_t = type { float, float, i8, i8, i8 }
%struct.__sFILE = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, i8*, i32 (i8*)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i32 (i8*, i8*, i32)*, %struct.__sbuf, %struct.__sFILEX*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i64 }
%struct.__sbuf = type { i8*, i32 }
%struct.__sFILEX = type opaque
%struct.darray_t = type { i8*, i32, i32, i16, i16 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@.str = private unnamed_addr constant [64 x i8] c"$Id: phtoelm.c,v 1.13 1994/11/08 13:30:50 a904209 Exp a904209 $\00", align 1
@phtoelm_id = global i8* getelementptr inbounds ([64 x i8]* @.str, i32 0, i32 0), align 8
@phtoelm = global %struct.trie_s* null, align 8
@Elements = external global [0 x %struct.Elm_s]
@speed = external global i32
@__stderrp = external global %struct.__sFILE*
@.str1 = private unnamed_addr constant [23 x i8] c"Ignoring %c in '%.*s'\0A\00", align 1
@.str2 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str3 = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@.str4 = private unnamed_addr constant [2 x i8] c"p\00", align 1
@.str5 = private unnamed_addr constant [2 x i8] c"P\00", align 1
@.str6 = private unnamed_addr constant [3 x i8] c"PY\00", align 1
@.str7 = private unnamed_addr constant [3 x i8] c"PZ\00", align 1
@.str8 = private unnamed_addr constant [2 x i8] c"t\00", align 1
@.str9 = private unnamed_addr constant [2 x i8] c"T\00", align 1
@.str10 = private unnamed_addr constant [3 x i8] c"TY\00", align 1
@.str11 = private unnamed_addr constant [3 x i8] c"TZ\00", align 1
@.str12 = private unnamed_addr constant [2 x i8] c"k\00", align 1
@.str13 = private unnamed_addr constant [2 x i8] c"K\00", align 1
@.str14 = private unnamed_addr constant [3 x i8] c"KY\00", align 1
@.str15 = private unnamed_addr constant [3 x i8] c"KZ\00", align 1
@.str16 = private unnamed_addr constant [2 x i8] c"b\00", align 1
@.str17 = private unnamed_addr constant [2 x i8] c"B\00", align 1
@.str18 = private unnamed_addr constant [3 x i8] c"BY\00", align 1
@.str19 = private unnamed_addr constant [3 x i8] c"BZ\00", align 1
@.str20 = private unnamed_addr constant [2 x i8] c"d\00", align 1
@.str21 = private unnamed_addr constant [2 x i8] c"D\00", align 1
@.str22 = private unnamed_addr constant [3 x i8] c"DY\00", align 1
@.str23 = private unnamed_addr constant [3 x i8] c"DZ\00", align 1
@.str24 = private unnamed_addr constant [2 x i8] c"g\00", align 1
@.str25 = private unnamed_addr constant [2 x i8] c"G\00", align 1
@.str26 = private unnamed_addr constant [3 x i8] c"GY\00", align 1
@.str27 = private unnamed_addr constant [3 x i8] c"GZ\00", align 1
@.str28 = private unnamed_addr constant [2 x i8] c"m\00", align 1
@.str29 = private unnamed_addr constant [2 x i8] c"M\00", align 1
@.str30 = private unnamed_addr constant [2 x i8] c"n\00", align 1
@.str31 = private unnamed_addr constant [2 x i8] c"N\00", align 1
@.str32 = private unnamed_addr constant [3 x i8] c"NG\00", align 1
@.str33 = private unnamed_addr constant [2 x i8] c"f\00", align 1
@.str34 = private unnamed_addr constant [2 x i8] c"F\00", align 1
@.str35 = private unnamed_addr constant [3 x i8] c"TH\00", align 1
@.str36 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str37 = private unnamed_addr constant [2 x i8] c"S\00", align 1
@.str38 = private unnamed_addr constant [3 x i8] c"SH\00", align 1
@.str39 = private unnamed_addr constant [2 x i8] c"h\00", align 1
@.str40 = private unnamed_addr constant [2 x i8] c"H\00", align 1
@.str41 = private unnamed_addr constant [2 x i8] c"v\00", align 1
@.str42 = private unnamed_addr constant [2 x i8] c"V\00", align 1
@.str43 = private unnamed_addr constant [3 x i8] c"QQ\00", align 1
@.str44 = private unnamed_addr constant [3 x i8] c"DH\00", align 1
@.str45 = private unnamed_addr constant [3 x i8] c"DI\00", align 1
@.str46 = private unnamed_addr constant [2 x i8] c"z\00", align 1
@.str47 = private unnamed_addr constant [2 x i8] c"Z\00", align 1
@.str48 = private unnamed_addr constant [3 x i8] c"ZZ\00", align 1
@.str49 = private unnamed_addr constant [3 x i8] c"ZH\00", align 1
@.str50 = private unnamed_addr constant [3 x i8] c"tS\00", align 1
@.str51 = private unnamed_addr constant [3 x i8] c"CH\00", align 1
@.str52 = private unnamed_addr constant [3 x i8] c"CI\00", align 1
@.str53 = private unnamed_addr constant [3 x i8] c"dZ\00", align 1
@.str54 = private unnamed_addr constant [2 x i8] c"J\00", align 1
@.str55 = private unnamed_addr constant [3 x i8] c"JY\00", align 1
@.str56 = private unnamed_addr constant [2 x i8] c"l\00", align 1
@.str57 = private unnamed_addr constant [2 x i8] c"L\00", align 1
@.str58 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str59 = private unnamed_addr constant [2 x i8] c"R\00", align 1
@.str60 = private unnamed_addr constant [3 x i8] c"rr\00", align 1
@.str61 = private unnamed_addr constant [3 x i8] c"RX\00", align 1
@.str62 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str63 = private unnamed_addr constant [2 x i8] c"W\00", align 1
@.str64 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str65 = private unnamed_addr constant [2 x i8] c"X\00", align 1
@.str66 = private unnamed_addr constant [2 x i8] c"%\00", align 1
@.str67 = private unnamed_addr constant [2 x i8] c"j\00", align 1
@.str68 = private unnamed_addr constant [2 x i8] c"Y\00", align 1
@.str69 = private unnamed_addr constant [2 x i8] c"I\00", align 1
@.str70 = private unnamed_addr constant [2 x i8] c"e\00", align 1
@.str71 = private unnamed_addr constant [2 x i8] c"E\00", align 1
@.str72 = private unnamed_addr constant [2 x i8] c"&\00", align 1
@.str73 = private unnamed_addr constant [3 x i8] c"AA\00", align 1
@.str74 = private unnamed_addr constant [2 x i8] c"U\00", align 1
@.str75 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str76 = private unnamed_addr constant [2 x i8] c"O\00", align 1
@.str77 = private unnamed_addr constant [3 x i8] c"OO\00", align 1
@.str78 = private unnamed_addr constant [2 x i8] c"@\00", align 1
@.str79 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@.str80 = private unnamed_addr constant [2 x i8] c"i\00", align 1
@.str81 = private unnamed_addr constant [3 x i8] c"EE\00", align 1
@.str82 = private unnamed_addr constant [2 x i8] c"3\00", align 1
@.str83 = private unnamed_addr constant [3 x i8] c"ER\00", align 1
@.str84 = private unnamed_addr constant [3 x i8] c"AR\00", align 1
@.str85 = private unnamed_addr constant [3 x i8] c"AW\00", align 1
@.str86 = private unnamed_addr constant [2 x i8] c"u\00", align 1
@.str87 = private unnamed_addr constant [3 x i8] c"UU\00", align 1
@.str88 = private unnamed_addr constant [2 x i8] c"o\00", align 1
@.str89 = private unnamed_addr constant [3 x i8] c"OI\00", align 1
@.str90 = private unnamed_addr constant [3 x i8] c"eI\00", align 1
@.str91 = private unnamed_addr constant [3 x i8] c"AI\00", align 1
@.str92 = private unnamed_addr constant [3 x i8] c"aI\00", align 1
@.str93 = private unnamed_addr constant [3 x i8] c"IE\00", align 1
@.str94 = private unnamed_addr constant [3 x i8] c"oI\00", align 1
@.str95 = private unnamed_addr constant [3 x i8] c"aU\00", align 1
@.str96 = private unnamed_addr constant [3 x i8] c"OU\00", align 1
@.str97 = private unnamed_addr constant [3 x i8] c"OV\00", align 1
@.str98 = private unnamed_addr constant [3 x i8] c"@U\00", align 1
@.str99 = private unnamed_addr constant [3 x i8] c"OA\00", align 1
@.str100 = private unnamed_addr constant [3 x i8] c"I@\00", align 1
@.str101 = private unnamed_addr constant [3 x i8] c"IA\00", align 1
@.str102 = private unnamed_addr constant [3 x i8] c"IB\00", align 1
@.str103 = private unnamed_addr constant [3 x i8] c"e@\00", align 1
@.str104 = private unnamed_addr constant [4 x i8] c"AIR\00", align 1
@.str105 = private unnamed_addr constant [3 x i8] c"U@\00", align 1
@.str106 = private unnamed_addr constant [4 x i8] c"OOR\00", align 1
@.str107 = private unnamed_addr constant [3 x i8] c"O@\00", align 1
@.str108 = private unnamed_addr constant [3 x i8] c"OR\00", align 1
@.str109 = private unnamed_addr constant [3 x i8] c"oU\00", align 1
@.str110 = private unnamed_addr constant [16 x i8] c"Cannot find %s\0A\00", align 1
@num_Elements = external global i32

; Function Attrs: nounwind ssp uwtable
define i32 @phone_append(%struct.darray_t* %p, i32 %ch) #0 {
entry:
  %p.addr = alloca %struct.darray_t*, align 8
  %ch.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  store %struct.darray_t* %p, %struct.darray_t** %p.addr, align 8
  store i32 %ch, i32* %ch.addr, align 4
  %0 = load %struct.darray_t** %p.addr, align 8
  %1 = load %struct.darray_t** %p.addr, align 8
  %items = getelementptr inbounds %struct.darray_t* %1, i32 0, i32 1
  %2 = load i32* %items, align 4
  %call = call i8* @darray_find(%struct.darray_t* %0, i32 %2)
  store i8* %call, i8** %s, align 8
  %3 = load i32* %ch.addr, align 4
  %conv = trunc i32 %3 to i8
  %4 = load i8** %s, align 8
  store i8 %conv, i8* %4, align 1
  %5 = load i32* %ch.addr, align 4
  ret i32 %5
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal i8* @darray_find(%struct.darray_t* %a, i32 %n) #1 {
entry:
  %retval = alloca i8*, align 8
  %a.addr = alloca %struct.darray_t*, align 8
  %n.addr = alloca i32, align 4
  store %struct.darray_t* %a, %struct.darray_t** %a.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32* %n.addr, align 4
  %1 = load %struct.darray_t** %a.addr, align 8
  %alloc = getelementptr inbounds %struct.darray_t* %1, i32 0, i32 2
  %2 = load i32* %alloc, align 4
  %cmp = icmp ult i32 %0, %2
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load i32* %n.addr, align 4
  %4 = load %struct.darray_t** %a.addr, align 8
  %items = getelementptr inbounds %struct.darray_t* %4, i32 0, i32 1
  %5 = load i32* %items, align 4
  %cmp1 = icmp ult i32 %3, %5
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.darray_t** %a.addr, align 8
  %data = getelementptr inbounds %struct.darray_t* %6, i32 0, i32 0
  %7 = load i8** %data, align 8
  %8 = load i32* %n.addr, align 4
  %9 = load %struct.darray_t** %a.addr, align 8
  %esize = getelementptr inbounds %struct.darray_t* %9, i32 0, i32 3
  %10 = load i16* %esize, align 2
  %conv = zext i16 %10 to i32
  %mul = mul i32 %8, %conv
  %idx.ext = zext i32 %mul to i64
  %add.ptr = getelementptr inbounds i8* %7, i64 %idx.ext
  store i8* %add.ptr, i8** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %11 = load %struct.darray_t** %a.addr, align 8
  %12 = load i32* %n.addr, align 4
  %call = call i8* @Darray_find(%struct.darray_t* %11, i32 %12)
  store i8* %call, i8** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %13 = load i8** %retval
  ret i8* %13
}

; Function Attrs: nounwind ssp uwtable
define i32 @phone_to_elm(i8* %phone, i32 %n, %struct.darray_t* %elm) #0 {
entry:
  %phone.addr = alloca i8*, align 8
  %n.addr = alloca i32, align 4
  %elm.addr = alloca %struct.darray_t*, align 8
  %stress = alloca i32, align 4
  %s = alloca i8*, align 8
  %t = alloca i32, align 4
  %limit = alloca i8*, align 8
  %e = alloca i8*, align 8
  %n4 = alloca i32, align 4
  %x = alloca i32, align 4
  %p = alloca %struct.Elm_s*, align 8
  %ch = alloca i8, align 1
  store i8* %phone, i8** %phone.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  store %struct.darray_t* %elm, %struct.darray_t** %elm.addr, align 8
  store i32 0, i32* %stress, align 4
  %0 = load i8** %phone.addr, align 8
  store i8* %0, i8** %s, align 8
  store i32 0, i32* %t, align 4
  %1 = load i8** %s, align 8
  %2 = load i32* %n.addr, align 4
  %idx.ext = sext i32 %2 to i64
  %add.ptr = getelementptr inbounds i8* %1, i64 %idx.ext
  store i8* %add.ptr, i8** %limit, align 8
  %3 = load %struct.trie_s** @phtoelm, align 8
  %tobool = icmp ne %struct.trie_s* %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @enter_phonemes()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end28, %if.end
  %4 = load i8** %s, align 8
  %5 = load i8** %limit, align 8
  %cmp = icmp ult i8* %4, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %6 = load i8** %s, align 8
  %7 = load i8* %6, align 1
  %conv = sext i8 %7 to i32
  %tobool1 = icmp ne i32 %conv, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %8 = phi i1 [ false, %while.cond ], [ %tobool1, %land.rhs ]
  br i1 %8, label %while.body, label %while.end29

while.body:                                       ; preds = %land.end
  %call = call i8* @trie_lookup(%struct.trie_s** @phtoelm, i8** %s)
  store i8* %call, i8** %e, align 8
  %9 = load i8** %e, align 8
  %tobool2 = icmp ne i8* %9, null
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %while.body
  %10 = load i8** %e, align 8
  %incdec.ptr = getelementptr inbounds i8* %10, i32 1
  store i8* %incdec.ptr, i8** %e, align 8
  %11 = load i8* %10, align 1
  %conv5 = sext i8 %11 to i32
  store i32 %conv5, i32* %n4, align 4
  br label %while.cond6

while.cond6:                                      ; preds = %if.end15, %if.then3
  %12 = load i32* %n4, align 4
  %dec = add nsw i32 %12, -1
  store i32 %dec, i32* %n4, align 4
  %cmp7 = icmp sgt i32 %12, 0
  br i1 %cmp7, label %while.body9, label %while.end

while.body9:                                      ; preds = %while.cond6
  %13 = load i8** %e, align 8
  %incdec.ptr10 = getelementptr inbounds i8* %13, i32 1
  store i8* %incdec.ptr10, i8** %e, align 8
  %14 = load i8* %13, align 1
  %conv11 = sext i8 %14 to i32
  store i32 %conv11, i32* %x, align 4
  %15 = load i32* %x, align 4
  %idxprom = sext i32 %15 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.Elm_s]* @Elements, i32 0, i64 %idxprom
  store %struct.Elm_s* %arrayidx, %struct.Elm_s** %p, align 8
  %16 = load %struct.darray_t** %elm.addr, align 8
  %17 = load i32* %x, align 4
  %call12 = call i32 @phone_append(%struct.darray_t* %16, i32 %17)
  %18 = load %struct.Elm_s** %p, align 8
  %feat = getelementptr inbounds %struct.Elm_s* %18, i32 0, i32 7
  %19 = load i64* %feat, align 8
  %and = and i64 %19, 268435456
  %tobool13 = icmp ne i64 %and, 0
  br i1 %tobool13, label %if.end15, label %if.then14

if.then14:                                        ; preds = %while.body9
  store i32 0, i32* %stress, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.then14, %while.body9
  %20 = load %struct.darray_t** %elm.addr, align 8
  %21 = load i32* %stress, align 4
  %22 = load %struct.Elm_s** %p, align 8
  %du = getelementptr inbounds %struct.Elm_s* %22, i32 0, i32 2
  %23 = load i8* %du, align 1
  %conv16 = sext i8 %23 to i32
  %24 = load %struct.Elm_s** %p, align 8
  %ud = getelementptr inbounds %struct.Elm_s* %24, i32 0, i32 3
  %25 = load i8* %ud, align 1
  %conv17 = sext i8 %25 to i32
  %add = add nsw i32 %conv16, %conv17
  %div = sdiv i32 %add, 2
  %26 = load i32* @speed, align 4
  %mul = mul nsw i32 %div, %26
  %call18 = call i32 @phone_append(%struct.darray_t* %20, i32 %mul)
  %27 = load i32* %t, align 4
  %add19 = add i32 %27, %call18
  store i32 %add19, i32* %t, align 4
  %28 = load %struct.darray_t** %elm.addr, align 8
  %29 = load i32* %stress, align 4
  %call20 = call i32 @phone_append(%struct.darray_t* %28, i32 %29)
  br label %while.cond6

while.end:                                        ; preds = %while.cond6
  br label %if.end28

if.else:                                          ; preds = %while.body
  %30 = load i8** %s, align 8
  %incdec.ptr21 = getelementptr inbounds i8* %30, i32 1
  store i8* %incdec.ptr21, i8** %s, align 8
  %31 = load i8* %30, align 1
  store i8 %31, i8* %ch, align 1
  %32 = load i8* %ch, align 1
  %conv22 = sext i8 %32 to i32
  switch i32 %conv22, label %sw.default [
    i32 39, label %sw.bb
    i32 44, label %sw.bb23
    i32 43, label %sw.bb24
    i32 45, label %sw.bb25
  ]

sw.bb:                                            ; preds = %if.else
  store i32 3, i32* %stress, align 4
  br label %sw.epilog

sw.bb23:                                          ; preds = %if.else
  store i32 2, i32* %stress, align 4
  br label %sw.epilog

sw.bb24:                                          ; preds = %if.else
  store i32 1, i32* %stress, align 4
  br label %sw.epilog

sw.bb25:                                          ; preds = %if.else
  br label %sw.epilog

sw.default:                                       ; preds = %if.else
  %33 = load %struct.__sFILE** @__stderrp, align 8
  %34 = load i8* %ch, align 1
  %conv26 = sext i8 %34 to i32
  %35 = load i32* %n.addr, align 4
  %36 = load i8** %phone.addr, align 8
  %call27 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %33, i8* getelementptr inbounds ([23 x i8]* @.str1, i32 0, i32 0), i32 %conv26, i32 %35, i8* %36)
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb25, %sw.bb24, %sw.bb23, %sw.bb
  br label %if.end28

if.end28:                                         ; preds = %sw.epilog, %while.end
  br label %while.cond

while.end29:                                      ; preds = %land.end
  %37 = load i32* %t, align 4
  ret i32 %37
}

; Function Attrs: nounwind ssp uwtable
define internal void @enter_phonemes() #0 {
entry:
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str3, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str7, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str10, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str11, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str12, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str13, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str14, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str15, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str16, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str17, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str18, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str19, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str20, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str21, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str22, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str23, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str24, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str25, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str26, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str27, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str28, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str29, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str30, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str31, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str31, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str32, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str34, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str35, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str36, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str37, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str37, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str38, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str39, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str40, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str41, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str42, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str43, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str42, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str21, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str44, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str43, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str45, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str46, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str47, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str43, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str48, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str47, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str49, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str43, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str49, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([3 x i8]* @.str50, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str51, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str52, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([3 x i8]* @.str53, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str54, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str55, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str43, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str55, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str56, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str57, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str58, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str59, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([3 x i8]* @.str60, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str59, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str43, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str59, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str59, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str61, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str62, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str63, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str64, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str65, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str66, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str43, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str67, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str68, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str69, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str69, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str70, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str71, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str72, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str73, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str42, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str74, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str75, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str76, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str74, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str77, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str78, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str79, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str80, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str81, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str82, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str83, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str79, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str84, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str76, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str85, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str86, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str87, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([2 x i8]* @.str88, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str89, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([3 x i8]* @.str90, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str91, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str69, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([3 x i8]* @.str92, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str93, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str69, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([3 x i8]* @.str94, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str89, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str69, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([3 x i8]* @.str95, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str97, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([3 x i8]* @.str98, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str99, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str97, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([3 x i8]* @.str100, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str101, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str102, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([3 x i8]* @.str103, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str104, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str102, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([3 x i8]* @.str105, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str106, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str102, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([3 x i8]* @.str107, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str108, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str102, i32 0, i32 0), i8* null)
  call void (i8*, ...)* @enter(i8* getelementptr inbounds ([3 x i8]* @.str109, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str89, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str97, i32 0, i32 0), i8* null)
  ret void
}

declare i8* @trie_lookup(%struct.trie_s**, i8**) #2

declare i32 @fprintf(%struct.__sFILE*, i8*, ...) #2

; Function Attrs: nounwind ssp uwtable
define internal void @enter(i8* %p, ...) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %s = alloca i8*, align 8
  %buf = alloca [20 x i8], align 16
  %x = alloca i8*, align 8
  %e = alloca %struct.Elm_s*, align 8
  store i8* %p, i8** %p.addr, align 8
  %arraydecay = getelementptr inbounds [20 x i8]* %buf, i32 0, i32 0
  %add.ptr = getelementptr inbounds i8* %arraydecay, i64 1
  store i8* %add.ptr, i8** %x, align 8
  %arraydecay1 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay12 = bitcast %struct.__va_list_tag* %arraydecay1 to i8*
  call void @llvm.va_start(i8* %arraydecay12)
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag* %arraydecay3, i32 0, i32 0
  %gp_offset = load i32* %gp_offset_p
  %fits_in_gp = icmp ule i32 %gp_offset, 40
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %while.cond
  %0 = getelementptr inbounds %struct.__va_list_tag* %arraydecay3, i32 0, i32 3
  %reg_save_area = load i8** %0
  %1 = getelementptr i8* %reg_save_area, i32 %gp_offset
  %2 = bitcast i8* %1 to i8**
  %3 = add i32 %gp_offset, 8
  store i32 %3, i32* %gp_offset_p
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %while.cond
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag* %arraydecay3, i32 0, i32 2
  %overflow_arg_area = load i8** %overflow_arg_area_p
  %4 = bitcast i8* %overflow_arg_area to i8**
  %overflow_arg_area.next = getelementptr i8* %overflow_arg_area, i32 8
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi i8** [ %2, %vaarg.in_reg ], [ %4, %vaarg.in_mem ]
  %5 = load i8** %vaarg.addr
  store i8* %5, i8** %s, align 8
  %tobool = icmp ne i8* %5, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %vaarg.end
  %6 = load i8** %s, align 8
  %call = call %struct.Elm_s* @find_elm(i8* %6)
  store %struct.Elm_s* %call, %struct.Elm_s** %e, align 8
  %7 = load %struct.Elm_s** %e, align 8
  %tobool4 = icmp ne %struct.Elm_s* %7, null
  br i1 %tobool4, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %8 = load %struct.Elm_s** %e, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.Elm_s* %8 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, ptrtoint ([0 x %struct.Elm_s]* @Elements to i64)
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 272
  %conv = trunc i64 %sub.ptr.div to i8
  %9 = load i8** %x, align 8
  %incdec.ptr = getelementptr inbounds i8* %9, i32 1
  store i8* %incdec.ptr, i8** %x, align 8
  store i8 %conv, i8* %9, align 1
  br label %if.end

if.else:                                          ; preds = %while.body
  %10 = load %struct.__sFILE** @__stderrp, align 8
  %11 = load i8** %s, align 8
  %call5 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %10, i8* getelementptr inbounds ([16 x i8]* @.str110, i32 0, i32 0), i8* %11)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond

while.end:                                        ; preds = %vaarg.end
  %arraydecay6 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay67 = bitcast %struct.__va_list_tag* %arraydecay6 to i8*
  call void @llvm.va_end(i8* %arraydecay67)
  %12 = load i8** %x, align 8
  %arraydecay8 = getelementptr inbounds [20 x i8]* %buf, i32 0, i32 0
  %sub.ptr.lhs.cast9 = ptrtoint i8* %12 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay8 to i64
  %sub.ptr.sub10 = sub i64 %sub.ptr.lhs.cast9, %sub.ptr.rhs.cast
  %sub = sub nsw i64 %sub.ptr.sub10, 1
  %conv11 = trunc i64 %sub to i8
  %arrayidx = getelementptr inbounds [20 x i8]* %buf, i32 0, i64 0
  store i8 %conv11, i8* %arrayidx, align 1
  %arrayidx12 = getelementptr inbounds [20 x i8]* %buf, i32 0, i64 0
  %13 = load i8* %arrayidx12, align 1
  %conv13 = sext i8 %13 to i32
  %add = add nsw i32 %conv13, 1
  %conv14 = sext i32 %add to i64
  %call15 = call i8* @malloc(i64 %conv14)
  store i8* %call15, i8** %x, align 8
  %14 = load i8** %x, align 8
  %arraydecay16 = getelementptr inbounds [20 x i8]* %buf, i32 0, i32 0
  %arrayidx17 = getelementptr inbounds [20 x i8]* %buf, i32 0, i64 0
  %15 = load i8* %arrayidx17, align 1
  %conv18 = sext i8 %15 to i32
  %add19 = add nsw i32 %conv18, 1
  %conv20 = sext i32 %add19 to i64
  %16 = load i8** %x, align 8
  %17 = call i64 @llvm.objectsize.i64(i8* %16, i1 false)
  %call21 = call i8* @__memcpy_chk(i8* %14, i8* %arraydecay16, i64 %conv20, i64 %17) #3
  %18 = load i8** %p.addr, align 8
  %19 = load i8** %x, align 8
  call void @trie_insert(%struct.trie_s** @phtoelm, i8* %18, i8* %19)
  ret void
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #3

; Function Attrs: nounwind ssp uwtable
define internal %struct.Elm_s* @find_elm(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %e = alloca %struct.Elm_s*, align 8
  %return_element = alloca %struct.Elm_s*, align 8
  store i8* %s, i8** %s.addr, align 8
  store %struct.Elm_s* getelementptr inbounds ([0 x %struct.Elm_s]* @Elements, i32 0, i32 0), %struct.Elm_s** %e, align 8
  store %struct.Elm_s* null, %struct.Elm_s** %return_element, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.Elm_s** %e, align 8
  %1 = load i32* @num_Elements, align 4
  %idx.ext = zext i32 %1 to i64
  %add.ptr = getelementptr inbounds %struct.Elm_s* getelementptr inbounds ([0 x %struct.Elm_s]* @Elements, i32 0, i32 0), i64 %idx.ext
  %cmp = icmp ult %struct.Elm_s* %0, %add.ptr
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %2 = load %struct.Elm_s** %return_element, align 8
  %cmp1 = icmp eq %struct.Elm_s* %2, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %3 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %3, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %4 = load i8** %s.addr, align 8
  %5 = load %struct.Elm_s** %e, align 8
  %name = getelementptr inbounds %struct.Elm_s* %5, i32 0, i32 0
  %6 = load i8** %name, align 8
  %call = call i32 @strcmp(i8* %4, i8* %6)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %while.body
  %7 = load %struct.Elm_s** %e, align 8
  store %struct.Elm_s* %7, %struct.Elm_s** %return_element, align 8
  br label %if.end

if.else:                                          ; preds = %while.body
  %8 = load %struct.Elm_s** %e, align 8
  %incdec.ptr = getelementptr inbounds %struct.Elm_s* %8, i32 1
  store %struct.Elm_s* %incdec.ptr, %struct.Elm_s** %e, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond

while.end:                                        ; preds = %land.end
  %9 = load %struct.Elm_s** %return_element, align 8
  ret %struct.Elm_s* %9
}

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #3

declare i8* @malloc(i64) #2

; Function Attrs: nounwind
declare i8* @__memcpy_chk(i8*, i8*, i64, i64) #4

; Function Attrs: nounwind readnone
declare i64 @llvm.objectsize.i64(i8*, i1) #5

declare void @trie_insert(%struct.trie_s**, i8*, i8*) #2

declare i32 @strcmp(i8*, i8*) #2

declare i8* @Darray_find(%struct.darray_t*, i32) #2

attributes #0 = { nounwind ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }
