; ModuleID = 'nsynth.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.9.0"

%struct.klatt_global_t = type { i32, i32, i32, i32, i64, i64, i64, i64 }
%struct.klatt_frame_t = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.resonator_t = type { i8*, float, float, float, float, float }

@.str = private unnamed_addr constant [63 x i8] c"$Id: nsynth.c,v 1.13 1994/11/08 13:30:50 a904209 Exp a904209 $\00", align 1
@nsynth_id = global i8* getelementptr inbounds ([63 x i8]* @.str, i32 0, i32 0), align 8
@time_count = global i32 0, align 4
@.str1 = private unnamed_addr constant [7 x i8] c"F0hz10\00", align 1
@.str2 = private unnamed_addr constant [5 x i8] c"AVdb\00", align 1
@.str3 = private unnamed_addr constant [5 x i8] c"F1hz\00", align 1
@.str4 = private unnamed_addr constant [5 x i8] c"B1hz\00", align 1
@.str5 = private unnamed_addr constant [5 x i8] c"F2hz\00", align 1
@.str6 = private unnamed_addr constant [5 x i8] c"B2hz\00", align 1
@.str7 = private unnamed_addr constant [5 x i8] c"F3hz\00", align 1
@.str8 = private unnamed_addr constant [5 x i8] c"B3hz\00", align 1
@.str9 = private unnamed_addr constant [5 x i8] c"F4hz\00", align 1
@.str10 = private unnamed_addr constant [5 x i8] c"B4hz\00", align 1
@.str11 = private unnamed_addr constant [5 x i8] c"F5hz\00", align 1
@.str12 = private unnamed_addr constant [5 x i8] c"B5hz\00", align 1
@.str13 = private unnamed_addr constant [5 x i8] c"F6hz\00", align 1
@.str14 = private unnamed_addr constant [5 x i8] c"B6hz\00", align 1
@.str15 = private unnamed_addr constant [6 x i8] c"FNZhz\00", align 1
@.str16 = private unnamed_addr constant [6 x i8] c"BNZhz\00", align 1
@.str17 = private unnamed_addr constant [6 x i8] c"FNPhz\00", align 1
@.str18 = private unnamed_addr constant [6 x i8] c"BNPhz\00", align 1
@.str19 = private unnamed_addr constant [3 x i8] c"AP\00", align 1
@.str20 = private unnamed_addr constant [6 x i8] c"Kopen\00", align 1
@.str21 = private unnamed_addr constant [6 x i8] c"Aturb\00", align 1
@.str22 = private unnamed_addr constant [6 x i8] c"TLTdb\00", align 1
@.str23 = private unnamed_addr constant [3 x i8] c"AF\00", align 1
@.str24 = private unnamed_addr constant [6 x i8] c"Kskew\00", align 1
@.str25 = private unnamed_addr constant [3 x i8] c"A1\00", align 1
@.str26 = private unnamed_addr constant [6 x i8] c"B1phz\00", align 1
@.str27 = private unnamed_addr constant [3 x i8] c"A2\00", align 1
@.str28 = private unnamed_addr constant [6 x i8] c"B2phz\00", align 1
@.str29 = private unnamed_addr constant [3 x i8] c"A3\00", align 1
@.str30 = private unnamed_addr constant [6 x i8] c"B3phz\00", align 1
@.str31 = private unnamed_addr constant [3 x i8] c"A4\00", align 1
@.str32 = private unnamed_addr constant [6 x i8] c"B4phz\00", align 1
@.str33 = private unnamed_addr constant [3 x i8] c"A5\00", align 1
@.str34 = private unnamed_addr constant [6 x i8] c"B5phz\00", align 1
@.str35 = private unnamed_addr constant [3 x i8] c"A6\00", align 1
@.str36 = private unnamed_addr constant [6 x i8] c"B6phz\00", align 1
@.str37 = private unnamed_addr constant [4 x i8] c"ANP\00", align 1
@.str38 = private unnamed_addr constant [3 x i8] c"AB\00", align 1
@.str39 = private unnamed_addr constant [6 x i8] c"AVpdb\00", align 1
@.str40 = private unnamed_addr constant [6 x i8] c"Gain0\00", align 1
@par_name = global [40 x i8*] [i8* getelementptr inbounds ([7 x i8]* @.str1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str11, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str12, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str13, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str14, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str16, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str17, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str18, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str19, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str20, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str21, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str22, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str23, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str24, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str25, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str26, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str27, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str28, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str29, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str30, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str31, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str32, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str34, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str35, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str36, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str37, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str39, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str40, i32 0, i32 0)], align 16
@show_parms.names = internal global i32 0, align 4
@.str41 = private unnamed_addr constant [4 x i8] c"%s \00", align 1
@.str42 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str43 = private unnamed_addr constant [5 x i8] c"%*d \00", align 1
@parwave.seed = internal global i64 5, align 8
@nlast = internal global float 0.000000e+00, align 4
@nper = internal global i64 0, align 8
@nmod = internal global i64 0, align 8
@amp_frica = internal global float 0.000000e+00, align 4
@T0 = internal global i64 0, align 8
@onemd = internal global float 0.000000e+00, align 4
@vlast = internal global float 0.000000e+00, align 4
@decay = internal global float 0.000000e+00, align 4
@nopen = internal global i64 0, align 8
@amp_breth = internal global float 0.000000e+00, align 4
@amp_voice = internal global float 0.000000e+00, align 4
@amp_aspir = internal global float 0.000000e+00, align 4
@glotlast = internal global float 0.000000e+00, align 4
@amp_bypas = internal global float 0.000000e+00, align 4
@minus_pi_t = internal global float 0.000000e+00, align 4
@two_pi_t = internal global float 0.000000e+00, align 4
@warnsw = internal global i32 0, align 4
@.str44 = private unnamed_addr constant [33 x i8] c"crit-damped glot low-pass filter\00", align 1
@rgl = internal global { i8*, float, float, float, float, float, [4 x i8] } { i8* getelementptr inbounds ([33 x i8]* @.str44, i32 0, i32 0), float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, [4 x i8] undef }, align 8
@.str45 = private unnamed_addr constant [20 x i8] c"parallel nasal pole\00", align 1
@rnpp = internal global { i8*, float, float, float, float, float, [4 x i8] } { i8* getelementptr inbounds ([20 x i8]* @.str45, i32 0, i32 0), float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, [4 x i8] undef }, align 8
@.str46 = private unnamed_addr constant [17 x i8] c"\0A* * * WARNING: \00", align 1
@.str47 = private unnamed_addr constant [59 x i8] c" Signal at output of synthesizer (+%3.1f dB) exceeds 0 dB\0A\00", align 1
@.str48 = private unnamed_addr constant [16 x i8] c"output low-pass\00", align 1
@rout = internal global { i8*, float, float, float, float, float, [4 x i8] } { i8* getelementptr inbounds ([16 x i8]* @.str48, i32 0, i32 0), float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, [4 x i8] undef }, align 8
@.str49 = private unnamed_addr constant [21 x i8] c"parallel 2nd formant\00", align 1
@r2p = internal global { i8*, float, float, float, float, float, [4 x i8] } { i8* getelementptr inbounds ([21 x i8]* @.str49, i32 0, i32 0), float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, [4 x i8] undef }, align 8
@.str50 = private unnamed_addr constant [21 x i8] c"parallel 3rd formant\00", align 1
@r3p = internal global { i8*, float, float, float, float, float, [4 x i8] } { i8* getelementptr inbounds ([21 x i8]* @.str50, i32 0, i32 0), float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, [4 x i8] undef }, align 8
@.str51 = private unnamed_addr constant [21 x i8] c"parallel 4th formant\00", align 1
@r4p = internal global { i8*, float, float, float, float, float, [4 x i8] } { i8* getelementptr inbounds ([21 x i8]* @.str51, i32 0, i32 0), float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, [4 x i8] undef }, align 8
@.str52 = private unnamed_addr constant [21 x i8] c"parallel 5th formant\00", align 1
@r5p = internal global { i8*, float, float, float, float, float, [4 x i8] } { i8* getelementptr inbounds ([21 x i8]* @.str52, i32 0, i32 0), float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, [4 x i8] undef }, align 8
@.str53 = private unnamed_addr constant [21 x i8] c"parallel 6th formant\00", align 1
@r6p = internal global { i8*, float, float, float, float, float, [4 x i8] } { i8* getelementptr inbounds ([21 x i8]* @.str53, i32 0, i32 0), float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, [4 x i8] undef }, align 8
@.str54 = private unnamed_addr constant [21 x i8] c"parallel 1st formant\00", align 1
@r1p = internal global { i8*, float, float, float, float, float, [4 x i8] } { i8* getelementptr inbounds ([21 x i8]* @.str54, i32 0, i32 0), float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, [4 x i8] undef }, align 8
@.str55 = private unnamed_addr constant [20 x i8] c"cascade 1st formant\00", align 1
@r1c = internal global { i8*, float, float, float, float, float, [4 x i8] } { i8* getelementptr inbounds ([20 x i8]* @.str55, i32 0, i32 0), float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, [4 x i8] undef }, align 8
@.str56 = private unnamed_addr constant [20 x i8] c"cascade 2nd formant\00", align 1
@r2c = internal global { i8*, float, float, float, float, float, [4 x i8] } { i8* getelementptr inbounds ([20 x i8]* @.str56, i32 0, i32 0), float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, [4 x i8] undef }, align 8
@.str57 = private unnamed_addr constant [20 x i8] c"cascade 3rd formant\00", align 1
@r3c = internal global { i8*, float, float, float, float, float, [4 x i8] } { i8* getelementptr inbounds ([20 x i8]* @.str57, i32 0, i32 0), float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, [4 x i8] undef }, align 8
@.str58 = private unnamed_addr constant [20 x i8] c"cascade 4th formant\00", align 1
@r4c = internal global { i8*, float, float, float, float, float, [4 x i8] } { i8* getelementptr inbounds ([20 x i8]* @.str58, i32 0, i32 0), float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, [4 x i8] undef }, align 8
@.str59 = private unnamed_addr constant [20 x i8] c"cascade 5th formant\00", align 1
@r5c = internal global { i8*, float, float, float, float, float, [4 x i8] } { i8* getelementptr inbounds ([20 x i8]* @.str59, i32 0, i32 0), float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, [4 x i8] undef }, align 8
@.str60 = private unnamed_addr constant [20 x i8] c"cascade 6th formant\00", align 1
@r6c = internal global { i8*, float, float, float, float, float, [4 x i8] } { i8* getelementptr inbounds ([20 x i8]* @.str60, i32 0, i32 0), float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, [4 x i8] undef }, align 8
@.str61 = private unnamed_addr constant [20 x i8] c"cascade 7th formant\00", align 1
@r7c = internal global { i8*, float, float, float, float, float, [4 x i8] } { i8* getelementptr inbounds ([20 x i8]* @.str61, i32 0, i32 0), float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, [4 x i8] undef }, align 8
@.str62 = private unnamed_addr constant [20 x i8] c"cascade 8th formant\00", align 1
@r8c = internal global { i8*, float, float, float, float, float, [4 x i8] } { i8* getelementptr inbounds ([20 x i8]* @.str62, i32 0, i32 0), float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, [4 x i8] undef }, align 8
@.str63 = private unnamed_addr constant [19 x i8] c"cascade nasal pole\00", align 1
@rnpc = internal global { i8*, float, float, float, float, float, [4 x i8] } { i8* getelementptr inbounds ([19 x i8]* @.str63, i32 0, i32 0), float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, [4 x i8] undef }, align 8
@.str64 = private unnamed_addr constant [19 x i8] c"cascade nasal zero\00", align 1
@rnz = internal global { i8*, float, float, float, float, float, [4 x i8] } { i8* getelementptr inbounds ([19 x i8]* @.str64, i32 0, i32 0), float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, [4 x i8] undef }, align 8
@.str65 = private unnamed_addr constant [25 x i8] c"downsamp low-pass filter\00", align 1
@rlp = internal global { i8*, float, float, float, float, float, [4 x i8] } { i8* getelementptr inbounds ([25 x i8]* @.str65, i32 0, i32 0), float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, [4 x i8] undef }, align 8
@F0hz10 = internal global i64 0, align 8
@AVdb = internal global i64 0, align 8
@.str66 = private unnamed_addr constant [58 x i8] c"Warning: glottal open period cannot exceed T0, truncated\0A\00", align 1
@.str67 = private unnamed_addr constant [53 x i8] c"Warning: minimum glottal open period is 10 samples.\0A\00", align 1
@.str68 = private unnamed_addr constant [24 x i8] c"truncated, nopen = %ld\0A\00", align 1
@natglot = internal constant [224 x i16] [i16 1200, i16 1142, i16 1088, i16 1038, i16 991, i16 948, i16 907, i16 869, i16 833, i16 799, i16 768, i16 738, i16 710, i16 683, i16 658, i16 634, i16 612, i16 590, i16 570, i16 551, i16 533, i16 515, i16 499, i16 483, i16 468, i16 454, i16 440, i16 427, i16 415, i16 403, i16 391, i16 380, i16 370, i16 360, i16 350, i16 341, i16 332, i16 323, i16 315, i16 307, i16 300, i16 292, i16 285, i16 278, i16 272, i16 265, i16 259, i16 253, i16 247, i16 242, i16 237, i16 231, i16 226, i16 221, i16 217, i16 212, i16 208, i16 204, i16 199, i16 195, i16 192, i16 188, i16 184, i16 180, i16 177, i16 174, i16 170, i16 167, i16 164, i16 161, i16 158, i16 155, i16 153, i16 150, i16 147, i16 145, i16 142, i16 140, i16 137, i16 135, i16 133, i16 131, i16 128, i16 126, i16 124, i16 122, i16 120, i16 119, i16 117, i16 115, i16 113, i16 111, i16 110, i16 108, i16 106, i16 105, i16 103, i16 102, i16 100, i16 99, i16 97, i16 96, i16 95, i16 93, i16 92, i16 91, i16 90, i16 88, i16 87, i16 86, i16 85, i16 84, i16 83, i16 82, i16 80, i16 79, i16 78, i16 77, i16 76, i16 75, i16 75, i16 74, i16 73, i16 72, i16 71, i16 70, i16 69, i16 68, i16 68, i16 67, i16 66, i16 65, i16 64, i16 64, i16 63, i16 62, i16 61, i16 61, i16 60, i16 59, i16 59, i16 58, i16 57, i16 57, i16 56, i16 56, i16 55, i16 55, i16 54, i16 54, i16 53, i16 53, i16 52, i16 52, i16 51, i16 51, i16 50, i16 50, i16 49, i16 49, i16 48, i16 48, i16 47, i16 47, i16 46, i16 46, i16 45, i16 45, i16 44, i16 44, i16 43, i16 43, i16 42, i16 42, i16 41, i16 41, i16 41, i16 41, i16 40, i16 40, i16 39, i16 39, i16 38, i16 38, i16 38, i16 38, i16 37, i16 37, i16 36, i16 36, i16 36, i16 36, i16 35, i16 35, i16 35, i16 35, i16 34, i16 34, i16 33, i16 33, i16 33, i16 33, i16 32, i16 32, i16 32, i16 32, i16 31, i16 31, i16 31, i16 31, i16 30, i16 30, i16 30, i16 30, i16 29, i16 29, i16 29, i16 29, i16 28, i16 28, i16 28, i16 28, i16 27, i16 27], align 16
@natglot_b = internal global float 0.000000e+00, align 4
@natglot_a = internal global float 0.000000e+00, align 4
@Kskew = internal global i64 0, align 8
@.str69 = private unnamed_addr constant [58 x i8] c"Kskew duration=%ld > glottal closed period=%ld, truncate\0A\00", align 1
@skew = internal global i64 0, align 8
@.str70 = private unnamed_addr constant [30 x i8] c"Try to compute amptable[%ld]\0A\00", align 1
@amptable = internal constant [88 x float] [float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 6.000000e+00, float 7.000000e+00, float 8.000000e+00, float 9.000000e+00, float 1.000000e+01, float 1.100000e+01, float 1.300000e+01, float 1.400000e+01, float 1.600000e+01, float 1.800000e+01, float 2.000000e+01, float 2.200000e+01, float 2.500000e+01, float 2.800000e+01, float 3.200000e+01, float 3.500000e+01, float 4.000000e+01, float 4.500000e+01, float 5.100000e+01, float 5.700000e+01, float 6.400000e+01, float 7.100000e+01, float 8.000000e+01, float 9.000000e+01, float 1.010000e+02, float 1.140000e+02, float 1.280000e+02, float 1.420000e+02, float 1.590000e+02, float 1.790000e+02, float 2.020000e+02, float 2.270000e+02, float 2.560000e+02, float 2.840000e+02, float 3.180000e+02, float 3.590000e+02, float 4.050000e+02, float 4.550000e+02, float 5.120000e+02, float 5.680000e+02, float 6.380000e+02, float 7.190000e+02, float 8.110000e+02, float 9.110000e+02, float 1.024000e+03, float 1.137000e+03, float 1.276000e+03, float 1.438000e+03, float 1.622000e+03, float 1.823000e+03, float 2.048000e+03, float 2.273000e+03, float 2.552000e+03, float 2.875000e+03, float 3.244000e+03, float 3.645000e+03, float 4.096000e+03, float 4.547000e+03, float 5.104000e+03, float 5.751000e+03, float 6.488000e+03, float 7.291000e+03, float 8.192000e+03, float 9.093000e+03, float 1.020700e+04, float 1.150200e+04, float 1.297600e+04, float 1.458200e+04, float 1.638400e+04, float 1.835000e+04, float 2.064400e+04, float 2.342900e+04, float 2.621400e+04, float 2.949100e+04, float 3.276700e+04], align 16
@vwave = internal global float 0.000000e+00, align 4
@impulsive_source.doublet = internal global [3 x float] [float 0.000000e+00, float 1.300000e+07, float -1.300000e+07], align 4
@par_amp_voice = internal global float 0.000000e+00, align 4

; Function Attrs: nounwind ssp uwtable
define void @show_parms(%struct.klatt_global_t* %globals, i32* %pars) #0 {
entry:
  %globals.addr = alloca %struct.klatt_global_t*, align 8
  %pars.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  store %struct.klatt_global_t* %globals, %struct.klatt_global_t** %globals.addr, align 8
  store i32* %pars, i32** %pars.addr, align 8
  %0 = load i32* @show_parms.names, align 4
  %inc = add nsw i32 %0, 1
  store i32 %inc, i32* @show_parms.names, align 4
  %rem = srem i32 %0, 64
  %cmp = icmp eq i32 %rem, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32* %i, align 4
  %cmp1 = icmp slt i32 %1, 40
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [40 x i8*]* @par_name, i32 0, i64 %idxprom
  %3 = load i8** %arrayidx, align 8
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0), i8* %3)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32* %i, align 4
  %inc2 = add nsw i32 %4, 1
  store i32 %inc2, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str42, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc13, %if.end
  %5 = load i32* %i, align 4
  %cmp5 = icmp slt i32 %5, 40
  br i1 %cmp5, label %for.body6, label %for.end15

for.body6:                                        ; preds = %for.cond4
  %6 = load i32* %i, align 4
  %idxprom7 = sext i32 %6 to i64
  %arrayidx8 = getelementptr inbounds [40 x i8*]* @par_name, i32 0, i64 %idxprom7
  %7 = load i8** %arrayidx8, align 8
  %call9 = call i64 @strlen(i8* %7)
  %conv = trunc i64 %call9 to i32
  %8 = load i32* %i, align 4
  %idxprom10 = sext i32 %8 to i64
  %9 = load i32** %pars.addr, align 8
  %arrayidx11 = getelementptr inbounds i32* %9, i64 %idxprom10
  %10 = load i32* %arrayidx11, align 4
  %call12 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str43, i32 0, i32 0), i32 %conv, i32 %10)
  br label %for.inc13

for.inc13:                                        ; preds = %for.body6
  %11 = load i32* %i, align 4
  %inc14 = add nsw i32 %11, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond4

for.end15:                                        ; preds = %for.cond4
  %call16 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str42, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8*, ...) #1

declare i64 @strlen(i8*) #1

; Function Attrs: nounwind ssp uwtable
define void @parwave(%struct.klatt_global_t* %globals, %struct.klatt_frame_t* %frame, i16* %jwave) #0 {
entry:
  %globals.addr = alloca %struct.klatt_global_t*, align 8
  %frame.addr = alloca %struct.klatt_frame_t*, align 8
  %jwave.addr = alloca i16*, align 8
  %ns = alloca i64, align 8
  %out = alloca float, align 4
  %noise = alloca float, align 4
  %n4 = alloca i32, align 4
  %sourc = alloca float, align 4
  %glotout = alloca float, align 4
  %par_glotout = alloca float, align 4
  %voice = alloca float, align 4
  %frics = alloca float, align 4
  %aspiration = alloca float, align 4
  %nrand = alloca i64, align 8
  %rnzout = alloca float, align 4
  %casc_next_in = alloca float, align 4
  store %struct.klatt_global_t* %globals, %struct.klatt_global_t** %globals.addr, align 8
  store %struct.klatt_frame_t* %frame, %struct.klatt_frame_t** %frame.addr, align 8
  store i16* %jwave, i16** %jwave.addr, align 8
  store float 0.000000e+00, float* %out, align 4
  %0 = load %struct.klatt_global_t** %globals.addr, align 8
  %1 = load %struct.klatt_frame_t** %frame.addr, align 8
  call void @frame_init(%struct.klatt_global_t* %0, %struct.klatt_frame_t* %1)
  %2 = load %struct.klatt_global_t** %globals.addr, align 8
  %f0_flutter = getelementptr inbounds %struct.klatt_global_t* %2, i32 0, i32 2
  %3 = load i32* %f0_flutter, align 4
  %cmp = icmp ne i32 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32* @time_count, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* @time_count, align 4
  %5 = load %struct.klatt_global_t** %globals.addr, align 8
  %6 = load %struct.klatt_frame_t** %frame.addr, align 8
  call void @flutter(%struct.klatt_global_t* %5, %struct.klatt_frame_t* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i64 0, i64* %ns, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc83, %if.end
  %7 = load i64* %ns, align 8
  %8 = load %struct.klatt_global_t** %globals.addr, align 8
  %nspfr = getelementptr inbounds %struct.klatt_global_t* %8, i32 0, i32 7
  %9 = load i64* %nspfr, align 8
  %cmp1 = icmp slt i64 %7, %9
  br i1 %cmp1, label %for.body, label %for.end85

for.body:                                         ; preds = %for.cond
  %10 = load i64* @parwave.seed, align 8
  %mul = mul i64 %10, 1664525
  %add = add i64 %mul, 1
  store i64 %add, i64* @parwave.seed, align 8
  %11 = load i64* @parwave.seed, align 8
  %and = and i64 %11, 4294967295
  store i64 %and, i64* @parwave.seed, align 8
  %12 = load i64* @parwave.seed, align 8
  %shl = shl i64 %12, 32
  %shr = ashr i64 %shl, 50
  store i64 %shr, i64* %nrand, align 8
  %13 = load i64* %nrand, align 8
  %conv = sitofp i64 %13 to double
  %14 = load float* @nlast, align 4
  %conv2 = fpext float %14 to double
  %mul3 = fmul double 7.500000e-01, %conv2
  %add4 = fadd double %conv, %mul3
  %conv5 = fptrunc double %add4 to float
  store float %conv5, float* %noise, align 4
  %15 = load float* %noise, align 4
  store float %15, float* @nlast, align 4
  %16 = load i64* @nper, align 8
  %17 = load i64* @nmod, align 8
  %cmp6 = icmp sgt i64 %16, %17
  br i1 %cmp6, label %if.then8, label %if.end12

if.then8:                                         ; preds = %for.body
  %18 = load float* %noise, align 4
  %conv9 = fpext float %18 to double
  %mul10 = fmul double %conv9, 5.000000e-01
  %conv11 = fptrunc double %mul10 to float
  store float %conv11, float* %noise, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then8, %for.body
  %19 = load float* @amp_frica, align 4
  %20 = load float* %noise, align 4
  %mul13 = fmul float %19, %20
  store float %mul13, float* %frics, align 4
  store float %mul13, float* %sourc, align 4
  store i32 0, i32* %n4, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %if.end12
  %21 = load i32* %n4, align 4
  %cmp15 = icmp slt i32 %21, 4
  br i1 %cmp15, label %for.body17, label %for.end

for.body17:                                       ; preds = %for.cond14
  %22 = load %struct.klatt_global_t** %globals.addr, align 8
  %glsource = getelementptr inbounds %struct.klatt_global_t* %22, i32 0, i32 6
  %23 = load i64* %glsource, align 8
  %cmp18 = icmp eq i64 %23, 1
  br i1 %cmp18, label %if.then20, label %if.else

if.then20:                                        ; preds = %for.body17
  %24 = load i64* @nper, align 8
  %call = call float @impulsive_source(i64 %24)
  store float %call, float* %voice, align 4
  br label %if.end22

if.else:                                          ; preds = %for.body17
  %25 = load i64* @nper, align 8
  %call21 = call float @natural_source(i64 %25)
  store float %call21, float* %voice, align 4
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then20
  %26 = load i64* @nper, align 8
  %27 = load i64* @T0, align 8
  %cmp23 = icmp sge i64 %26, %27
  br i1 %cmp23, label %if.then25, label %if.end26

if.then25:                                        ; preds = %if.end22
  store i64 0, i64* @nper, align 8
  %28 = load %struct.klatt_global_t** %globals.addr, align 8
  %29 = load %struct.klatt_frame_t** %frame.addr, align 8
  %30 = load i64* %ns, align 8
  call void @pitch_synch_par_reset(%struct.klatt_global_t* %28, %struct.klatt_frame_t* %29, i64 %30)
  br label %if.end26

if.end26:                                         ; preds = %if.then25, %if.end22
  %31 = load float* %voice, align 4
  %call27 = call float @resonator(%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rlp to %struct.resonator_t*), float %31)
  store float %call27, float* %voice, align 4
  %32 = load i64* @nper, align 8
  %inc28 = add nsw i64 %32, 1
  store i64 %inc28, i64* @nper, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.end26
  %33 = load i32* %n4, align 4
  %inc29 = add nsw i32 %33, 1
  store i32 %inc29, i32* %n4, align 4
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  %34 = load float* %voice, align 4
  %35 = load float* @onemd, align 4
  %mul30 = fmul float %34, %35
  %36 = load float* @vlast, align 4
  %37 = load float* @decay, align 4
  %mul31 = fmul float %36, %37
  %add32 = fadd float %mul30, %mul31
  store float %add32, float* %voice, align 4
  %38 = load float* %voice, align 4
  store float %38, float* @vlast, align 4
  %39 = load i64* @nper, align 8
  %40 = load i64* @nopen, align 8
  %cmp33 = icmp slt i64 %39, %40
  br i1 %cmp33, label %if.then35, label %if.end39

if.then35:                                        ; preds = %for.end
  %41 = load float* @amp_breth, align 4
  %42 = load i64* %nrand, align 8
  %conv36 = sitofp i64 %42 to float
  %mul37 = fmul float %41, %conv36
  %43 = load float* %voice, align 4
  %add38 = fadd float %43, %mul37
  store float %add38, float* %voice, align 4
  br label %if.end39

if.end39:                                         ; preds = %if.then35, %for.end
  %44 = load float* @amp_voice, align 4
  %45 = load float* %voice, align 4
  %mul40 = fmul float %44, %45
  store float %mul40, float* %glotout, align 4
  %46 = load float* @amp_aspir, align 4
  %47 = load float* %noise, align 4
  %mul41 = fmul float %46, %47
  store float %mul41, float* %aspiration, align 4
  %48 = load float* %aspiration, align 4
  %49 = load float* %glotout, align 4
  %add42 = fadd float %49, %48
  store float %add42, float* %glotout, align 4
  %50 = load float* %glotout, align 4
  store float %50, float* %par_glotout, align 4
  %51 = load %struct.klatt_global_t** %globals.addr, align 8
  %synthesis_model = getelementptr inbounds %struct.klatt_global_t* %51, i32 0, i32 0
  %52 = load i32* %synthesis_model, align 4
  %cmp43 = icmp ne i32 %52, 2
  br i1 %cmp43, label %if.then45, label %if.else63

if.then45:                                        ; preds = %if.end39
  %53 = load float* %glotout, align 4
  %call46 = call float @antiresonator(%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rnz to %struct.resonator_t*), float %53)
  store float %call46, float* %rnzout, align 4
  %54 = load float* %rnzout, align 4
  %call47 = call float @resonator(%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rnpc to %struct.resonator_t*), float %54)
  store float %call47, float* %casc_next_in, align 4
  %55 = load %struct.klatt_global_t** %globals.addr, align 8
  %nfcascade = getelementptr inbounds %struct.klatt_global_t* %55, i32 0, i32 5
  %56 = load i64* %nfcascade, align 8
  switch i64 %56, label %sw.default [
    i64 8, label %sw.bb
    i64 7, label %sw.bb49
    i64 6, label %sw.bb51
    i64 5, label %sw.bb53
    i64 4, label %sw.bb55
    i64 3, label %sw.bb57
    i64 2, label %sw.bb59
    i64 1, label %sw.bb61
  ]

sw.bb:                                            ; preds = %if.then45
  %57 = load float* %casc_next_in, align 4
  %call48 = call float @resonator(%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r8c to %struct.resonator_t*), float %57)
  store float %call48, float* %casc_next_in, align 4
  br label %sw.bb49

sw.bb49:                                          ; preds = %if.then45, %sw.bb
  %58 = load float* %casc_next_in, align 4
  %call50 = call float @resonator(%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r7c to %struct.resonator_t*), float %58)
  store float %call50, float* %casc_next_in, align 4
  br label %sw.bb51

sw.bb51:                                          ; preds = %if.then45, %sw.bb49
  %59 = load float* %casc_next_in, align 4
  %call52 = call float @resonator(%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r6c to %struct.resonator_t*), float %59)
  store float %call52, float* %casc_next_in, align 4
  br label %sw.bb53

sw.bb53:                                          ; preds = %if.then45, %sw.bb51
  %60 = load float* %casc_next_in, align 4
  %call54 = call float @resonator(%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r5c to %struct.resonator_t*), float %60)
  store float %call54, float* %casc_next_in, align 4
  br label %sw.bb55

sw.bb55:                                          ; preds = %if.then45, %sw.bb53
  %61 = load float* %casc_next_in, align 4
  %call56 = call float @resonator(%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r4c to %struct.resonator_t*), float %61)
  store float %call56, float* %casc_next_in, align 4
  br label %sw.bb57

sw.bb57:                                          ; preds = %if.then45, %sw.bb55
  %62 = load float* %casc_next_in, align 4
  %call58 = call float @resonator(%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r3c to %struct.resonator_t*), float %62)
  store float %call58, float* %casc_next_in, align 4
  br label %sw.bb59

sw.bb59:                                          ; preds = %if.then45, %sw.bb57
  %63 = load float* %casc_next_in, align 4
  %call60 = call float @resonator(%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r2c to %struct.resonator_t*), float %63)
  store float %call60, float* %casc_next_in, align 4
  br label %sw.bb61

sw.bb61:                                          ; preds = %if.then45, %sw.bb59
  %64 = load float* %casc_next_in, align 4
  %call62 = call float @resonator(%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r1c to %struct.resonator_t*), float %64)
  store float %call62, float* %out, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.then45
  store float 0.000000e+00, float* %out, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb61
  br label %if.end68

if.else63:                                        ; preds = %if.end39
  %65 = load float* %par_glotout, align 4
  %call64 = call float @antiresonator(%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rnz to %struct.resonator_t*), float %65)
  store float %call64, float* %par_glotout, align 4
  %66 = load float* %par_glotout, align 4
  %call65 = call float @resonator(%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rnpc to %struct.resonator_t*), float %66)
  store float %call65, float* %par_glotout, align 4
  %67 = load float* %par_glotout, align 4
  %call66 = call float @resonator(%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r1p to %struct.resonator_t*), float %67)
  store float %call66, float* %out, align 4
  %68 = load float* %par_glotout, align 4
  %69 = load float* @glotlast, align 4
  %sub = fsub float %68, %69
  %70 = load float* %sourc, align 4
  %add67 = fadd float %70, %sub
  store float %add67, float* %sourc, align 4
  %71 = load float* %par_glotout, align 4
  store float %71, float* @glotlast, align 4
  br label %if.end68

if.end68:                                         ; preds = %if.else63, %sw.epilog
  %72 = load float* %sourc, align 4
  %call69 = call float @resonator(%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r6p to %struct.resonator_t*), float %72)
  %73 = load float* %out, align 4
  %sub70 = fsub float %call69, %73
  store float %sub70, float* %out, align 4
  %74 = load float* %sourc, align 4
  %call71 = call float @resonator(%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r5p to %struct.resonator_t*), float %74)
  %75 = load float* %out, align 4
  %sub72 = fsub float %call71, %75
  store float %sub72, float* %out, align 4
  %76 = load float* %sourc, align 4
  %call73 = call float @resonator(%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r4p to %struct.resonator_t*), float %76)
  %77 = load float* %out, align 4
  %sub74 = fsub float %call73, %77
  store float %sub74, float* %out, align 4
  %78 = load float* %sourc, align 4
  %call75 = call float @resonator(%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r3p to %struct.resonator_t*), float %78)
  %79 = load float* %out, align 4
  %sub76 = fsub float %call75, %79
  store float %sub76, float* %out, align 4
  %80 = load float* %sourc, align 4
  %call77 = call float @resonator(%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r2p to %struct.resonator_t*), float %80)
  %81 = load float* %out, align 4
  %sub78 = fsub float %call77, %81
  store float %sub78, float* %out, align 4
  %82 = load float* @amp_bypas, align 4
  %83 = load float* %sourc, align 4
  %mul79 = fmul float %82, %83
  %84 = load float* %out, align 4
  %sub80 = fsub float %mul79, %84
  store float %sub80, float* %out, align 4
  %85 = load float* %out, align 4
  %call81 = call float @resonator(%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rout to %struct.resonator_t*), float %85)
  store float %call81, float* %out, align 4
  %86 = load %struct.klatt_global_t** %globals.addr, align 8
  %87 = load float* %out, align 4
  %call82 = call signext i16 @clip(%struct.klatt_global_t* %86, float %87)
  %88 = load i16** %jwave.addr, align 8
  %incdec.ptr = getelementptr inbounds i16* %88, i32 1
  store i16* %incdec.ptr, i16** %jwave.addr, align 8
  store i16 %call82, i16* %88, align 2
  br label %for.inc83

for.inc83:                                        ; preds = %if.end68
  %89 = load i64* %ns, align 8
  %inc84 = add nsw i64 %89, 1
  store i64 %inc84, i64* %ns, align 8
  br label %for.cond

for.end85:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @frame_init(%struct.klatt_global_t* %globals, %struct.klatt_frame_t* %frame) #0 {
entry:
  %globals.addr = alloca %struct.klatt_global_t*, align 8
  %frame.addr = alloca %struct.klatt_frame_t*, align 8
  %Gain0 = alloca i64, align 8
  %amp_parF1 = alloca float, align 4
  %amp_parFN = alloca float, align 4
  %amp_parF2 = alloca float, align 4
  %amp_parF3 = alloca float, align 4
  %amp_parF4 = alloca float, align 4
  %amp_parF5 = alloca float, align 4
  %amp_parF6 = alloca float, align 4
  store %struct.klatt_global_t* %globals, %struct.klatt_global_t** %globals.addr, align 8
  store %struct.klatt_frame_t* %frame, %struct.klatt_frame_t** %frame.addr, align 8
  %0 = load %struct.klatt_frame_t** %frame.addr, align 8
  %F0hz10 = getelementptr inbounds %struct.klatt_frame_t* %0, i32 0, i32 0
  %1 = load i64* %F0hz10, align 8
  store i64 %1, i64* @F0hz10, align 8
  %2 = load %struct.klatt_frame_t** %frame.addr, align 8
  %AVdb = getelementptr inbounds %struct.klatt_frame_t* %2, i32 0, i32 1
  %3 = load i64* %AVdb, align 8
  %sub = sub nsw i64 %3, 7
  store i64 %sub, i64* @AVdb, align 8
  %4 = load i64* @AVdb, align 8
  %cmp = icmp slt i64 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 0, i64* @AVdb, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.klatt_global_t** %globals.addr, align 8
  %6 = load %struct.klatt_frame_t** %frame.addr, align 8
  %ASP = getelementptr inbounds %struct.klatt_frame_t* %6, i32 0, i32 18
  %7 = load i64* %ASP, align 8
  %call = call float @DBtoLIN(%struct.klatt_global_t* %5, i64 %7)
  %conv = fpext float %call to double
  %mul = fmul double %conv, 5.000000e-02
  %conv1 = fptrunc double %mul to float
  store float %conv1, float* @amp_aspir, align 4
  %8 = load %struct.klatt_global_t** %globals.addr, align 8
  %9 = load %struct.klatt_frame_t** %frame.addr, align 8
  %AF = getelementptr inbounds %struct.klatt_frame_t* %9, i32 0, i32 22
  %10 = load i64* %AF, align 8
  %call2 = call float @DBtoLIN(%struct.klatt_global_t* %8, i64 %10)
  %conv3 = fpext float %call2 to double
  %mul4 = fmul double %conv3, 2.500000e-01
  %conv5 = fptrunc double %mul4 to float
  store float %conv5, float* @amp_frica, align 4
  %11 = load %struct.klatt_frame_t** %frame.addr, align 8
  %Kskew = getelementptr inbounds %struct.klatt_frame_t* %11, i32 0, i32 23
  %12 = load i64* %Kskew, align 8
  store i64 %12, i64* @Kskew, align 8
  %13 = load %struct.klatt_global_t** %globals.addr, align 8
  %14 = load %struct.klatt_frame_t** %frame.addr, align 8
  %AVpdb = getelementptr inbounds %struct.klatt_frame_t* %14, i32 0, i32 38
  %15 = load i64* %AVpdb, align 8
  %call6 = call float @DBtoLIN(%struct.klatt_global_t* %13, i64 %15)
  store float %call6, float* @par_amp_voice, align 4
  %16 = load %struct.klatt_global_t** %globals.addr, align 8
  %17 = load %struct.klatt_frame_t** %frame.addr, align 8
  %A1 = getelementptr inbounds %struct.klatt_frame_t* %17, i32 0, i32 24
  %18 = load i64* %A1, align 8
  %call7 = call float @DBtoLIN(%struct.klatt_global_t* %16, i64 %18)
  %conv8 = fpext float %call7 to double
  %mul9 = fmul double %conv8, 4.000000e-01
  %conv10 = fptrunc double %mul9 to float
  store float %conv10, float* %amp_parF1, align 4
  %19 = load %struct.klatt_global_t** %globals.addr, align 8
  %20 = load %struct.klatt_frame_t** %frame.addr, align 8
  %A2 = getelementptr inbounds %struct.klatt_frame_t* %20, i32 0, i32 26
  %21 = load i64* %A2, align 8
  %call11 = call float @DBtoLIN(%struct.klatt_global_t* %19, i64 %21)
  %conv12 = fpext float %call11 to double
  %mul13 = fmul double %conv12, 1.500000e-01
  %conv14 = fptrunc double %mul13 to float
  store float %conv14, float* %amp_parF2, align 4
  %22 = load %struct.klatt_global_t** %globals.addr, align 8
  %23 = load %struct.klatt_frame_t** %frame.addr, align 8
  %A3 = getelementptr inbounds %struct.klatt_frame_t* %23, i32 0, i32 28
  %24 = load i64* %A3, align 8
  %call15 = call float @DBtoLIN(%struct.klatt_global_t* %22, i64 %24)
  %conv16 = fpext float %call15 to double
  %mul17 = fmul double %conv16, 6.000000e-02
  %conv18 = fptrunc double %mul17 to float
  store float %conv18, float* %amp_parF3, align 4
  %25 = load %struct.klatt_global_t** %globals.addr, align 8
  %26 = load %struct.klatt_frame_t** %frame.addr, align 8
  %A4 = getelementptr inbounds %struct.klatt_frame_t* %26, i32 0, i32 30
  %27 = load i64* %A4, align 8
  %call19 = call float @DBtoLIN(%struct.klatt_global_t* %25, i64 %27)
  %conv20 = fpext float %call19 to double
  %mul21 = fmul double %conv20, 4.000000e-02
  %conv22 = fptrunc double %mul21 to float
  store float %conv22, float* %amp_parF4, align 4
  %28 = load %struct.klatt_global_t** %globals.addr, align 8
  %29 = load %struct.klatt_frame_t** %frame.addr, align 8
  %A5 = getelementptr inbounds %struct.klatt_frame_t* %29, i32 0, i32 32
  %30 = load i64* %A5, align 8
  %call23 = call float @DBtoLIN(%struct.klatt_global_t* %28, i64 %30)
  %conv24 = fpext float %call23 to double
  %mul25 = fmul double %conv24, 2.200000e-02
  %conv26 = fptrunc double %mul25 to float
  store float %conv26, float* %amp_parF5, align 4
  %31 = load %struct.klatt_global_t** %globals.addr, align 8
  %32 = load %struct.klatt_frame_t** %frame.addr, align 8
  %A6 = getelementptr inbounds %struct.klatt_frame_t* %32, i32 0, i32 34
  %33 = load i64* %A6, align 8
  %call27 = call float @DBtoLIN(%struct.klatt_global_t* %31, i64 %33)
  %conv28 = fpext float %call27 to double
  %mul29 = fmul double %conv28, 3.000000e-02
  %conv30 = fptrunc double %mul29 to float
  store float %conv30, float* %amp_parF6, align 4
  %34 = load %struct.klatt_global_t** %globals.addr, align 8
  %35 = load %struct.klatt_frame_t** %frame.addr, align 8
  %ANP = getelementptr inbounds %struct.klatt_frame_t* %35, i32 0, i32 36
  %36 = load i64* %ANP, align 8
  %call31 = call float @DBtoLIN(%struct.klatt_global_t* %34, i64 %36)
  %conv32 = fpext float %call31 to double
  %mul33 = fmul double %conv32, 6.000000e-01
  %conv34 = fptrunc double %mul33 to float
  store float %conv34, float* %amp_parFN, align 4
  %37 = load %struct.klatt_global_t** %globals.addr, align 8
  %38 = load %struct.klatt_frame_t** %frame.addr, align 8
  %AB = getelementptr inbounds %struct.klatt_frame_t* %38, i32 0, i32 37
  %39 = load i64* %AB, align 8
  %call35 = call float @DBtoLIN(%struct.klatt_global_t* %37, i64 %39)
  %conv36 = fpext float %call35 to double
  %mul37 = fmul double %conv36, 5.000000e-02
  %conv38 = fptrunc double %mul37 to float
  store float %conv38, float* @amp_bypas, align 4
  %40 = load %struct.klatt_global_t** %globals.addr, align 8
  %nfcascade = getelementptr inbounds %struct.klatt_global_t* %40, i32 0, i32 5
  %41 = load i64* %nfcascade, align 8
  %cmp39 = icmp sge i64 %41, 8
  br i1 %cmp39, label %if.then41, label %if.end47

if.then41:                                        ; preds = %if.end
  %42 = load %struct.klatt_global_t** %globals.addr, align 8
  %samrate = getelementptr inbounds %struct.klatt_global_t* %42, i32 0, i32 4
  %43 = load i64* %samrate, align 8
  %cmp42 = icmp sge i64 %43, 16000
  br i1 %cmp42, label %if.then44, label %if.else

if.then44:                                        ; preds = %if.then41
  call void @setabc(i64 7500, i64 600, %struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r8c to %struct.resonator_t*))
  br label %if.end46

if.else:                                          ; preds = %if.then41
  %44 = load %struct.klatt_global_t** %globals.addr, align 8
  %nfcascade45 = getelementptr inbounds %struct.klatt_global_t* %44, i32 0, i32 5
  store i64 6, i64* %nfcascade45, align 8
  br label %if.end46

if.end46:                                         ; preds = %if.else, %if.then44
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %if.end
  %45 = load %struct.klatt_global_t** %globals.addr, align 8
  %nfcascade48 = getelementptr inbounds %struct.klatt_global_t* %45, i32 0, i32 5
  %46 = load i64* %nfcascade48, align 8
  %cmp49 = icmp sge i64 %46, 7
  br i1 %cmp49, label %if.then51, label %if.end59

if.then51:                                        ; preds = %if.end47
  %47 = load %struct.klatt_global_t** %globals.addr, align 8
  %samrate52 = getelementptr inbounds %struct.klatt_global_t* %47, i32 0, i32 4
  %48 = load i64* %samrate52, align 8
  %cmp53 = icmp sge i64 %48, 16000
  br i1 %cmp53, label %if.then55, label %if.else56

if.then55:                                        ; preds = %if.then51
  call void @setabc(i64 6500, i64 500, %struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r7c to %struct.resonator_t*))
  br label %if.end58

if.else56:                                        ; preds = %if.then51
  %49 = load %struct.klatt_global_t** %globals.addr, align 8
  %nfcascade57 = getelementptr inbounds %struct.klatt_global_t* %49, i32 0, i32 5
  store i64 6, i64* %nfcascade57, align 8
  br label %if.end58

if.end58:                                         ; preds = %if.else56, %if.then55
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.end47
  %50 = load %struct.klatt_global_t** %globals.addr, align 8
  %nfcascade60 = getelementptr inbounds %struct.klatt_global_t* %50, i32 0, i32 5
  %51 = load i64* %nfcascade60, align 8
  %cmp61 = icmp sge i64 %51, 6
  br i1 %cmp61, label %if.then63, label %if.end64

if.then63:                                        ; preds = %if.end59
  %52 = load %struct.klatt_frame_t** %frame.addr, align 8
  %F6hz = getelementptr inbounds %struct.klatt_frame_t* %52, i32 0, i32 12
  %53 = load i64* %F6hz, align 8
  %54 = load %struct.klatt_frame_t** %frame.addr, align 8
  %B6hz = getelementptr inbounds %struct.klatt_frame_t* %54, i32 0, i32 13
  %55 = load i64* %B6hz, align 8
  call void @setabc(i64 %53, i64 %55, %struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r6c to %struct.resonator_t*))
  br label %if.end64

if.end64:                                         ; preds = %if.then63, %if.end59
  %56 = load %struct.klatt_global_t** %globals.addr, align 8
  %nfcascade65 = getelementptr inbounds %struct.klatt_global_t* %56, i32 0, i32 5
  %57 = load i64* %nfcascade65, align 8
  %cmp66 = icmp sge i64 %57, 5
  br i1 %cmp66, label %if.then68, label %if.end69

if.then68:                                        ; preds = %if.end64
  %58 = load %struct.klatt_frame_t** %frame.addr, align 8
  %F5hz = getelementptr inbounds %struct.klatt_frame_t* %58, i32 0, i32 10
  %59 = load i64* %F5hz, align 8
  %60 = load %struct.klatt_frame_t** %frame.addr, align 8
  %B5hz = getelementptr inbounds %struct.klatt_frame_t* %60, i32 0, i32 11
  %61 = load i64* %B5hz, align 8
  call void @setabc(i64 %59, i64 %61, %struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r5c to %struct.resonator_t*))
  br label %if.end69

if.end69:                                         ; preds = %if.then68, %if.end64
  %62 = load %struct.klatt_frame_t** %frame.addr, align 8
  %F4hz = getelementptr inbounds %struct.klatt_frame_t* %62, i32 0, i32 8
  %63 = load i64* %F4hz, align 8
  %64 = load %struct.klatt_frame_t** %frame.addr, align 8
  %B4hz = getelementptr inbounds %struct.klatt_frame_t* %64, i32 0, i32 9
  %65 = load i64* %B4hz, align 8
  call void @setabc(i64 %63, i64 %65, %struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r4c to %struct.resonator_t*))
  %66 = load %struct.klatt_frame_t** %frame.addr, align 8
  %F3hz = getelementptr inbounds %struct.klatt_frame_t* %66, i32 0, i32 6
  %67 = load i64* %F3hz, align 8
  %68 = load %struct.klatt_frame_t** %frame.addr, align 8
  %B3hz = getelementptr inbounds %struct.klatt_frame_t* %68, i32 0, i32 7
  %69 = load i64* %B3hz, align 8
  call void @setabc(i64 %67, i64 %69, %struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r3c to %struct.resonator_t*))
  %70 = load %struct.klatt_frame_t** %frame.addr, align 8
  %F2hz = getelementptr inbounds %struct.klatt_frame_t* %70, i32 0, i32 4
  %71 = load i64* %F2hz, align 8
  %72 = load %struct.klatt_frame_t** %frame.addr, align 8
  %B2hz = getelementptr inbounds %struct.klatt_frame_t* %72, i32 0, i32 5
  %73 = load i64* %B2hz, align 8
  call void @setabc(i64 %71, i64 %73, %struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r2c to %struct.resonator_t*))
  %74 = load %struct.klatt_frame_t** %frame.addr, align 8
  %F1hz = getelementptr inbounds %struct.klatt_frame_t* %74, i32 0, i32 2
  %75 = load i64* %F1hz, align 8
  %76 = load %struct.klatt_frame_t** %frame.addr, align 8
  %B1hz = getelementptr inbounds %struct.klatt_frame_t* %76, i32 0, i32 3
  %77 = load i64* %B1hz, align 8
  call void @setabc(i64 %75, i64 %77, %struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r1c to %struct.resonator_t*))
  %78 = load %struct.klatt_frame_t** %frame.addr, align 8
  %FNPhz = getelementptr inbounds %struct.klatt_frame_t* %78, i32 0, i32 16
  %79 = load i64* %FNPhz, align 8
  %80 = load %struct.klatt_frame_t** %frame.addr, align 8
  %BNPhz = getelementptr inbounds %struct.klatt_frame_t* %80, i32 0, i32 17
  %81 = load i64* %BNPhz, align 8
  call void @setabc(i64 %79, i64 %81, %struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rnpc to %struct.resonator_t*))
  %82 = load %struct.klatt_frame_t** %frame.addr, align 8
  %FNZhz = getelementptr inbounds %struct.klatt_frame_t* %82, i32 0, i32 14
  %83 = load i64* %FNZhz, align 8
  %84 = load %struct.klatt_frame_t** %frame.addr, align 8
  %BNZhz = getelementptr inbounds %struct.klatt_frame_t* %84, i32 0, i32 15
  %85 = load i64* %BNZhz, align 8
  call void @setzeroabc(i64 %83, i64 %85, %struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rnz to %struct.resonator_t*))
  %86 = load %struct.klatt_frame_t** %frame.addr, align 8
  %F1hz70 = getelementptr inbounds %struct.klatt_frame_t* %86, i32 0, i32 2
  %87 = load i64* %F1hz70, align 8
  %88 = load %struct.klatt_frame_t** %frame.addr, align 8
  %B1phz = getelementptr inbounds %struct.klatt_frame_t* %88, i32 0, i32 25
  %89 = load i64* %B1phz, align 8
  %90 = load float* %amp_parF1, align 4
  call void @setabcg(i64 %87, i64 %89, %struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r1p to %struct.resonator_t*), float %90)
  %91 = load %struct.klatt_frame_t** %frame.addr, align 8
  %FNPhz71 = getelementptr inbounds %struct.klatt_frame_t* %91, i32 0, i32 16
  %92 = load i64* %FNPhz71, align 8
  %93 = load %struct.klatt_frame_t** %frame.addr, align 8
  %BNPhz72 = getelementptr inbounds %struct.klatt_frame_t* %93, i32 0, i32 17
  %94 = load i64* %BNPhz72, align 8
  %95 = load float* %amp_parFN, align 4
  call void @setabcg(i64 %92, i64 %94, %struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rnpp to %struct.resonator_t*), float %95)
  %96 = load %struct.klatt_frame_t** %frame.addr, align 8
  %F2hz73 = getelementptr inbounds %struct.klatt_frame_t* %96, i32 0, i32 4
  %97 = load i64* %F2hz73, align 8
  %98 = load %struct.klatt_frame_t** %frame.addr, align 8
  %B2phz = getelementptr inbounds %struct.klatt_frame_t* %98, i32 0, i32 27
  %99 = load i64* %B2phz, align 8
  %100 = load float* %amp_parF2, align 4
  call void @setabcg(i64 %97, i64 %99, %struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r2p to %struct.resonator_t*), float %100)
  %101 = load %struct.klatt_frame_t** %frame.addr, align 8
  %F3hz74 = getelementptr inbounds %struct.klatt_frame_t* %101, i32 0, i32 6
  %102 = load i64* %F3hz74, align 8
  %103 = load %struct.klatt_frame_t** %frame.addr, align 8
  %B3phz = getelementptr inbounds %struct.klatt_frame_t* %103, i32 0, i32 29
  %104 = load i64* %B3phz, align 8
  %105 = load float* %amp_parF3, align 4
  call void @setabcg(i64 %102, i64 %104, %struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r3p to %struct.resonator_t*), float %105)
  %106 = load %struct.klatt_frame_t** %frame.addr, align 8
  %F4hz75 = getelementptr inbounds %struct.klatt_frame_t* %106, i32 0, i32 8
  %107 = load i64* %F4hz75, align 8
  %108 = load %struct.klatt_frame_t** %frame.addr, align 8
  %B4phz = getelementptr inbounds %struct.klatt_frame_t* %108, i32 0, i32 31
  %109 = load i64* %B4phz, align 8
  %110 = load float* %amp_parF4, align 4
  call void @setabcg(i64 %107, i64 %109, %struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r4p to %struct.resonator_t*), float %110)
  %111 = load %struct.klatt_frame_t** %frame.addr, align 8
  %F5hz76 = getelementptr inbounds %struct.klatt_frame_t* %111, i32 0, i32 10
  %112 = load i64* %F5hz76, align 8
  %113 = load %struct.klatt_frame_t** %frame.addr, align 8
  %B5phz = getelementptr inbounds %struct.klatt_frame_t* %113, i32 0, i32 33
  %114 = load i64* %B5phz, align 8
  %115 = load float* %amp_parF5, align 4
  call void @setabcg(i64 %112, i64 %114, %struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r5p to %struct.resonator_t*), float %115)
  %116 = load %struct.klatt_frame_t** %frame.addr, align 8
  %F6hz77 = getelementptr inbounds %struct.klatt_frame_t* %116, i32 0, i32 12
  %117 = load i64* %F6hz77, align 8
  %118 = load %struct.klatt_frame_t** %frame.addr, align 8
  %B6phz = getelementptr inbounds %struct.klatt_frame_t* %118, i32 0, i32 35
  %119 = load i64* %B6phz, align 8
  %120 = load float* %amp_parF6, align 4
  call void @setabcg(i64 %117, i64 %119, %struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r6p to %struct.resonator_t*), float %120)
  %121 = load %struct.klatt_frame_t** %frame.addr, align 8
  %Gain078 = getelementptr inbounds %struct.klatt_frame_t* %121, i32 0, i32 39
  %122 = load i64* %Gain078, align 8
  %sub79 = sub nsw i64 %122, 3
  store i64 %sub79, i64* %Gain0, align 8
  %123 = load i64* %Gain0, align 8
  %cmp80 = icmp sle i64 %123, 0
  br i1 %cmp80, label %if.then82, label %if.end83

if.then82:                                        ; preds = %if.end69
  store i64 57, i64* %Gain0, align 8
  br label %if.end83

if.end83:                                         ; preds = %if.then82, %if.end69
  %124 = load %struct.klatt_global_t** %globals.addr, align 8
  %samrate84 = getelementptr inbounds %struct.klatt_global_t* %124, i32 0, i32 4
  %125 = load i64* %samrate84, align 8
  %126 = load %struct.klatt_global_t** %globals.addr, align 8
  %127 = load i64* %Gain0, align 8
  %call85 = call float @DBtoLIN(%struct.klatt_global_t* %126, i64 %127)
  call void @setabcg(i64 0, i64 %125, %struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rout to %struct.resonator_t*), float %call85)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @flutter(%struct.klatt_global_t* %globals, %struct.klatt_frame_t* %pars) #0 {
entry:
  %globals.addr = alloca %struct.klatt_global_t*, align 8
  %pars.addr = alloca %struct.klatt_frame_t*, align 8
  %original_f0 = alloca i64, align 8
  %fla = alloca double, align 8
  %flb = alloca double, align 8
  %flc = alloca double, align 8
  %fld = alloca double, align 8
  %fle = alloca double, align 8
  %delta_f0 = alloca double, align 8
  store %struct.klatt_global_t* %globals, %struct.klatt_global_t** %globals.addr, align 8
  store %struct.klatt_frame_t* %pars, %struct.klatt_frame_t** %pars.addr, align 8
  %0 = load %struct.klatt_frame_t** %pars.addr, align 8
  %F0hz10 = getelementptr inbounds %struct.klatt_frame_t* %0, i32 0, i32 0
  %1 = load i64* %F0hz10, align 8
  %div = sdiv i64 %1, 10
  store i64 %div, i64* %original_f0, align 8
  %2 = load %struct.klatt_global_t** %globals.addr, align 8
  %f0_flutter = getelementptr inbounds %struct.klatt_global_t* %2, i32 0, i32 2
  %3 = load i32* %f0_flutter, align 4
  %conv = sitofp i32 %3 to double
  %div1 = fdiv double %conv, 5.000000e+01
  store double %div1, double* %fla, align 8
  %4 = load i64* %original_f0, align 8
  %conv2 = sitofp i64 %4 to double
  %div3 = fdiv double %conv2, 1.000000e+02
  store double %div3, double* %flb, align 8
  %5 = load i32* @time_count, align 4
  %conv4 = sitofp i32 %5 to double
  %mul = fmul double 0x4053F2F91CA1765C, %conv4
  %call = call double @sin(double %mul) #3
  store double %call, double* %flc, align 8
  %6 = load i32* @time_count, align 4
  %conv5 = sitofp i32 %6 to double
  %mul6 = fmul double 0x40464E28AD1D5A02, %conv5
  %call7 = call double @sin(double %mul6) #3
  store double %call7, double* %fld, align 8
  %7 = load i32* @time_count, align 4
  %conv8 = sitofp i32 %7 to double
  %mul9 = fmul double 0x403D87EDBD883645, %conv8
  %call10 = call double @sin(double %mul9) #3
  store double %call10, double* %fle, align 8
  %8 = load double* %fla, align 8
  %9 = load double* %flb, align 8
  %mul11 = fmul double %8, %9
  %10 = load double* %flc, align 8
  %11 = load double* %fld, align 8
  %add = fadd double %10, %11
  %12 = load double* %fle, align 8
  %add12 = fadd double %add, %12
  %mul13 = fmul double %mul11, %add12
  %mul14 = fmul double %mul13, 1.000000e+01
  store double %mul14, double* %delta_f0, align 8
  %13 = load double* %delta_f0, align 8
  %conv15 = fptosi double %13 to i64
  %14 = load i64* @F0hz10, align 8
  %add16 = add nsw i64 %14, %conv15
  store i64 %add16, i64* @F0hz10, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal float @impulsive_source(i64 %nper) #0 {
entry:
  %nper.addr = alloca i64, align 8
  store i64 %nper, i64* %nper.addr, align 8
  %0 = load i64* %nper.addr, align 8
  %cmp = icmp slt i64 %0, 3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i64* %nper.addr, align 8
  %arrayidx = getelementptr inbounds [3 x float]* @impulsive_source.doublet, i32 0, i64 %1
  %2 = load float* %arrayidx, align 4
  store float %2, float* @vwave, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  store float 0.000000e+00, float* @vwave, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %3 = load float* @vwave, align 4
  %call = call float @resonator(%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rgl to %struct.resonator_t*), float %3)
  ret float %call
}

; Function Attrs: nounwind ssp uwtable
define internal float @natural_source(i64 %nper) #0 {
entry:
  %retval = alloca float, align 4
  %nper.addr = alloca i64, align 8
  %lgtemp = alloca float, align 4
  store i64 %nper, i64* %nper.addr, align 8
  %0 = load i64* %nper.addr, align 8
  %1 = load i64* @nopen, align 8
  %cmp = icmp slt i64 %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load float* @natglot_b, align 4
  %3 = load float* @natglot_a, align 4
  %sub = fsub float %3, %2
  store float %sub, float* @natglot_a, align 4
  %4 = load float* @natglot_a, align 4
  %5 = load float* @vwave, align 4
  %add = fadd float %5, %4
  store float %add, float* @vwave, align 4
  %6 = load float* @vwave, align 4
  %conv = fpext float %6 to double
  %mul = fmul double %conv, 2.800000e-02
  %conv1 = fptrunc double %mul to float
  store float %conv1, float* %lgtemp, align 4
  %7 = load float* %lgtemp, align 4
  store float %7, float* %retval
  br label %return

if.else:                                          ; preds = %entry
  store float 0.000000e+00, float* @vwave, align 4
  store float 0.000000e+00, float* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %8 = load float* %retval
  ret float %8
}

; Function Attrs: nounwind ssp uwtable
define internal void @pitch_synch_par_reset(%struct.klatt_global_t* %globals, %struct.klatt_frame_t* %frame, i64 %ns) #0 {
entry:
  %globals.addr = alloca %struct.klatt_global_t*, align 8
  %frame.addr = alloca %struct.klatt_frame_t*, align 8
  %ns.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  %temp1 = alloca float, align 4
  store %struct.klatt_global_t* %globals, %struct.klatt_global_t** %globals.addr, align 8
  store %struct.klatt_frame_t* %frame, %struct.klatt_frame_t** %frame.addr, align 8
  store i64 %ns, i64* %ns.addr, align 8
  %0 = load i64* @F0hz10, align 8
  %cmp = icmp sgt i64 %0, 0
  br i1 %cmp, label %if.then, label %if.else62

if.then:                                          ; preds = %entry
  %1 = load %struct.klatt_global_t** %globals.addr, align 8
  %samrate = getelementptr inbounds %struct.klatt_global_t* %1, i32 0, i32 4
  %2 = load i64* %samrate, align 8
  %mul = mul nsw i64 40, %2
  %3 = load i64* @F0hz10, align 8
  %div = sdiv i64 %mul, %3
  store i64 %div, i64* @T0, align 8
  %4 = load %struct.klatt_global_t** %globals.addr, align 8
  %5 = load i64* @AVdb, align 8
  %call = call float @DBtoLIN(%struct.klatt_global_t* %4, i64 %5)
  store float %call, float* @amp_voice, align 4
  %6 = load i64* @T0, align 8
  store i64 %6, i64* @nmod, align 8
  %7 = load i64* @AVdb, align 8
  %cmp1 = icmp sgt i64 %7, 0
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %8 = load i64* @nmod, align 8
  %shr = ashr i64 %8, 1
  store i64 %shr, i64* @nmod, align 8
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %9 = load %struct.klatt_global_t** %globals.addr, align 8
  %10 = load %struct.klatt_frame_t** %frame.addr, align 8
  %Aturb = getelementptr inbounds %struct.klatt_frame_t* %10, i32 0, i32 20
  %11 = load i64* %Aturb, align 8
  %call3 = call float @DBtoLIN(%struct.klatt_global_t* %9, i64 %11)
  %conv = fpext float %call3 to double
  %mul4 = fmul double %conv, 1.000000e-01
  %conv5 = fptrunc double %mul4 to float
  store float %conv5, float* @amp_breth, align 4
  %12 = load %struct.klatt_frame_t** %frame.addr, align 8
  %Kopen = getelementptr inbounds %struct.klatt_frame_t* %12, i32 0, i32 19
  %13 = load i64* %Kopen, align 8
  %mul6 = mul nsw i64 4, %13
  store i64 %mul6, i64* @nopen, align 8
  %14 = load %struct.klatt_global_t** %globals.addr, align 8
  %glsource = getelementptr inbounds %struct.klatt_global_t* %14, i32 0, i32 6
  %15 = load i64* %glsource, align 8
  %cmp7 = icmp eq i64 %15, 1
  br i1 %cmp7, label %land.lhs.true, label %if.end12

land.lhs.true:                                    ; preds = %if.end
  %16 = load i64* @nopen, align 8
  %cmp9 = icmp sgt i64 %16, 263
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %land.lhs.true
  store i64 263, i64* @nopen, align 8
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %land.lhs.true, %if.end
  %17 = load i64* @nopen, align 8
  %18 = load i64* @T0, align 8
  %sub = sub nsw i64 %18, 1
  %cmp13 = icmp sge i64 %17, %sub
  br i1 %cmp13, label %if.then15, label %if.end20

if.then15:                                        ; preds = %if.end12
  %19 = load i64* @T0, align 8
  %sub16 = sub nsw i64 %19, 2
  store i64 %sub16, i64* @nopen, align 8
  %20 = load %struct.klatt_global_t** %globals.addr, align 8
  %quiet_flag = getelementptr inbounds %struct.klatt_global_t* %20, i32 0, i32 1
  %21 = load i32* %quiet_flag, align 4
  %tobool = icmp ne i32 %21, 0
  br i1 %tobool, label %if.end19, label %if.then17

if.then17:                                        ; preds = %if.then15
  %call18 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([58 x i8]* @.str66, i32 0, i32 0))
  br label %if.end19

if.end19:                                         ; preds = %if.then17, %if.then15
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %if.end12
  %22 = load i64* @nopen, align 8
  %cmp21 = icmp slt i64 %22, 40
  br i1 %cmp21, label %if.then23, label %if.end30

if.then23:                                        ; preds = %if.end20
  store i64 40, i64* @nopen, align 8
  %23 = load %struct.klatt_global_t** %globals.addr, align 8
  %quiet_flag24 = getelementptr inbounds %struct.klatt_global_t* %23, i32 0, i32 1
  %24 = load i32* %quiet_flag24, align 4
  %tobool25 = icmp ne i32 %24, 0
  br i1 %tobool25, label %if.end29, label %if.then26

if.then26:                                        ; preds = %if.then23
  %call27 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([53 x i8]* @.str67, i32 0, i32 0))
  %25 = load i64* @nopen, align 8
  %call28 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([24 x i8]* @.str68, i32 0, i32 0), i64 %25)
  br label %if.end29

if.end29:                                         ; preds = %if.then26, %if.then23
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.end20
  %26 = load i64* @nopen, align 8
  %sub31 = sub nsw i64 %26, 40
  %arrayidx = getelementptr inbounds [224 x i16]* @natglot, i32 0, i64 %sub31
  %27 = load i16* %arrayidx, align 2
  %conv32 = sitofp i16 %27 to float
  store float %conv32, float* @natglot_b, align 4
  %28 = load float* @natglot_b, align 4
  %29 = load i64* @nopen, align 8
  %conv33 = sitofp i64 %29 to float
  %mul34 = fmul float %28, %conv33
  %conv35 = fpext float %mul34 to double
  %mul36 = fmul double %conv35, 3.330000e-01
  %conv37 = fptrunc double %mul36 to float
  store float %conv37, float* @natglot_a, align 4
  %30 = load %struct.klatt_global_t** %globals.addr, align 8
  %samrate38 = getelementptr inbounds %struct.klatt_global_t* %30, i32 0, i32 4
  %31 = load i64* %samrate38, align 8
  %32 = load i64* @nopen, align 8
  %div39 = sdiv i64 %31, %32
  store i64 %div39, i64* %temp, align 8
  %33 = load i64* %temp, align 8
  call void @setabc(i64 0, i64 %33, %struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rgl to %struct.resonator_t*))
  %34 = load i64* @nopen, align 8
  %conv40 = sitofp i64 %34 to double
  %mul41 = fmul double %conv40, 8.330000e-03
  %conv42 = fptrunc double %mul41 to float
  store float %conv42, float* %temp1, align 4
  %35 = load float* %temp1, align 4
  %36 = load float* %temp1, align 4
  %mul43 = fmul float %35, %36
  %37 = load float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rgl to %struct.resonator_t*), i32 0, i32 1), align 4
  %mul44 = fmul float %37, %mul43
  store float %mul44, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rgl to %struct.resonator_t*), i32 0, i32 1), align 4
  %38 = load i64* @T0, align 8
  %39 = load i64* @nopen, align 8
  %sub45 = sub nsw i64 %38, %39
  store i64 %sub45, i64* %temp, align 8
  %40 = load i64* @Kskew, align 8
  %41 = load i64* %temp, align 8
  %cmp46 = icmp sgt i64 %40, %41
  br i1 %cmp46, label %if.then48, label %if.end55

if.then48:                                        ; preds = %if.end30
  %42 = load %struct.klatt_global_t** %globals.addr, align 8
  %quiet_flag49 = getelementptr inbounds %struct.klatt_global_t* %42, i32 0, i32 1
  %43 = load i32* %quiet_flag49, align 4
  %tobool50 = icmp ne i32 %43, 0
  br i1 %tobool50, label %if.end54, label %if.then51

if.then51:                                        ; preds = %if.then48
  %44 = load i64* @Kskew, align 8
  %45 = load i64* @T0, align 8
  %46 = load i64* @nopen, align 8
  %sub52 = sub nsw i64 %45, %46
  %call53 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([58 x i8]* @.str69, i32 0, i32 0), i64 %44, i64 %sub52)
  br label %if.end54

if.end54:                                         ; preds = %if.then51, %if.then48
  %47 = load i64* %temp, align 8
  store i64 %47, i64* @Kskew, align 8
  br label %if.end55

if.end55:                                         ; preds = %if.end54, %if.end30
  %48 = load i64* @skew, align 8
  %cmp56 = icmp sge i64 %48, 0
  br i1 %cmp56, label %if.then58, label %if.else

if.then58:                                        ; preds = %if.end55
  %49 = load i64* @Kskew, align 8
  store i64 %49, i64* @skew, align 8
  br label %if.end60

if.else:                                          ; preds = %if.end55
  %50 = load i64* @Kskew, align 8
  %sub59 = sub nsw i64 0, %50
  store i64 %sub59, i64* @skew, align 8
  br label %if.end60

if.end60:                                         ; preds = %if.else, %if.then58
  %51 = load i64* @T0, align 8
  %52 = load i64* @skew, align 8
  %add = add nsw i64 %51, %52
  store i64 %add, i64* @T0, align 8
  %53 = load i64* @skew, align 8
  %sub61 = sub nsw i64 0, %53
  store i64 %sub61, i64* @skew, align 8
  br label %if.end63

if.else62:                                        ; preds = %entry
  store i64 4, i64* @T0, align 8
  store float 0.000000e+00, float* @amp_voice, align 4
  %54 = load i64* @T0, align 8
  store i64 %54, i64* @nmod, align 8
  store float 0.000000e+00, float* @amp_breth, align 4
  store float 0.000000e+00, float* @natglot_a, align 4
  store float 0.000000e+00, float* @natglot_b, align 4
  br label %if.end63

if.end63:                                         ; preds = %if.else62, %if.end60
  %55 = load i64* @T0, align 8
  %cmp64 = icmp ne i64 %55, 4
  br i1 %cmp64, label %if.then68, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end63
  %56 = load i64* %ns.addr, align 8
  %cmp66 = icmp eq i64 %56, 0
  br i1 %cmp66, label %if.then68, label %if.end81

if.then68:                                        ; preds = %lor.lhs.false, %if.end63
  %57 = load %struct.klatt_frame_t** %frame.addr, align 8
  %TLTdb = getelementptr inbounds %struct.klatt_frame_t* %57, i32 0, i32 21
  %58 = load i64* %TLTdb, align 8
  %conv69 = sitofp i64 %58 to double
  %mul70 = fmul double 3.300000e-02, %conv69
  %conv71 = fptrunc double %mul70 to float
  store float %conv71, float* @decay, align 4
  %59 = load float* @decay, align 4
  %conv72 = fpext float %59 to double
  %cmp73 = fcmp ogt double %conv72, 0.000000e+00
  br i1 %cmp73, label %if.then75, label %if.else79

if.then75:                                        ; preds = %if.then68
  %60 = load float* @decay, align 4
  %conv76 = fpext float %60 to double
  %sub77 = fsub double 1.000000e+00, %conv76
  %conv78 = fptrunc double %sub77 to float
  store float %conv78, float* @onemd, align 4
  br label %if.end80

if.else79:                                        ; preds = %if.then68
  store float 1.000000e+00, float* @onemd, align 4
  br label %if.end80

if.end80:                                         ; preds = %if.else79, %if.then75
  br label %if.end81

if.end81:                                         ; preds = %if.end80, %lor.lhs.false
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal float @resonator(%struct.resonator_t* %r, float %input) #0 {
entry:
  %r.addr = alloca %struct.resonator_t*, align 8
  %input.addr = alloca float, align 4
  %x = alloca float, align 4
  store %struct.resonator_t* %r, %struct.resonator_t** %r.addr, align 8
  store float %input, float* %input.addr, align 4
  %0 = load %struct.resonator_t** %r.addr, align 8
  %a = getelementptr inbounds %struct.resonator_t* %0, i32 0, i32 1
  %1 = load float* %a, align 4
  %2 = load float* %input.addr, align 4
  %mul = fmul float %1, %2
  %3 = load %struct.resonator_t** %r.addr, align 8
  %b = getelementptr inbounds %struct.resonator_t* %3, i32 0, i32 2
  %4 = load float* %b, align 4
  %5 = load %struct.resonator_t** %r.addr, align 8
  %p1 = getelementptr inbounds %struct.resonator_t* %5, i32 0, i32 4
  %6 = load float* %p1, align 4
  %mul1 = fmul float %4, %6
  %add = fadd float %mul, %mul1
  %7 = load %struct.resonator_t** %r.addr, align 8
  %c = getelementptr inbounds %struct.resonator_t* %7, i32 0, i32 3
  %8 = load float* %c, align 4
  %9 = load %struct.resonator_t** %r.addr, align 8
  %p2 = getelementptr inbounds %struct.resonator_t* %9, i32 0, i32 5
  %10 = load float* %p2, align 4
  %mul2 = fmul float %8, %10
  %add3 = fadd float %add, %mul2
  store float %add3, float* %x, align 4
  %11 = load %struct.resonator_t** %r.addr, align 8
  %p14 = getelementptr inbounds %struct.resonator_t* %11, i32 0, i32 4
  %12 = load float* %p14, align 4
  %13 = load %struct.resonator_t** %r.addr, align 8
  %p25 = getelementptr inbounds %struct.resonator_t* %13, i32 0, i32 5
  store float %12, float* %p25, align 4
  %14 = load float* %x, align 4
  %15 = load %struct.resonator_t** %r.addr, align 8
  %p16 = getelementptr inbounds %struct.resonator_t* %15, i32 0, i32 4
  store float %14, float* %p16, align 4
  %16 = load float* %x, align 4
  ret float %16
}

; Function Attrs: nounwind ssp uwtable
define internal float @antiresonator(%struct.resonator_t* %r, float %input) #0 {
entry:
  %r.addr = alloca %struct.resonator_t*, align 8
  %input.addr = alloca float, align 4
  %x = alloca float, align 4
  store %struct.resonator_t* %r, %struct.resonator_t** %r.addr, align 8
  store float %input, float* %input.addr, align 4
  %0 = load %struct.resonator_t** %r.addr, align 8
  %a = getelementptr inbounds %struct.resonator_t* %0, i32 0, i32 1
  %1 = load float* %a, align 4
  %2 = load float* %input.addr, align 4
  %mul = fmul float %1, %2
  %3 = load %struct.resonator_t** %r.addr, align 8
  %b = getelementptr inbounds %struct.resonator_t* %3, i32 0, i32 2
  %4 = load float* %b, align 4
  %5 = load %struct.resonator_t** %r.addr, align 8
  %p1 = getelementptr inbounds %struct.resonator_t* %5, i32 0, i32 4
  %6 = load float* %p1, align 4
  %mul1 = fmul float %4, %6
  %add = fadd float %mul, %mul1
  %7 = load %struct.resonator_t** %r.addr, align 8
  %c = getelementptr inbounds %struct.resonator_t* %7, i32 0, i32 3
  %8 = load float* %c, align 4
  %9 = load %struct.resonator_t** %r.addr, align 8
  %p2 = getelementptr inbounds %struct.resonator_t* %9, i32 0, i32 5
  %10 = load float* %p2, align 4
  %mul2 = fmul float %8, %10
  %add3 = fadd float %add, %mul2
  store float %add3, float* %x, align 4
  %11 = load %struct.resonator_t** %r.addr, align 8
  %p14 = getelementptr inbounds %struct.resonator_t* %11, i32 0, i32 4
  %12 = load float* %p14, align 4
  %13 = load %struct.resonator_t** %r.addr, align 8
  %p25 = getelementptr inbounds %struct.resonator_t* %13, i32 0, i32 5
  store float %12, float* %p25, align 4
  %14 = load float* %input.addr, align 4
  %15 = load %struct.resonator_t** %r.addr, align 8
  %p16 = getelementptr inbounds %struct.resonator_t* %15, i32 0, i32 4
  store float %14, float* %p16, align 4
  %16 = load float* %x, align 4
  ret float %16
}

; Function Attrs: nounwind ssp uwtable
define internal signext i16 @clip(%struct.klatt_global_t* %globals, float %input) #0 {
entry:
  %globals.addr = alloca %struct.klatt_global_t*, align 8
  %input.addr = alloca float, align 4
  %temp = alloca i64, align 8
  store %struct.klatt_global_t* %globals, %struct.klatt_global_t** %globals.addr, align 8
  store float %input, float* %input.addr, align 4
  %0 = load float* %input.addr, align 4
  %conv = fptosi float %0 to i64
  store i64 %conv, i64* %temp, align 8
  %1 = load i64* %temp, align 8
  %cmp = icmp slt i64 %1, -32767
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.klatt_global_t** %globals.addr, align 8
  %3 = load i64* %temp, align 8
  %sub = sub nsw i64 0, %3
  call void @overload_warning(%struct.klatt_global_t* %2, i64 %sub)
  store i64 -32767, i64* %temp, align 8
  br label %if.end5

if.else:                                          ; preds = %entry
  %4 = load i64* %temp, align 8
  %cmp2 = icmp sgt i64 %4, 32767
  br i1 %cmp2, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.else
  %5 = load %struct.klatt_global_t** %globals.addr, align 8
  %6 = load i64* %temp, align 8
  call void @overload_warning(%struct.klatt_global_t* %5, i64 %6)
  store i64 32767, i64* %temp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.else
  br label %if.end5

if.end5:                                          ; preds = %if.end, %if.then
  %7 = load i64* %temp, align 8
  %conv6 = trunc i64 %7 to i16
  ret i16 %conv6
}

; Function Attrs: nounwind ssp uwtable
define void @parwave_init(%struct.klatt_global_t* %globals) #0 {
entry:
  %globals.addr = alloca %struct.klatt_global_t*, align 8
  %FLPhz = alloca i64, align 8
  %BLPhz = alloca i64, align 8
  store %struct.klatt_global_t* %globals, %struct.klatt_global_t** %globals.addr, align 8
  %0 = load %struct.klatt_global_t** %globals.addr, align 8
  %samrate = getelementptr inbounds %struct.klatt_global_t* %0, i32 0, i32 4
  %1 = load i64* %samrate, align 8
  %mul = mul nsw i64 950, %1
  %div = sdiv i64 %mul, 10000
  store i64 %div, i64* %FLPhz, align 8
  %2 = load %struct.klatt_global_t** %globals.addr, align 8
  %samrate1 = getelementptr inbounds %struct.klatt_global_t* %2, i32 0, i32 4
  %3 = load i64* %samrate1, align 8
  %mul2 = mul nsw i64 630, %3
  %div3 = sdiv i64 %mul2, 10000
  store i64 %div3, i64* %BLPhz, align 8
  %4 = load %struct.klatt_global_t** %globals.addr, align 8
  %samrate4 = getelementptr inbounds %struct.klatt_global_t* %4, i32 0, i32 4
  %5 = load i64* %samrate4, align 8
  %conv = sitofp i64 %5 to double
  %div5 = fdiv double 0xC00921FB5A7ED197, %conv
  %conv6 = fptrunc double %div5 to float
  store float %conv6, float* @minus_pi_t, align 4
  %6 = load float* @minus_pi_t, align 4
  %conv7 = fpext float %6 to double
  %mul8 = fmul double -2.000000e+00, %conv7
  %conv9 = fptrunc double %mul8 to float
  store float %conv9, float* @two_pi_t, align 4
  %7 = load i64* %FLPhz, align 8
  %8 = load i64* %BLPhz, align 8
  call void @setabc(i64 %7, i64 %8, %struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rlp to %struct.resonator_t*))
  store i64 0, i64* @nper, align 8
  store i64 0, i64* @T0, align 8
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rnpp to %struct.resonator_t*), i32 0, i32 4), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rnpp to %struct.resonator_t*), i32 0, i32 5), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r1p to %struct.resonator_t*), i32 0, i32 4), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r1p to %struct.resonator_t*), i32 0, i32 5), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r2p to %struct.resonator_t*), i32 0, i32 4), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r2p to %struct.resonator_t*), i32 0, i32 5), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r3p to %struct.resonator_t*), i32 0, i32 4), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r3p to %struct.resonator_t*), i32 0, i32 5), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r4p to %struct.resonator_t*), i32 0, i32 4), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r4p to %struct.resonator_t*), i32 0, i32 5), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r5p to %struct.resonator_t*), i32 0, i32 4), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r5p to %struct.resonator_t*), i32 0, i32 5), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r6p to %struct.resonator_t*), i32 0, i32 4), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r6p to %struct.resonator_t*), i32 0, i32 5), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r1c to %struct.resonator_t*), i32 0, i32 4), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r1c to %struct.resonator_t*), i32 0, i32 5), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r2c to %struct.resonator_t*), i32 0, i32 4), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r2c to %struct.resonator_t*), i32 0, i32 5), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r3c to %struct.resonator_t*), i32 0, i32 4), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r3c to %struct.resonator_t*), i32 0, i32 5), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r4c to %struct.resonator_t*), i32 0, i32 4), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r4c to %struct.resonator_t*), i32 0, i32 5), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r5c to %struct.resonator_t*), i32 0, i32 4), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r5c to %struct.resonator_t*), i32 0, i32 5), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r6c to %struct.resonator_t*), i32 0, i32 4), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r6c to %struct.resonator_t*), i32 0, i32 5), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r7c to %struct.resonator_t*), i32 0, i32 4), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r7c to %struct.resonator_t*), i32 0, i32 5), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r8c to %struct.resonator_t*), i32 0, i32 4), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @r8c to %struct.resonator_t*), i32 0, i32 5), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rnpc to %struct.resonator_t*), i32 0, i32 4), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rnpc to %struct.resonator_t*), i32 0, i32 5), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rnz to %struct.resonator_t*), i32 0, i32 4), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rnz to %struct.resonator_t*), i32 0, i32 5), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rgl to %struct.resonator_t*), i32 0, i32 4), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rgl to %struct.resonator_t*), i32 0, i32 5), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rlp to %struct.resonator_t*), i32 0, i32 4), align 4
  store float 0.000000e+00, float* getelementptr inbounds (%struct.resonator_t* bitcast ({ i8*, float, float, float, float, float, [4 x i8] }* @rlp to %struct.resonator_t*), i32 0, i32 5), align 4
  store float 0.000000e+00, float* @vlast, align 4
  store float 0.000000e+00, float* @nlast, align 4
  store float 0.000000e+00, float* @glotlast, align 4
  store i32 0, i32* @warnsw, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @setabc(i64 %f, i64 %bw, %struct.resonator_t* %rp) #0 {
entry:
  %f.addr = alloca i64, align 8
  %bw.addr = alloca i64, align 8
  %rp.addr = alloca %struct.resonator_t*, align 8
  %arg = alloca double, align 8
  %r = alloca float, align 4
  store i64 %f, i64* %f.addr, align 8
  store i64 %bw, i64* %bw.addr, align 8
  store %struct.resonator_t* %rp, %struct.resonator_t** %rp.addr, align 8
  %0 = load float* @minus_pi_t, align 4
  %1 = load i64* %bw.addr, align 8
  %conv = sitofp i64 %1 to float
  %mul = fmul float %0, %conv
  %conv1 = fpext float %mul to double
  store double %conv1, double* %arg, align 8
  %2 = load double* %arg, align 8
  %call = call double @exp(double %2) #3
  %conv2 = fptrunc double %call to float
  store float %conv2, float* %r, align 4
  %3 = load float* %r, align 4
  %4 = load float* %r, align 4
  %mul3 = fmul float %3, %4
  %sub = fsub float -0.000000e+00, %mul3
  %5 = load %struct.resonator_t** %rp.addr, align 8
  %c = getelementptr inbounds %struct.resonator_t* %5, i32 0, i32 3
  store float %sub, float* %c, align 4
  %6 = load float* @two_pi_t, align 4
  %7 = load i64* %f.addr, align 8
  %conv4 = sitofp i64 %7 to float
  %mul5 = fmul float %6, %conv4
  %conv6 = fpext float %mul5 to double
  store double %conv6, double* %arg, align 8
  %8 = load float* %r, align 4
  %conv7 = fpext float %8 to double
  %9 = load double* %arg, align 8
  %call8 = call double @cos(double %9) #3
  %mul9 = fmul double %conv7, %call8
  %mul10 = fmul double %mul9, 2.000000e+00
  %conv11 = fptrunc double %mul10 to float
  %10 = load %struct.resonator_t** %rp.addr, align 8
  %b = getelementptr inbounds %struct.resonator_t* %10, i32 0, i32 2
  store float %conv11, float* %b, align 4
  %11 = load %struct.resonator_t** %rp.addr, align 8
  %b12 = getelementptr inbounds %struct.resonator_t* %11, i32 0, i32 2
  %12 = load float* %b12, align 4
  %conv13 = fpext float %12 to double
  %sub14 = fsub double 1.000000e+00, %conv13
  %13 = load %struct.resonator_t** %rp.addr, align 8
  %c15 = getelementptr inbounds %struct.resonator_t* %13, i32 0, i32 3
  %14 = load float* %c15, align 4
  %conv16 = fpext float %14 to double
  %sub17 = fsub double %sub14, %conv16
  %conv18 = fptrunc double %sub17 to float
  %15 = load %struct.resonator_t** %rp.addr, align 8
  %a = getelementptr inbounds %struct.resonator_t* %15, i32 0, i32 1
  store float %conv18, float* %a, align 4
  ret void
}

; Function Attrs: nounwind readnone
declare double @exp(double) #2

; Function Attrs: nounwind readnone
declare double @cos(double) #2

; Function Attrs: nounwind ssp uwtable
define internal void @overload_warning(%struct.klatt_global_t* %globals, i64 %arg) #0 {
entry:
  %globals.addr = alloca %struct.klatt_global_t*, align 8
  %arg.addr = alloca i64, align 8
  store %struct.klatt_global_t* %globals, %struct.klatt_global_t** %globals.addr, align 8
  store i64 %arg, i64* %arg.addr, align 8
  %0 = load i32* @warnsw, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  %1 = load i32* @warnsw, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* @warnsw, align 4
  %2 = load %struct.klatt_global_t** %globals.addr, align 8
  %quiet_flag = getelementptr inbounds %struct.klatt_global_t* %2, i32 0, i32 1
  %3 = load i32* %quiet_flag, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %if.end, label %if.then1

if.then1:                                         ; preds = %if.then
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([17 x i8]* @.str46, i32 0, i32 0))
  %4 = load i64* %arg.addr, align 8
  %call2 = call float @dBconvert(i64 %4)
  %conv = fpext float %call2 to double
  %call3 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([59 x i8]* @.str47, i32 0, i32 0), double %conv)
  br label %if.end

if.end:                                           ; preds = %if.then1, %if.then
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal float @dBconvert(i64 %arg) #0 {
entry:
  %arg.addr = alloca i64, align 8
  store i64 %arg, i64* %arg.addr, align 8
  %0 = load i64* %arg.addr, align 8
  %conv = sitofp i64 %0 to double
  %div = fdiv double %conv, 3.276700e+04
  %call = call double @log10(double %div) #3
  %mul = fmul double 2.000000e+01, %call
  %conv1 = fptrunc double %mul to float
  ret float %conv1
}

; Function Attrs: nounwind readnone
declare double @log10(double) #2

; Function Attrs: nounwind ssp uwtable
define internal float @DBtoLIN(%struct.klatt_global_t* %globals, i64 %dB) #0 {
entry:
  %globals.addr = alloca %struct.klatt_global_t*, align 8
  %dB.addr = alloca i64, align 8
  store %struct.klatt_global_t* %globals, %struct.klatt_global_t** %globals.addr, align 8
  store i64 %dB, i64* %dB.addr, align 8
  %0 = load i64* %dB.addr, align 8
  %cmp = icmp slt i64 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i64 0, i64* %dB.addr, align 8
  br label %if.end5

if.else:                                          ; preds = %entry
  %1 = load i64* %dB.addr, align 8
  %cmp1 = icmp sge i64 %1, 88
  br i1 %cmp1, label %if.then2, label %if.end4

if.then2:                                         ; preds = %if.else
  %2 = load %struct.klatt_global_t** %globals.addr, align 8
  %quiet_flag = getelementptr inbounds %struct.klatt_global_t* %2, i32 0, i32 1
  %3 = load i32* %quiet_flag, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %if.end, label %if.then3

if.then3:                                         ; preds = %if.then2
  %4 = load i64* %dB.addr, align 8
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([30 x i8]* @.str70, i32 0, i32 0), i64 %4)
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.then2
  store i64 87, i64* %dB.addr, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.end, %if.else
  br label %if.end5

if.end5:                                          ; preds = %if.end4, %if.then
  %5 = load i64* %dB.addr, align 8
  %arrayidx = getelementptr inbounds [88 x float]* @amptable, i32 0, i64 %5
  %6 = load float* %arrayidx, align 4
  %conv = fpext float %6 to double
  %mul = fmul double %conv, 1.000000e-03
  %conv6 = fptrunc double %mul to float
  ret float %conv6
}

; Function Attrs: nounwind readnone
declare double @sin(double) #2

; Function Attrs: nounwind ssp uwtable
define internal void @setzeroabc(i64 %f, i64 %bw, %struct.resonator_t* %rp) #0 {
entry:
  %f.addr = alloca i64, align 8
  %bw.addr = alloca i64, align 8
  %rp.addr = alloca %struct.resonator_t*, align 8
  store i64 %f, i64* %f.addr, align 8
  store i64 %bw, i64* %bw.addr, align 8
  store %struct.resonator_t* %rp, %struct.resonator_t** %rp.addr, align 8
  %0 = load i64* %f.addr, align 8
  %1 = load i64* %bw.addr, align 8
  %2 = load %struct.resonator_t** %rp.addr, align 8
  call void @setabc(i64 %0, i64 %1, %struct.resonator_t* %2)
  %3 = load %struct.resonator_t** %rp.addr, align 8
  %a = getelementptr inbounds %struct.resonator_t* %3, i32 0, i32 1
  %4 = load float* %a, align 4
  %conv = fpext float %4 to double
  %div = fdiv double 1.000000e+00, %conv
  %conv1 = fptrunc double %div to float
  %5 = load %struct.resonator_t** %rp.addr, align 8
  %a2 = getelementptr inbounds %struct.resonator_t* %5, i32 0, i32 1
  store float %conv1, float* %a2, align 4
  %6 = load %struct.resonator_t** %rp.addr, align 8
  %a3 = getelementptr inbounds %struct.resonator_t* %6, i32 0, i32 1
  %7 = load float* %a3, align 4
  %sub = fsub float -0.000000e+00, %7
  %8 = load %struct.resonator_t** %rp.addr, align 8
  %b = getelementptr inbounds %struct.resonator_t* %8, i32 0, i32 2
  %9 = load float* %b, align 4
  %mul = fmul float %9, %sub
  store float %mul, float* %b, align 4
  %10 = load %struct.resonator_t** %rp.addr, align 8
  %a4 = getelementptr inbounds %struct.resonator_t* %10, i32 0, i32 1
  %11 = load float* %a4, align 4
  %sub5 = fsub float -0.000000e+00, %11
  %12 = load %struct.resonator_t** %rp.addr, align 8
  %c = getelementptr inbounds %struct.resonator_t* %12, i32 0, i32 3
  %13 = load float* %c, align 4
  %mul6 = fmul float %13, %sub5
  store float %mul6, float* %c, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @setabcg(i64 %f, i64 %bw, %struct.resonator_t* %rp, float %gain) #0 {
entry:
  %f.addr = alloca i64, align 8
  %bw.addr = alloca i64, align 8
  %rp.addr = alloca %struct.resonator_t*, align 8
  %gain.addr = alloca float, align 4
  store i64 %f, i64* %f.addr, align 8
  store i64 %bw, i64* %bw.addr, align 8
  store %struct.resonator_t* %rp, %struct.resonator_t** %rp.addr, align 8
  store float %gain, float* %gain.addr, align 4
  %0 = load i64* %f.addr, align 8
  %1 = load i64* %bw.addr, align 8
  %2 = load %struct.resonator_t** %rp.addr, align 8
  call void @setabc(i64 %0, i64 %1, %struct.resonator_t* %2)
  %3 = load float* %gain.addr, align 4
  %4 = load %struct.resonator_t** %rp.addr, align 8
  %a = getelementptr inbounds %struct.resonator_t* %4, i32 0, i32 1
  %5 = load float* %a, align 4
  %mul = fmul float %5, %3
  store float %mul, float* %a, align 4
  ret void
}

attributes #0 = { nounwind ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
