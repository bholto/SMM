; ModuleID = 'text.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.9.0"

%struct.__sFILE = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, i8*, i32 (i8*)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i32 (i8*, i8*, i32)*, %struct.__sbuf, %struct.__sFILEX*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i64 }
%struct.__sbuf = type { i8*, i32 }
%struct.__sFILEX = type opaque
%struct.darray_t = type { i8*, i32, i32, i16, i16 }

@.str = private unnamed_addr constant [61 x i8] c"$Id: text.c,v 1.13 1994/11/08 13:30:50 a904209 Exp a904209 $\00", align 1
@text_id = global i8* getelementptr inbounds ([61 x i8]* @.str, i32 0, i32 0), align 8
@Rules = external global [0 x [4 x i8*]*]
@__stderrp = external global %struct.__sFILE*
@.str1 = private unnamed_addr constant [42 x i8] c"Error: Can't find rule for: '%c' in \22%s\22\0A\00", align 1
@rightmatch.result = internal global i32 1, align 4
@rightmatch.done_loop = internal global i32 0, align 4
@.str2 = private unnamed_addr constant [29 x i8] c"Bad char in right rule:'%c'\0A\00", align 1
@leftmatch.done_loop = internal global i32 0, align 4
@leftmatch.result = internal global i32 1, align 4
@.str3 = private unnamed_addr constant [29 x i8] c"Bad char in left rule: '%c'\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define i32 @isvowel(i32 %chr) #0 {
entry:
  %chr.addr = alloca i32, align 4
  store i32 %chr, i32* %chr.addr, align 4
  %0 = load i32* %chr.addr, align 4
  %cmp = icmp eq i32 %0, 65
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32* %chr.addr, align 4
  %cmp1 = icmp eq i32 %1, 69
  br i1 %cmp1, label %lor.end, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i32* %chr.addr, align 4
  %cmp3 = icmp eq i32 %2, 73
  br i1 %cmp3, label %lor.end, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %3 = load i32* %chr.addr, align 4
  %cmp5 = icmp eq i32 %3, 79
  br i1 %cmp5, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false4
  %4 = load i32* %chr.addr, align 4
  %cmp6 = icmp eq i32 %4, 85
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  %5 = phi i1 [ true, %lor.lhs.false4 ], [ true, %lor.lhs.false2 ], [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp6, %lor.rhs ]
  %lor.ext = zext i1 %5 to i32
  ret i32 %lor.ext
}

; Function Attrs: nounwind ssp uwtable
define i32 @isconsonant(i32 %chr) #0 {
entry:
  %chr.addr = alloca i32, align 4
  store i32 %chr, i32* %chr.addr, align 4
  %0 = load i32* %chr.addr, align 4
  %call = call i32 @isupper(i32 %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %1 = load i32* %chr.addr, align 4
  %call1 = call i32 @isvowel(i32 %1)
  %tobool2 = icmp ne i32 %call1, 0
  %lnot = xor i1 %tobool2, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  %land.ext = zext i1 %2 to i32
  ret i32 %land.ext
}

declare i32 @isupper(i32) #1

; Function Attrs: nounwind ssp uwtable
define i32 @NRL(i8* %s, i32 %n, %struct.darray_t* %phone) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %n.addr = alloca i32, align 4
  %phone.addr = alloca %struct.darray_t*, align 8
  %old = alloca i32, align 4
  %word = alloca i8*, align 8
  %d = alloca i8*, align 8
  %ch = alloca i8, align 1
  store i8* %s, i8** %s.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  store %struct.darray_t* %phone, %struct.darray_t** %phone.addr, align 8
  %0 = load %struct.darray_t** %phone.addr, align 8
  %items = getelementptr inbounds %struct.darray_t* %0, i32 0, i32 1
  %1 = load i32* %items, align 4
  store i32 %1, i32* %old, align 4
  %2 = load i32* %n.addr, align 4
  %add = add i32 %2, 3
  %conv = zext i32 %add to i64
  %call = call i8* @malloc(i64 %conv)
  store i8* %call, i8** %word, align 8
  %3 = load i8** %word, align 8
  store i8* %3, i8** %d, align 8
  %4 = load i8** %d, align 8
  %incdec.ptr = getelementptr inbounds i8* %4, i32 1
  store i8* %incdec.ptr, i8** %d, align 8
  store i8 32, i8* %4, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %5 = load i32* %n.addr, align 4
  %dec = add i32 %5, -1
  store i32 %dec, i32* %n.addr, align 4
  %cmp = icmp ugt i32 %5, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i8** %s.addr, align 8
  %incdec.ptr2 = getelementptr inbounds i8* %6, i32 1
  store i8* %incdec.ptr2, i8** %s.addr, align 8
  %7 = load i8* %6, align 1
  store i8 %7, i8* %ch, align 1
  %8 = load i8* %ch, align 1
  %conv3 = sext i8 %8 to i32
  %call4 = call i32 @islower(i32 %conv3)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %9 = load i8* %ch, align 1
  %conv5 = sext i8 %9 to i32
  %call6 = call i32 @toupper(i32 %conv5)
  %conv7 = trunc i32 %call6 to i8
  store i8 %conv7, i8* %ch, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %10 = load i8* %ch, align 1
  %11 = load i8** %d, align 8
  %incdec.ptr8 = getelementptr inbounds i8* %11, i32 1
  store i8* %incdec.ptr8, i8** %d, align 8
  store i8 %10, i8* %11, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %12 = load i8** %d, align 8
  %incdec.ptr9 = getelementptr inbounds i8* %12, i32 1
  store i8* %incdec.ptr9, i8** %d, align 8
  store i8 32, i8* %12, align 1
  %13 = load i8** %d, align 8
  store i8 0, i8* %13, align 1
  %14 = load %struct.darray_t** %phone.addr, align 8
  %15 = bitcast %struct.darray_t* %14 to i8*
  %16 = load i8** %word, align 8
  call void @guess_word(i8* %15, void (i8*, i8*)* @phone_cat, i8* %16)
  %17 = load i8** %word, align 8
  call void @free(i8* %17)
  %18 = load %struct.darray_t** %phone.addr, align 8
  %items10 = getelementptr inbounds %struct.darray_t* %18, i32 0, i32 1
  %19 = load i32* %items10, align 4
  %20 = load i32* %old, align 4
  %sub = sub i32 %19, %20
  ret i32 %sub
}

declare i8* @malloc(i64) #1

declare i32 @islower(i32) #1

declare i32 @toupper(i32) #1

; Function Attrs: nounwind ssp uwtable
define internal void @guess_word(i8* %arg, void (i8*, i8*)* %out, i8* %word) #0 {
entry:
  %arg.addr = alloca i8*, align 8
  %out.addr = alloca void (i8*, i8*)*, align 8
  %word.addr = alloca i8*, align 8
  %index = alloca i32, align 4
  %type = alloca i32, align 4
  store i8* %arg, i8** %arg.addr, align 8
  store void (i8*, i8*)* %out, void (i8*, i8*)** %out.addr, align 8
  store i8* %word, i8** %word.addr, align 8
  store i32 1, i32* %index, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %0 = load i32* %index, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load i8** %word.addr, align 8
  %arrayidx = getelementptr inbounds i8* %1, i64 %idxprom
  %2 = load i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %call = call i32 @isupper(i32 %conv)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  %3 = load i32* %index, align 4
  %idxprom1 = sext i32 %3 to i64
  %4 = load i8** %word.addr, align 8
  %arrayidx2 = getelementptr inbounds i8* %4, i64 %idxprom1
  %5 = load i8* %arrayidx2, align 1
  %conv3 = sext i8 %5 to i32
  %sub = sub nsw i32 %conv3, 65
  %add = add nsw i32 %sub, 1
  store i32 %add, i32* %type, align 4
  br label %if.end

if.else:                                          ; preds = %do.body
  store i32 0, i32* %type, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load i8** %arg.addr, align 8
  %7 = load void (i8*, i8*)** %out.addr, align 8
  %8 = load i8** %word.addr, align 8
  %9 = load i32* %index, align 4
  %10 = load i32* %type, align 4
  %idxprom4 = sext i32 %10 to i64
  %arrayidx5 = getelementptr inbounds [0 x [4 x i8*]*]* @Rules, i32 0, i64 %idxprom4
  %11 = load [4 x i8*]** %arrayidx5, align 1
  %call6 = call i32 @find_rule(i8* %6, void (i8*, i8*)* %7, i8* %8, i32 %9, [4 x i8*]* %11)
  store i32 %call6, i32* %index, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end
  %12 = load i32* %index, align 4
  %idxprom7 = sext i32 %12 to i64
  %13 = load i8** %word.addr, align 8
  %arrayidx8 = getelementptr inbounds i8* %13, i64 %idxprom7
  %14 = load i8* %arrayidx8, align 1
  %conv9 = sext i8 %14 to i32
  %cmp = icmp ne i32 %conv9, 0
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @phone_cat(i8* %arg, i8* %s) #0 {
entry:
  %arg.addr = alloca i8*, align 8
  %s.addr = alloca i8*, align 8
  %p = alloca %struct.darray_t*, align 8
  %ch = alloca i8, align 1
  store i8* %arg, i8** %arg.addr, align 8
  store i8* %s, i8** %s.addr, align 8
  %0 = load i8** %arg.addr, align 8
  %1 = bitcast i8* %0 to %struct.darray_t*
  store %struct.darray_t* %1, %struct.darray_t** %p, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8** %s.addr, align 8
  %incdec.ptr = getelementptr inbounds i8* %2, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 8
  %3 = load i8* %2, align 1
  store i8 %3, i8* %ch, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.darray_t** %p, align 8
  %5 = load i8* %ch, align 1
  %conv = sext i8 %5 to i32
  %call = call i32 @phone_append(%struct.darray_t* %4, i32 %conv)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

declare void @free(i8*) #1

declare i32 @phone_append(%struct.darray_t*, i32) #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @find_rule(i8* %arg, void (i8*, i8*)* %out, i8* %word, i32 %index, [4 x i8*]* %rules) #0 {
entry:
  %retval = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %out.addr = alloca void (i8*, i8*)*, align 8
  %word.addr = alloca i8*, align 8
  %index.addr = alloca i32, align 4
  %rules.addr = alloca [4 x i8*]*, align 8
  %rule = alloca [4 x i8*]*, align 8
  %left = alloca i8*, align 8
  %match = alloca i8*, align 8
  %right = alloca i8*, align 8
  %output = alloca i8*, align 8
  %remainder = alloca i32, align 4
  %for_loop_stop = alloca i32, align 4
  store i8* %arg, i8** %arg.addr, align 8
  store void (i8*, i8*)* %out, void (i8*, i8*)** %out.addr, align 8
  store i8* %word, i8** %word.addr, align 8
  store i32 %index, i32* %index.addr, align 4
  store [4 x i8*]* %rules, [4 x i8*]** %rules.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.then33, %if.then27, %if.then20, %entry
  %0 = load [4 x i8*]** %rules.addr, align 8
  %incdec.ptr = getelementptr inbounds [4 x i8*]* %0, i32 1
  store [4 x i8*]* %incdec.ptr, [4 x i8*]** %rules.addr, align 8
  store [4 x i8*]* %0, [4 x i8*]** %rule, align 8
  %1 = load [4 x i8*]** %rule, align 8
  %arrayidx = getelementptr inbounds [4 x i8*]* %1, i32 0, i64 1
  %2 = load i8** %arrayidx, align 8
  store i8* %2, i8** %match, align 8
  %3 = load i8** %match, align 8
  %cmp = icmp eq i8* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.cond
  %4 = load %struct.__sFILE** @__stderrp, align 8
  %5 = load i32* %index.addr, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load i8** %word.addr, align 8
  %arrayidx1 = getelementptr inbounds i8* %6, i64 %idxprom
  %7 = load i8* %arrayidx1, align 1
  %conv = sext i8 %7 to i32
  %8 = load i8** %word.addr, align 8
  %call = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %4, i8* getelementptr inbounds ([42 x i8]* @.str1, i32 0, i32 0), i32 %conv, i8* %8)
  %9 = load i32* %index.addr, align 4
  %add = add nsw i32 %9, 1
  store i32 %add, i32* %retval
  br label %return

if.end:                                           ; preds = %for.cond
  store i32 0, i32* %for_loop_stop, align 4
  %10 = load i32* %index.addr, align 4
  store i32 %10, i32* %remainder, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %if.end
  %11 = load i8** %match, align 8
  %12 = load i8* %11, align 1
  %conv3 = sext i8 %12 to i32
  %cmp4 = icmp ne i32 %conv3, 0
  br i1 %cmp4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond2
  %13 = load i32* %for_loop_stop, align 4
  %cmp6 = icmp eq i32 %13, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond2
  %14 = phi i1 [ false, %for.cond2 ], [ %cmp6, %land.rhs ]
  br i1 %14, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %15 = load i8** %match, align 8
  %16 = load i8* %15, align 1
  %conv8 = sext i8 %16 to i32
  %17 = load i32* %remainder, align 4
  %idxprom9 = sext i32 %17 to i64
  %18 = load i8** %word.addr, align 8
  %arrayidx10 = getelementptr inbounds i8* %18, i64 %idxprom9
  %19 = load i8* %arrayidx10, align 1
  %conv11 = sext i8 %19 to i32
  %cmp12 = icmp ne i32 %conv8, %conv11
  br i1 %cmp12, label %if.then14, label %if.end15

if.then14:                                        ; preds = %for.body
  store i32 1, i32* %for_loop_stop, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.then14, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end15
  %20 = load i8** %match, align 8
  %incdec.ptr16 = getelementptr inbounds i8* %20, i32 1
  store i8* %incdec.ptr16, i8** %match, align 8
  %21 = load i32* %remainder, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %remainder, align 4
  br label %for.cond2

for.end:                                          ; preds = %land.end
  %22 = load i8** %match, align 8
  %23 = load i8* %22, align 1
  %conv17 = sext i8 %23 to i32
  %cmp18 = icmp ne i32 %conv17, 0
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %for.end
  br label %for.cond

if.end21:                                         ; preds = %for.end
  %24 = load [4 x i8*]** %rule, align 8
  %arrayidx22 = getelementptr inbounds [4 x i8*]* %24, i32 0, i64 0
  %25 = load i8** %arrayidx22, align 8
  store i8* %25, i8** %left, align 8
  %26 = load [4 x i8*]** %rule, align 8
  %arrayidx23 = getelementptr inbounds [4 x i8*]* %26, i32 0, i64 2
  %27 = load i8** %arrayidx23, align 8
  store i8* %27, i8** %right, align 8
  %28 = load i8** %left, align 8
  %29 = load i32* %index.addr, align 4
  %sub = sub nsw i32 %29, 1
  %idxprom24 = sext i32 %sub to i64
  %30 = load i8** %word.addr, align 8
  %arrayidx25 = getelementptr inbounds i8* %30, i64 %idxprom24
  %call26 = call i32 @leftmatch(i8* %28, i8* %arrayidx25)
  %tobool = icmp ne i32 %call26, 0
  br i1 %tobool, label %if.end28, label %if.then27

if.then27:                                        ; preds = %if.end21
  br label %for.cond

if.end28:                                         ; preds = %if.end21
  %31 = load i8** %right, align 8
  %32 = load i32* %remainder, align 4
  %idxprom29 = sext i32 %32 to i64
  %33 = load i8** %word.addr, align 8
  %arrayidx30 = getelementptr inbounds i8* %33, i64 %idxprom29
  %call31 = call i32 @rightmatch(i8* %31, i8* %arrayidx30)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.end34, label %if.then33

if.then33:                                        ; preds = %if.end28
  br label %for.cond

if.end34:                                         ; preds = %if.end28
  %34 = load [4 x i8*]** %rule, align 8
  %arrayidx35 = getelementptr inbounds [4 x i8*]* %34, i32 0, i64 3
  %35 = load i8** %arrayidx35, align 8
  store i8* %35, i8** %output, align 8
  %36 = load void (i8*, i8*)** %out.addr, align 8
  %37 = load i8** %arg.addr, align 8
  %38 = load i8** %output, align 8
  call void %36(i8* %37, i8* %38)
  %39 = load i32* %remainder, align 4
  store i32 %39, i32* %retval
  br label %return

return:                                           ; preds = %if.end34, %if.then
  %40 = load i32* %retval
  ret i32 %40
}

declare i32 @fprintf(%struct.__sFILE*, i8*, ...) #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @leftmatch(i8* %pattern, i8* %context) #0 {
entry:
  %retval = alloca i32, align 4
  %pattern.addr = alloca i8*, align 8
  %context.addr = alloca i8*, align 8
  %pat = alloca i8*, align 8
  %text = alloca i8*, align 8
  %count = alloca i32, align 4
  store i8* %pattern, i8** %pattern.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  %0 = load i8** %pattern.addr, align 8
  %1 = load i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8** %pattern.addr, align 8
  %call = call i64 @strlen(i8* %2)
  %conv2 = trunc i64 %call to i32
  store i32 %conv2, i32* %count, align 4
  %3 = load i8** %pattern.addr, align 8
  %4 = load i32* %count, align 4
  %sub = sub nsw i32 %4, 1
  %idx.ext = sext i32 %sub to i64
  %add.ptr = getelementptr inbounds i8* %3, i64 %idx.ext
  store i8* %add.ptr, i8** %pat, align 8
  %5 = load i8** %context.addr, align 8
  store i8* %5, i8** %text, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load i32* %count, align 4
  %cmp3 = icmp sgt i32 %6, 0
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %7 = load i32* @leftmatch.done_loop, align 4
  %tobool = icmp ne i32 %7, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %8 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %8, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %9 = load i8** %pat, align 8
  %10 = load i8* %9, align 1
  %conv5 = sext i8 %10 to i32
  %call6 = call i32 @isalpha(i32 %conv5)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then15, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %11 = load i8** %pat, align 8
  %12 = load i8* %11, align 1
  %conv8 = sext i8 %12 to i32
  %cmp9 = icmp eq i32 %conv8, 39
  br i1 %cmp9, label %if.then15, label %lor.lhs.false11

lor.lhs.false11:                                  ; preds = %lor.lhs.false
  %13 = load i8** %pat, align 8
  %14 = load i8* %13, align 1
  %conv12 = sext i8 %14 to i32
  %cmp13 = icmp eq i32 %conv12, 32
  br i1 %cmp13, label %if.then15, label %if.end22

if.then15:                                        ; preds = %lor.lhs.false11, %lor.lhs.false, %for.body
  %15 = load i8** %pat, align 8
  %16 = load i8* %15, align 1
  %conv16 = sext i8 %16 to i32
  %17 = load i8** %text, align 8
  %18 = load i8* %17, align 1
  %conv17 = sext i8 %18 to i32
  %cmp18 = icmp ne i32 %conv16, %conv17
  br i1 %cmp18, label %if.then20, label %if.else

if.then20:                                        ; preds = %if.then15
  store i32 1, i32* @leftmatch.done_loop, align 4
  store i32 0, i32* @leftmatch.result, align 4
  br label %if.end21

if.else:                                          ; preds = %if.then15
  %19 = load i8** %text, align 8
  %incdec.ptr = getelementptr inbounds i8* %19, i32 -1
  store i8* %incdec.ptr, i8** %text, align 8
  br label %for.inc

if.end21:                                         ; preds = %if.then20
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %lor.lhs.false11
  %20 = load i32* @leftmatch.done_loop, align 4
  %tobool23 = icmp ne i32 %20, 0
  br i1 %tobool23, label %if.end119, label %if.then24

if.then24:                                        ; preds = %if.end22
  %21 = load i8** %pat, align 8
  %22 = load i8* %21, align 1
  %conv25 = sext i8 %22 to i32
  switch i32 %conv25, label %sw.default [
    i32 35, label %sw.bb
    i32 58, label %sw.bb37
    i32 94, label %sw.bb45
    i32 46, label %sw.bb53
    i32 43, label %sw.bb100
    i32 37, label %sw.bb116
  ]

sw.bb:                                            ; preds = %if.then24
  %23 = load i8** %text, align 8
  %24 = load i8* %23, align 1
  %conv26 = sext i8 %24 to i32
  %call27 = call i32 @isvowel(i32 %conv26)
  %tobool28 = icmp ne i32 %call27, 0
  br i1 %tobool28, label %if.else30, label %if.then29

if.then29:                                        ; preds = %sw.bb
  store i32 1, i32* @leftmatch.done_loop, align 4
  store i32 0, i32* @leftmatch.result, align 4
  br label %if.end36

if.else30:                                        ; preds = %sw.bb
  %25 = load i8** %text, align 8
  %incdec.ptr31 = getelementptr inbounds i8* %25, i32 -1
  store i8* %incdec.ptr31, i8** %text, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else30
  %26 = load i8** %text, align 8
  %27 = load i8* %26, align 1
  %conv32 = sext i8 %27 to i32
  %call33 = call i32 @isvowel(i32 %conv32)
  %tobool34 = icmp ne i32 %call33, 0
  br i1 %tobool34, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %28 = load i8** %text, align 8
  %incdec.ptr35 = getelementptr inbounds i8* %28, i32 -1
  store i8* %incdec.ptr35, i8** %text, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end36

if.end36:                                         ; preds = %while.end, %if.then29
  br label %sw.epilog

sw.bb37:                                          ; preds = %if.then24
  br label %while.cond38

while.cond38:                                     ; preds = %while.body42, %sw.bb37
  %29 = load i8** %text, align 8
  %30 = load i8* %29, align 1
  %conv39 = sext i8 %30 to i32
  %call40 = call i32 @isconsonant(i32 %conv39)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %while.body42, label %while.end44

while.body42:                                     ; preds = %while.cond38
  %31 = load i8** %text, align 8
  %incdec.ptr43 = getelementptr inbounds i8* %31, i32 -1
  store i8* %incdec.ptr43, i8** %text, align 8
  br label %while.cond38

while.end44:                                      ; preds = %while.cond38
  br label %sw.epilog

sw.bb45:                                          ; preds = %if.then24
  %32 = load i8** %text, align 8
  %33 = load i8* %32, align 1
  %conv46 = sext i8 %33 to i32
  %call47 = call i32 @isconsonant(i32 %conv46)
  %tobool48 = icmp ne i32 %call47, 0
  br i1 %tobool48, label %if.else50, label %if.then49

if.then49:                                        ; preds = %sw.bb45
  store i32 1, i32* @leftmatch.done_loop, align 4
  store i32 0, i32* @leftmatch.result, align 4
  br label %if.end52

if.else50:                                        ; preds = %sw.bb45
  %34 = load i8** %text, align 8
  %incdec.ptr51 = getelementptr inbounds i8* %34, i32 -1
  store i8* %incdec.ptr51, i8** %text, align 8
  br label %if.end52

if.end52:                                         ; preds = %if.else50, %if.then49
  br label %sw.epilog

sw.bb53:                                          ; preds = %if.then24
  %35 = load i8** %text, align 8
  %36 = load i8* %35, align 1
  %conv54 = sext i8 %36 to i32
  %cmp55 = icmp ne i32 %conv54, 66
  br i1 %cmp55, label %land.lhs.true, label %if.else97

land.lhs.true:                                    ; preds = %sw.bb53
  %37 = load i8** %text, align 8
  %38 = load i8* %37, align 1
  %conv57 = sext i8 %38 to i32
  %cmp58 = icmp ne i32 %conv57, 68
  br i1 %cmp58, label %land.lhs.true60, label %if.else97

land.lhs.true60:                                  ; preds = %land.lhs.true
  %39 = load i8** %text, align 8
  %40 = load i8* %39, align 1
  %conv61 = sext i8 %40 to i32
  %cmp62 = icmp ne i32 %conv61, 86
  br i1 %cmp62, label %land.lhs.true64, label %if.else97

land.lhs.true64:                                  ; preds = %land.lhs.true60
  %41 = load i8** %text, align 8
  %42 = load i8* %41, align 1
  %conv65 = sext i8 %42 to i32
  %cmp66 = icmp ne i32 %conv65, 71
  br i1 %cmp66, label %land.lhs.true68, label %if.else97

land.lhs.true68:                                  ; preds = %land.lhs.true64
  %43 = load i8** %text, align 8
  %44 = load i8* %43, align 1
  %conv69 = sext i8 %44 to i32
  %cmp70 = icmp ne i32 %conv69, 74
  br i1 %cmp70, label %land.lhs.true72, label %if.else97

land.lhs.true72:                                  ; preds = %land.lhs.true68
  %45 = load i8** %text, align 8
  %46 = load i8* %45, align 1
  %conv73 = sext i8 %46 to i32
  %cmp74 = icmp ne i32 %conv73, 76
  br i1 %cmp74, label %land.lhs.true76, label %if.else97

land.lhs.true76:                                  ; preds = %land.lhs.true72
  %47 = load i8** %text, align 8
  %48 = load i8* %47, align 1
  %conv77 = sext i8 %48 to i32
  %cmp78 = icmp ne i32 %conv77, 77
  br i1 %cmp78, label %land.lhs.true80, label %if.else97

land.lhs.true80:                                  ; preds = %land.lhs.true76
  %49 = load i8** %text, align 8
  %50 = load i8* %49, align 1
  %conv81 = sext i8 %50 to i32
  %cmp82 = icmp ne i32 %conv81, 78
  br i1 %cmp82, label %land.lhs.true84, label %if.else97

land.lhs.true84:                                  ; preds = %land.lhs.true80
  %51 = load i8** %text, align 8
  %52 = load i8* %51, align 1
  %conv85 = sext i8 %52 to i32
  %cmp86 = icmp ne i32 %conv85, 82
  br i1 %cmp86, label %land.lhs.true88, label %if.else97

land.lhs.true88:                                  ; preds = %land.lhs.true84
  %53 = load i8** %text, align 8
  %54 = load i8* %53, align 1
  %conv89 = sext i8 %54 to i32
  %cmp90 = icmp ne i32 %conv89, 87
  br i1 %cmp90, label %land.lhs.true92, label %if.else97

land.lhs.true92:                                  ; preds = %land.lhs.true88
  %55 = load i8** %text, align 8
  %56 = load i8* %55, align 1
  %conv93 = sext i8 %56 to i32
  %cmp94 = icmp ne i32 %conv93, 90
  br i1 %cmp94, label %if.then96, label %if.else97

if.then96:                                        ; preds = %land.lhs.true92
  store i32 1, i32* @leftmatch.done_loop, align 4
  store i32 0, i32* @leftmatch.result, align 4
  br label %if.end99

if.else97:                                        ; preds = %land.lhs.true92, %land.lhs.true88, %land.lhs.true84, %land.lhs.true80, %land.lhs.true76, %land.lhs.true72, %land.lhs.true68, %land.lhs.true64, %land.lhs.true60, %land.lhs.true, %sw.bb53
  %57 = load i8** %text, align 8
  %incdec.ptr98 = getelementptr inbounds i8* %57, i32 -1
  store i8* %incdec.ptr98, i8** %text, align 8
  br label %if.end99

if.end99:                                         ; preds = %if.else97, %if.then96
  br label %sw.epilog

sw.bb100:                                         ; preds = %if.then24
  %58 = load i8** %text, align 8
  %59 = load i8* %58, align 1
  %conv101 = sext i8 %59 to i32
  %cmp102 = icmp ne i32 %conv101, 69
  br i1 %cmp102, label %land.lhs.true104, label %if.else113

land.lhs.true104:                                 ; preds = %sw.bb100
  %60 = load i8** %text, align 8
  %61 = load i8* %60, align 1
  %conv105 = sext i8 %61 to i32
  %cmp106 = icmp ne i32 %conv105, 73
  br i1 %cmp106, label %land.lhs.true108, label %if.else113

land.lhs.true108:                                 ; preds = %land.lhs.true104
  %62 = load i8** %text, align 8
  %63 = load i8* %62, align 1
  %conv109 = sext i8 %63 to i32
  %cmp110 = icmp ne i32 %conv109, 89
  br i1 %cmp110, label %if.then112, label %if.else113

if.then112:                                       ; preds = %land.lhs.true108
  store i32 1, i32* @leftmatch.done_loop, align 4
  store i32 0, i32* @leftmatch.result, align 4
  br label %if.end115

if.else113:                                       ; preds = %land.lhs.true108, %land.lhs.true104, %sw.bb100
  %64 = load i8** %text, align 8
  %incdec.ptr114 = getelementptr inbounds i8* %64, i32 -1
  store i8* %incdec.ptr114, i8** %text, align 8
  br label %if.end115

if.end115:                                        ; preds = %if.else113, %if.then112
  br label %sw.epilog

sw.bb116:                                         ; preds = %if.then24
  br label %sw.default

sw.default:                                       ; preds = %if.then24, %sw.bb116
  %65 = load %struct.__sFILE** @__stderrp, align 8
  %66 = load i8** %pat, align 8
  %67 = load i8* %66, align 1
  %conv117 = sext i8 %67 to i32
  %call118 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %65, i8* getelementptr inbounds ([29 x i8]* @.str3, i32 0, i32 0), i32 %conv117)
  store i32 1, i32* @leftmatch.done_loop, align 4
  store i32 0, i32* @leftmatch.result, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end115, %if.end99, %if.end52, %while.end44, %if.end36
  br label %if.end119

if.end119:                                        ; preds = %sw.epilog, %if.end22
  br label %for.inc

for.inc:                                          ; preds = %if.end119, %if.else
  %68 = load i8** %pat, align 8
  %incdec.ptr120 = getelementptr inbounds i8* %68, i32 -1
  store i8* %incdec.ptr120, i8** %pat, align 8
  %69 = load i32* %count, align 4
  %dec = add nsw i32 %69, -1
  store i32 %dec, i32* %count, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %70 = load i32* @leftmatch.result, align 4
  store i32 %70, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %71 = load i32* %retval
  ret i32 %71
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @rightmatch(i8* %pattern, i8* %context) #0 {
entry:
  %retval = alloca i32, align 4
  %pattern.addr = alloca i8*, align 8
  %context.addr = alloca i8*, align 8
  %pat = alloca i8*, align 8
  %text = alloca i8*, align 8
  store i8* %pattern, i8** %pattern.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  %0 = load i8** %pattern.addr, align 8
  %1 = load i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8** %pattern.addr, align 8
  store i8* %2, i8** %pat, align 8
  %3 = load i8** %context.addr, align 8
  store i8* %3, i8** %text, align 8
  %4 = load i8** %pattern.addr, align 8
  store i8* %4, i8** %pat, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i8** %pat, align 8
  %6 = load i8* %5, align 1
  %conv2 = sext i8 %6 to i32
  %cmp3 = icmp ne i32 %conv2, 0
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %7 = load i32* @rightmatch.done_loop, align 4
  %tobool = icmp ne i32 %7, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %8 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %8, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %9 = load i8** %pat, align 8
  %10 = load i8* %9, align 1
  %conv5 = sext i8 %10 to i32
  %call = call i32 @isalpha(i32 %conv5)
  %tobool6 = icmp ne i32 %call, 0
  br i1 %tobool6, label %if.then14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %11 = load i8** %pat, align 8
  %12 = load i8* %11, align 1
  %conv7 = sext i8 %12 to i32
  %cmp8 = icmp eq i32 %conv7, 39
  br i1 %cmp8, label %if.then14, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %lor.lhs.false
  %13 = load i8** %pat, align 8
  %14 = load i8* %13, align 1
  %conv11 = sext i8 %14 to i32
  %cmp12 = icmp eq i32 %conv11, 32
  br i1 %cmp12, label %if.then14, label %if.end21

if.then14:                                        ; preds = %lor.lhs.false10, %lor.lhs.false, %for.body
  %15 = load i8** %pat, align 8
  %16 = load i8* %15, align 1
  %conv15 = sext i8 %16 to i32
  %17 = load i8** %text, align 8
  %18 = load i8* %17, align 1
  %conv16 = sext i8 %18 to i32
  %cmp17 = icmp ne i32 %conv15, %conv16
  br i1 %cmp17, label %if.then19, label %if.else

if.then19:                                        ; preds = %if.then14
  store i32 1, i32* @rightmatch.done_loop, align 4
  store i32 0, i32* @rightmatch.result, align 4
  br label %if.end20

if.else:                                          ; preds = %if.then14
  %19 = load i8** %text, align 8
  %incdec.ptr = getelementptr inbounds i8* %19, i32 1
  store i8* %incdec.ptr, i8** %text, align 8
  br label %for.inc

if.end20:                                         ; preds = %if.then19
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %lor.lhs.false10
  %20 = load i32* @rightmatch.done_loop, align 4
  %tobool22 = icmp ne i32 %20, 0
  br i1 %tobool22, label %if.end172, label %if.then23

if.then23:                                        ; preds = %if.end21
  %21 = load i8** %pat, align 8
  %22 = load i8* %21, align 1
  %conv24 = sext i8 %22 to i32
  switch i32 %conv24, label %sw.default [
    i32 35, label %sw.bb
    i32 58, label %sw.bb36
    i32 94, label %sw.bb44
    i32 46, label %sw.bb52
    i32 43, label %sw.bb99
    i32 37, label %sw.bb115
  ]

sw.bb:                                            ; preds = %if.then23
  %23 = load i8** %text, align 8
  %24 = load i8* %23, align 1
  %conv25 = sext i8 %24 to i32
  %call26 = call i32 @isvowel(i32 %conv25)
  %tobool27 = icmp ne i32 %call26, 0
  br i1 %tobool27, label %if.else29, label %if.then28

if.then28:                                        ; preds = %sw.bb
  store i32 1, i32* @rightmatch.done_loop, align 4
  store i32 0, i32* @rightmatch.result, align 4
  br label %if.end35

if.else29:                                        ; preds = %sw.bb
  %25 = load i8** %text, align 8
  %incdec.ptr30 = getelementptr inbounds i8* %25, i32 1
  store i8* %incdec.ptr30, i8** %text, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else29
  %26 = load i8** %text, align 8
  %27 = load i8* %26, align 1
  %conv31 = sext i8 %27 to i32
  %call32 = call i32 @isvowel(i32 %conv31)
  %tobool33 = icmp ne i32 %call32, 0
  br i1 %tobool33, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %28 = load i8** %text, align 8
  %incdec.ptr34 = getelementptr inbounds i8* %28, i32 1
  store i8* %incdec.ptr34, i8** %text, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end35

if.end35:                                         ; preds = %while.end, %if.then28
  br label %sw.epilog

sw.bb36:                                          ; preds = %if.then23
  br label %while.cond37

while.cond37:                                     ; preds = %while.body41, %sw.bb36
  %29 = load i8** %text, align 8
  %30 = load i8* %29, align 1
  %conv38 = sext i8 %30 to i32
  %call39 = call i32 @isconsonant(i32 %conv38)
  %tobool40 = icmp ne i32 %call39, 0
  br i1 %tobool40, label %while.body41, label %while.end43

while.body41:                                     ; preds = %while.cond37
  %31 = load i8** %text, align 8
  %incdec.ptr42 = getelementptr inbounds i8* %31, i32 1
  store i8* %incdec.ptr42, i8** %text, align 8
  br label %while.cond37

while.end43:                                      ; preds = %while.cond37
  br label %sw.epilog

sw.bb44:                                          ; preds = %if.then23
  %32 = load i8** %text, align 8
  %33 = load i8* %32, align 1
  %conv45 = sext i8 %33 to i32
  %call46 = call i32 @isconsonant(i32 %conv45)
  %tobool47 = icmp ne i32 %call46, 0
  br i1 %tobool47, label %if.else49, label %if.then48

if.then48:                                        ; preds = %sw.bb44
  store i32 1, i32* @rightmatch.done_loop, align 4
  store i32 0, i32* @rightmatch.result, align 4
  br label %if.end51

if.else49:                                        ; preds = %sw.bb44
  %34 = load i8** %text, align 8
  %incdec.ptr50 = getelementptr inbounds i8* %34, i32 1
  store i8* %incdec.ptr50, i8** %text, align 8
  br label %if.end51

if.end51:                                         ; preds = %if.else49, %if.then48
  br label %sw.epilog

sw.bb52:                                          ; preds = %if.then23
  %35 = load i8** %text, align 8
  %36 = load i8* %35, align 1
  %conv53 = sext i8 %36 to i32
  %cmp54 = icmp ne i32 %conv53, 66
  br i1 %cmp54, label %land.lhs.true, label %if.else96

land.lhs.true:                                    ; preds = %sw.bb52
  %37 = load i8** %text, align 8
  %38 = load i8* %37, align 1
  %conv56 = sext i8 %38 to i32
  %cmp57 = icmp ne i32 %conv56, 68
  br i1 %cmp57, label %land.lhs.true59, label %if.else96

land.lhs.true59:                                  ; preds = %land.lhs.true
  %39 = load i8** %text, align 8
  %40 = load i8* %39, align 1
  %conv60 = sext i8 %40 to i32
  %cmp61 = icmp ne i32 %conv60, 86
  br i1 %cmp61, label %land.lhs.true63, label %if.else96

land.lhs.true63:                                  ; preds = %land.lhs.true59
  %41 = load i8** %text, align 8
  %42 = load i8* %41, align 1
  %conv64 = sext i8 %42 to i32
  %cmp65 = icmp ne i32 %conv64, 71
  br i1 %cmp65, label %land.lhs.true67, label %if.else96

land.lhs.true67:                                  ; preds = %land.lhs.true63
  %43 = load i8** %text, align 8
  %44 = load i8* %43, align 1
  %conv68 = sext i8 %44 to i32
  %cmp69 = icmp ne i32 %conv68, 74
  br i1 %cmp69, label %land.lhs.true71, label %if.else96

land.lhs.true71:                                  ; preds = %land.lhs.true67
  %45 = load i8** %text, align 8
  %46 = load i8* %45, align 1
  %conv72 = sext i8 %46 to i32
  %cmp73 = icmp ne i32 %conv72, 76
  br i1 %cmp73, label %land.lhs.true75, label %if.else96

land.lhs.true75:                                  ; preds = %land.lhs.true71
  %47 = load i8** %text, align 8
  %48 = load i8* %47, align 1
  %conv76 = sext i8 %48 to i32
  %cmp77 = icmp ne i32 %conv76, 77
  br i1 %cmp77, label %land.lhs.true79, label %if.else96

land.lhs.true79:                                  ; preds = %land.lhs.true75
  %49 = load i8** %text, align 8
  %50 = load i8* %49, align 1
  %conv80 = sext i8 %50 to i32
  %cmp81 = icmp ne i32 %conv80, 78
  br i1 %cmp81, label %land.lhs.true83, label %if.else96

land.lhs.true83:                                  ; preds = %land.lhs.true79
  %51 = load i8** %text, align 8
  %52 = load i8* %51, align 1
  %conv84 = sext i8 %52 to i32
  %cmp85 = icmp ne i32 %conv84, 82
  br i1 %cmp85, label %land.lhs.true87, label %if.else96

land.lhs.true87:                                  ; preds = %land.lhs.true83
  %53 = load i8** %text, align 8
  %54 = load i8* %53, align 1
  %conv88 = sext i8 %54 to i32
  %cmp89 = icmp ne i32 %conv88, 87
  br i1 %cmp89, label %land.lhs.true91, label %if.else96

land.lhs.true91:                                  ; preds = %land.lhs.true87
  %55 = load i8** %text, align 8
  %56 = load i8* %55, align 1
  %conv92 = sext i8 %56 to i32
  %cmp93 = icmp ne i32 %conv92, 90
  br i1 %cmp93, label %if.then95, label %if.else96

if.then95:                                        ; preds = %land.lhs.true91
  store i32 1, i32* @rightmatch.done_loop, align 4
  store i32 0, i32* @rightmatch.result, align 4
  br label %if.end98

if.else96:                                        ; preds = %land.lhs.true91, %land.lhs.true87, %land.lhs.true83, %land.lhs.true79, %land.lhs.true75, %land.lhs.true71, %land.lhs.true67, %land.lhs.true63, %land.lhs.true59, %land.lhs.true, %sw.bb52
  %57 = load i8** %text, align 8
  %incdec.ptr97 = getelementptr inbounds i8* %57, i32 1
  store i8* %incdec.ptr97, i8** %text, align 8
  br label %if.end98

if.end98:                                         ; preds = %if.else96, %if.then95
  br label %sw.epilog

sw.bb99:                                          ; preds = %if.then23
  %58 = load i8** %text, align 8
  %59 = load i8* %58, align 1
  %conv100 = sext i8 %59 to i32
  %cmp101 = icmp ne i32 %conv100, 69
  br i1 %cmp101, label %land.lhs.true103, label %if.else112

land.lhs.true103:                                 ; preds = %sw.bb99
  %60 = load i8** %text, align 8
  %61 = load i8* %60, align 1
  %conv104 = sext i8 %61 to i32
  %cmp105 = icmp ne i32 %conv104, 73
  br i1 %cmp105, label %land.lhs.true107, label %if.else112

land.lhs.true107:                                 ; preds = %land.lhs.true103
  %62 = load i8** %text, align 8
  %63 = load i8* %62, align 1
  %conv108 = sext i8 %63 to i32
  %cmp109 = icmp ne i32 %conv108, 89
  br i1 %cmp109, label %if.then111, label %if.else112

if.then111:                                       ; preds = %land.lhs.true107
  store i32 1, i32* @rightmatch.done_loop, align 4
  store i32 0, i32* @rightmatch.result, align 4
  br label %if.end114

if.else112:                                       ; preds = %land.lhs.true107, %land.lhs.true103, %sw.bb99
  %64 = load i8** %text, align 8
  %incdec.ptr113 = getelementptr inbounds i8* %64, i32 1
  store i8* %incdec.ptr113, i8** %text, align 8
  br label %if.end114

if.end114:                                        ; preds = %if.else112, %if.then111
  br label %sw.epilog

sw.bb115:                                         ; preds = %if.then23
  %65 = load i8** %text, align 8
  %66 = load i8* %65, align 1
  %conv116 = sext i8 %66 to i32
  %cmp117 = icmp eq i32 %conv116, 69
  br i1 %cmp117, label %if.then119, label %if.else149

if.then119:                                       ; preds = %sw.bb115
  %67 = load i8** %text, align 8
  %incdec.ptr120 = getelementptr inbounds i8* %67, i32 1
  store i8* %incdec.ptr120, i8** %text, align 8
  %68 = load i8** %text, align 8
  %69 = load i8* %68, align 1
  %conv121 = sext i8 %69 to i32
  %cmp122 = icmp eq i32 %conv121, 76
  br i1 %cmp122, label %if.then124, label %if.else133

if.then124:                                       ; preds = %if.then119
  %70 = load i8** %text, align 8
  %incdec.ptr125 = getelementptr inbounds i8* %70, i32 1
  store i8* %incdec.ptr125, i8** %text, align 8
  %71 = load i8** %text, align 8
  %72 = load i8* %71, align 1
  %conv126 = sext i8 %72 to i32
  %cmp127 = icmp eq i32 %conv126, 89
  br i1 %cmp127, label %if.then129, label %if.else131

if.then129:                                       ; preds = %if.then124
  %73 = load i8** %text, align 8
  %incdec.ptr130 = getelementptr inbounds i8* %73, i32 1
  store i8* %incdec.ptr130, i8** %text, align 8
  br label %sw.epilog

if.else131:                                       ; preds = %if.then124
  %74 = load i8** %text, align 8
  %incdec.ptr132 = getelementptr inbounds i8* %74, i32 -1
  store i8* %incdec.ptr132, i8** %text, align 8
  br label %sw.epilog

if.else133:                                       ; preds = %if.then119
  %75 = load i8** %text, align 8
  %76 = load i8* %75, align 1
  %conv134 = sext i8 %76 to i32
  %cmp135 = icmp eq i32 %conv134, 82
  br i1 %cmp135, label %if.then145, label %lor.lhs.false137

lor.lhs.false137:                                 ; preds = %if.else133
  %77 = load i8** %text, align 8
  %78 = load i8* %77, align 1
  %conv138 = sext i8 %78 to i32
  %cmp139 = icmp eq i32 %conv138, 83
  br i1 %cmp139, label %if.then145, label %lor.lhs.false141

lor.lhs.false141:                                 ; preds = %lor.lhs.false137
  %79 = load i8** %text, align 8
  %80 = load i8* %79, align 1
  %conv142 = sext i8 %80 to i32
  %cmp143 = icmp eq i32 %conv142, 68
  br i1 %cmp143, label %if.then145, label %if.end147

if.then145:                                       ; preds = %lor.lhs.false141, %lor.lhs.false137, %if.else133
  %81 = load i8** %text, align 8
  %incdec.ptr146 = getelementptr inbounds i8* %81, i32 1
  store i8* %incdec.ptr146, i8** %text, align 8
  br label %if.end147

if.end147:                                        ; preds = %if.then145, %lor.lhs.false141
  br label %if.end148

if.end148:                                        ; preds = %if.end147
  br label %sw.epilog

if.else149:                                       ; preds = %sw.bb115
  %82 = load i8** %text, align 8
  %83 = load i8* %82, align 1
  %conv150 = sext i8 %83 to i32
  %cmp151 = icmp eq i32 %conv150, 73
  br i1 %cmp151, label %if.then153, label %if.else167

if.then153:                                       ; preds = %if.else149
  %84 = load i8** %text, align 8
  %incdec.ptr154 = getelementptr inbounds i8* %84, i32 1
  store i8* %incdec.ptr154, i8** %text, align 8
  %85 = load i8** %text, align 8
  %86 = load i8* %85, align 1
  %conv155 = sext i8 %86 to i32
  %cmp156 = icmp eq i32 %conv155, 78
  br i1 %cmp156, label %if.then158, label %if.end166

if.then158:                                       ; preds = %if.then153
  %87 = load i8** %text, align 8
  %incdec.ptr159 = getelementptr inbounds i8* %87, i32 1
  store i8* %incdec.ptr159, i8** %text, align 8
  %88 = load i8** %text, align 8
  %89 = load i8* %88, align 1
  %conv160 = sext i8 %89 to i32
  %cmp161 = icmp eq i32 %conv160, 71
  br i1 %cmp161, label %if.then163, label %if.end165

if.then163:                                       ; preds = %if.then158
  %90 = load i8** %text, align 8
  %incdec.ptr164 = getelementptr inbounds i8* %90, i32 1
  store i8* %incdec.ptr164, i8** %text, align 8
  br label %sw.epilog

if.end165:                                        ; preds = %if.then158
  br label %if.end166

if.end166:                                        ; preds = %if.end165, %if.then153
  store i32 1, i32* @rightmatch.done_loop, align 4
  store i32 0, i32* @rightmatch.result, align 4
  br label %if.end168

if.else167:                                       ; preds = %if.else149
  store i32 1, i32* @rightmatch.done_loop, align 4
  store i32 0, i32* @rightmatch.result, align 4
  br label %if.end168

if.end168:                                        ; preds = %if.else167, %if.end166
  br label %if.end169

if.end169:                                        ; preds = %if.end168
  br label %sw.default

sw.default:                                       ; preds = %if.then23, %if.end169
  %91 = load %struct.__sFILE** @__stderrp, align 8
  %92 = load i8** %pat, align 8
  %93 = load i8* %92, align 1
  %conv170 = sext i8 %93 to i32
  %call171 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %91, i8* getelementptr inbounds ([29 x i8]* @.str2, i32 0, i32 0), i32 %conv170)
  store i32 1, i32* @rightmatch.done_loop, align 4
  store i32 0, i32* @rightmatch.result, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.then163, %if.end148, %if.else131, %if.then129, %if.end114, %if.end98, %if.end51, %while.end43, %if.end35
  br label %if.end172

if.end172:                                        ; preds = %sw.epilog, %if.end21
  br label %for.inc

for.inc:                                          ; preds = %if.end172, %if.else
  %94 = load i8** %pat, align 8
  %incdec.ptr173 = getelementptr inbounds i8* %94, i32 1
  store i8* %incdec.ptr173, i8** %pat, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %95 = load i32* @rightmatch.result, align 4
  store i32 %95, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %96 = load i32* %retval
  ret i32 %96
}

declare i32 @isalpha(i32) #1

declare i64 @strlen(i8*) #1

attributes #0 = { nounwind ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
