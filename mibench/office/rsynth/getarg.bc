; ModuleID = 'getarg.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.9.0"

%struct.__sFILE = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, i8*, i32 (i8*)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i32 (i8*, i8*, i32)*, %struct.__sbuf, %struct.__sFILEX*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i64 }
%struct.__sbuf = type { i8*, i32 }
%struct.__sFILEX = type opaque
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@.str = private unnamed_addr constant [63 x i8] c"$Id: getarg.c,v 1.13 1994/11/08 13:30:50 a904209 Exp a904209 $\00", align 1
@getarg_id = global i8* getelementptr inbounds ([63 x i8]* @.str, i32 0, i32 0), align 8
@help_only = global i32 0, align 4
@.str1 = private unnamed_addr constant [6 x i8] c"-help\00", align 1
@__stderrp = external global %struct.__sFILE*
@.str2 = private unnamed_addr constant [5 x i8] c"%s:\0A\00", align 1
@.str3 = private unnamed_addr constant [12 x i8] c" -%s <%s> [\00", align 1
@.str4 = private unnamed_addr constant [6 x i8] c"]\09%s\0A\00", align 1
@.str5 = private unnamed_addr constant [23 x i8] c" -%s <string> [%s]\09%s\0A\00", align 1
@.str6 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str7 = private unnamed_addr constant [18 x i8] c" [+|-]%s [%s]\09%s\0A\00", align 1
@.str8 = private unnamed_addr constant [4 x i8] c"yes\00", align 1
@.str9 = private unnamed_addr constant [3 x i8] c"no\00", align 1
@.str10 = private unnamed_addr constant [27 x i8] c"%s : %s invalid after -%s\0A\00", align 1
@.str11 = private unnamed_addr constant [28 x i8] c"%s : no argument after -%s\0A\00", align 1
@.str12 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define i32 @getargs(i8* %module, i32 %argc, i8** %argv, ...) #0 {
entry:
  %module.addr = alloca i8*, align 8
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %i = alloca i32, align 4
  %done_module = alloca i32, align 4
  %s = alloca i8*, align 8
  %flag = alloca i32, align 4
  %off = alloca i32, align 4
  %s_loop_stop = alloca i32, align 4
  %a = alloca i8*, align 8
  %count = alloca i32, align 4
  %va_arg_loop_stop = alloca i32, align 4
  %l = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %var = alloca i8*, align 8
  %desc = alloca i8*, align 8
  %x = alloca i8*, align 8
  %x108 = alloca i8*, align 8
  %x152 = alloca i8*, align 8
  %j = alloca i32, align 4
  store i8* %module, i8** %module.addr, align 8
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  store i32 0, i32* %i, align 4
  store i32 0, i32* %done_module, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end214, %entry
  %0 = load i32* %i, align 4
  %1 = load i32* %argc.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %while.body, label %while.end215

while.body:                                       ; preds = %while.cond
  %2 = load i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i8*** %argv.addr, align 8
  %arrayidx = getelementptr inbounds i8** %3, i64 %idxprom
  %4 = load i8** %arrayidx, align 8
  store i8* %4, i8** %s, align 8
  %5 = load i8** %s, align 8
  %incdec.ptr = getelementptr inbounds i8* %5, i32 1
  store i8* %incdec.ptr, i8** %s, align 8
  %6 = load i8* %5, align 1
  %conv = sext i8 %6 to i32
  store i32 %conv, i32* %flag, align 4
  %7 = load i8** %s, align 8
  %8 = load i8* %7, align 1
  %conv1 = sext i8 %8 to i32
  %tobool = icmp ne i32 %conv1, 0
  br i1 %tobool, label %land.lhs.true, label %if.else212

land.lhs.true:                                    ; preds = %while.body
  %9 = load i32* %flag, align 4
  %cmp2 = icmp eq i32 %9, 45
  br i1 %cmp2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %10 = load i32* %flag, align 4
  %cmp4 = icmp eq i32 %10, 43
  br i1 %cmp4, label %if.then, label %if.else212

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  store i32 1, i32* %off, align 4
  store i32 0, i32* %s_loop_stop, align 4
  br label %while.cond6

while.cond6:                                      ; preds = %if.end196, %if.then
  %11 = load i8** %s, align 8
  %12 = load i8* %11, align 1
  %conv7 = sext i8 %12 to i32
  %tobool8 = icmp ne i32 %conv7, 0
  br i1 %tobool8, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond6
  %13 = load i32* %s_loop_stop, align 4
  %cmp9 = icmp eq i32 %13, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond6
  %14 = phi i1 [ false, %while.cond6 ], [ %cmp9, %land.rhs ]
  br i1 %14, label %while.body11, label %while.end197

while.body11:                                     ; preds = %land.end
  store i32 0, i32* %count, align 4
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay12 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay12)
  store i32 0, i32* %va_arg_loop_stop, align 4
  br label %while.cond13

while.cond13:                                     ; preds = %if.end191, %while.body11
  %arraydecay14 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag* %arraydecay14, i32 0, i32 0
  %gp_offset = load i32* %gp_offset_p
  %fits_in_gp = icmp ule i32 %gp_offset, 40
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %while.cond13
  %15 = getelementptr inbounds %struct.__va_list_tag* %arraydecay14, i32 0, i32 3
  %reg_save_area = load i8** %15
  %16 = getelementptr i8* %reg_save_area, i32 %gp_offset
  %17 = bitcast i8* %16 to i8**
  %18 = add i32 %gp_offset, 8
  store i32 %18, i32* %gp_offset_p
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %while.cond13
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag* %arraydecay14, i32 0, i32 2
  %overflow_arg_area = load i8** %overflow_arg_area_p
  %19 = bitcast i8* %overflow_arg_area to i8**
  %overflow_arg_area.next = getelementptr i8* %overflow_arg_area, i32 8
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi i8** [ %17, %vaarg.in_reg ], [ %19, %vaarg.in_mem ]
  %20 = load i8** %vaarg.addr
  store i8* %20, i8** %a, align 8
  %tobool15 = icmp ne i8* %20, null
  br i1 %tobool15, label %land.rhs16, label %land.end19

land.rhs16:                                       ; preds = %vaarg.end
  %21 = load i32* %va_arg_loop_stop, align 4
  %cmp17 = icmp eq i32 %21, 0
  br label %land.end19

land.end19:                                       ; preds = %land.rhs16, %vaarg.end
  %22 = phi i1 [ false, %vaarg.end ], [ %cmp17, %land.rhs16 ]
  br i1 %22, label %while.body20, label %while.end

while.body20:                                     ; preds = %land.end19
  %23 = load i8** %a, align 8
  %call = call i64 @strlen(i8* %23)
  %conv21 = trunc i64 %call to i32
  store i32 %conv21, i32* %l, align 4
  %arraydecay22 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %gp_offset_p23 = getelementptr inbounds %struct.__va_list_tag* %arraydecay22, i32 0, i32 0
  %gp_offset24 = load i32* %gp_offset_p23
  %fits_in_gp25 = icmp ule i32 %gp_offset24, 40
  br i1 %fits_in_gp25, label %vaarg.in_reg26, label %vaarg.in_mem28

vaarg.in_reg26:                                   ; preds = %while.body20
  %24 = getelementptr inbounds %struct.__va_list_tag* %arraydecay22, i32 0, i32 3
  %reg_save_area27 = load i8** %24
  %25 = getelementptr i8* %reg_save_area27, i32 %gp_offset24
  %26 = bitcast i8* %25 to i8**
  %27 = add i32 %gp_offset24, 8
  store i32 %27, i32* %gp_offset_p23
  br label %vaarg.end32

vaarg.in_mem28:                                   ; preds = %while.body20
  %overflow_arg_area_p29 = getelementptr inbounds %struct.__va_list_tag* %arraydecay22, i32 0, i32 2
  %overflow_arg_area30 = load i8** %overflow_arg_area_p29
  %28 = bitcast i8* %overflow_arg_area30 to i8**
  %overflow_arg_area.next31 = getelementptr i8* %overflow_arg_area30, i32 8
  store i8* %overflow_arg_area.next31, i8** %overflow_arg_area_p29
  br label %vaarg.end32

vaarg.end32:                                      ; preds = %vaarg.in_mem28, %vaarg.in_reg26
  %vaarg.addr33 = phi i8** [ %26, %vaarg.in_reg26 ], [ %28, %vaarg.in_mem28 ]
  %29 = load i8** %vaarg.addr33
  store i8* %29, i8** %fmt, align 8
  %arraydecay34 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %gp_offset_p35 = getelementptr inbounds %struct.__va_list_tag* %arraydecay34, i32 0, i32 0
  %gp_offset36 = load i32* %gp_offset_p35
  %fits_in_gp37 = icmp ule i32 %gp_offset36, 40
  br i1 %fits_in_gp37, label %vaarg.in_reg38, label %vaarg.in_mem40

vaarg.in_reg38:                                   ; preds = %vaarg.end32
  %30 = getelementptr inbounds %struct.__va_list_tag* %arraydecay34, i32 0, i32 3
  %reg_save_area39 = load i8** %30
  %31 = getelementptr i8* %reg_save_area39, i32 %gp_offset36
  %32 = bitcast i8* %31 to i8**
  %33 = add i32 %gp_offset36, 8
  store i32 %33, i32* %gp_offset_p35
  br label %vaarg.end44

vaarg.in_mem40:                                   ; preds = %vaarg.end32
  %overflow_arg_area_p41 = getelementptr inbounds %struct.__va_list_tag* %arraydecay34, i32 0, i32 2
  %overflow_arg_area42 = load i8** %overflow_arg_area_p41
  %34 = bitcast i8* %overflow_arg_area42 to i8**
  %overflow_arg_area.next43 = getelementptr i8* %overflow_arg_area42, i32 8
  store i8* %overflow_arg_area.next43, i8** %overflow_arg_area_p41
  br label %vaarg.end44

vaarg.end44:                                      ; preds = %vaarg.in_mem40, %vaarg.in_reg38
  %vaarg.addr45 = phi i8** [ %32, %vaarg.in_reg38 ], [ %34, %vaarg.in_mem40 ]
  %35 = load i8** %vaarg.addr45
  store i8* %35, i8** %var, align 8
  %arraydecay46 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %gp_offset_p47 = getelementptr inbounds %struct.__va_list_tag* %arraydecay46, i32 0, i32 0
  %gp_offset48 = load i32* %gp_offset_p47
  %fits_in_gp49 = icmp ule i32 %gp_offset48, 40
  br i1 %fits_in_gp49, label %vaarg.in_reg50, label %vaarg.in_mem52

vaarg.in_reg50:                                   ; preds = %vaarg.end44
  %36 = getelementptr inbounds %struct.__va_list_tag* %arraydecay46, i32 0, i32 3
  %reg_save_area51 = load i8** %36
  %37 = getelementptr i8* %reg_save_area51, i32 %gp_offset48
  %38 = bitcast i8* %37 to i8**
  %39 = add i32 %gp_offset48, 8
  store i32 %39, i32* %gp_offset_p47
  br label %vaarg.end56

vaarg.in_mem52:                                   ; preds = %vaarg.end44
  %overflow_arg_area_p53 = getelementptr inbounds %struct.__va_list_tag* %arraydecay46, i32 0, i32 2
  %overflow_arg_area54 = load i8** %overflow_arg_area_p53
  %40 = bitcast i8* %overflow_arg_area54 to i8**
  %overflow_arg_area.next55 = getelementptr i8* %overflow_arg_area54, i32 8
  store i8* %overflow_arg_area.next55, i8** %overflow_arg_area_p53
  br label %vaarg.end56

vaarg.end56:                                      ; preds = %vaarg.in_mem52, %vaarg.in_reg50
  %vaarg.addr57 = phi i8** [ %38, %vaarg.in_reg50 ], [ %40, %vaarg.in_mem52 ]
  %41 = load i8** %vaarg.addr57
  store i8* %41, i8** %desc, align 8
  %42 = load i8** %s, align 8
  %call58 = call i32 @strcmp(i8* %42, i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0))
  %tobool59 = icmp ne i32 %call58, 0
  br i1 %tobool59, label %if.else94, label %if.then60

if.then60:                                        ; preds = %vaarg.end56
  store i32 1, i32* @help_only, align 4
  %43 = load i32* %done_module, align 4
  %inc = add nsw i32 %43, 1
  store i32 %inc, i32* %done_module, align 4
  %tobool61 = icmp ne i32 %43, 0
  br i1 %tobool61, label %if.end, label %if.then62

if.then62:                                        ; preds = %if.then60
  %44 = load %struct.__sFILE** @__stderrp, align 8
  %45 = load i8** %module.addr, align 8
  %call63 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %44, i8* getelementptr inbounds ([5 x i8]* @.str2, i32 0, i32 0), i8* %45)
  br label %if.end

if.end:                                           ; preds = %if.then62, %if.then60
  %46 = load i8** %fmt, align 8
  %tobool64 = icmp ne i8* %46, null
  br i1 %tobool64, label %if.then65, label %if.else89

if.then65:                                        ; preds = %if.end
  %47 = load i8** %fmt, align 8
  %call66 = call i8* @strchr(i8* %47, i32 37)
  store i8* %call66, i8** %x, align 8
  %48 = load i8** %x, align 8
  %tobool67 = icmp ne i8* %48, null
  br i1 %tobool67, label %if.then68, label %if.else85

if.then68:                                        ; preds = %if.then65
  %49 = load %struct.__sFILE** @__stderrp, align 8
  %50 = load i8** %a, align 8
  %51 = load i8** %x, align 8
  %add.ptr = getelementptr inbounds i8* %51, i64 1
  %call69 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %49, i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i8* %50, i8* %add.ptr)
  %52 = load i8** %x, align 8
  %53 = load i8** %x, align 8
  %call70 = call i64 @strlen(i8* %53)
  %add.ptr71 = getelementptr inbounds i8* %52, i64 %call70
  %add.ptr72 = getelementptr inbounds i8* %add.ptr71, i64 -1
  %54 = load i8* %add.ptr72, align 1
  %conv73 = sext i8 %54 to i32
  switch i32 %conv73, label %sw.epilog [
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 117, label %sw.bb75
    i32 100, label %sw.bb75
  ]

sw.bb:                                            ; preds = %if.then68, %if.then68, %if.then68
  %55 = load %struct.__sFILE** @__stderrp, align 8
  %56 = load i8** %fmt, align 8
  %57 = load i8** %var, align 8
  %58 = bitcast i8* %57 to double*
  %59 = load double* %58, align 8
  %call74 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %55, i8* %56, double %59)
  br label %sw.epilog

sw.bb75:                                          ; preds = %if.then68, %if.then68
  %60 = load i8** %x, align 8
  %arrayidx76 = getelementptr inbounds i8* %60, i64 1
  %61 = load i8* %arrayidx76, align 1
  %conv77 = sext i8 %61 to i32
  %cmp78 = icmp eq i32 %conv77, 108
  br i1 %cmp78, label %if.then80, label %if.else

if.then80:                                        ; preds = %sw.bb75
  %62 = load %struct.__sFILE** @__stderrp, align 8
  %63 = load i8** %fmt, align 8
  %64 = load i8** %var, align 8
  %65 = bitcast i8* %64 to i64*
  %66 = load i64* %65, align 8
  %call81 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %62, i8* %63, i64 %66)
  br label %if.end83

if.else:                                          ; preds = %sw.bb75
  %67 = load %struct.__sFILE** @__stderrp, align 8
  %68 = load i8** %fmt, align 8
  %69 = load i8** %var, align 8
  %70 = bitcast i8* %69 to i32*
  %71 = load i32* %70, align 4
  %call82 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %67, i8* %68, i32 %71)
  br label %if.end83

if.end83:                                         ; preds = %if.else, %if.then80
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.then68, %if.end83, %sw.bb
  %72 = load %struct.__sFILE** @__stderrp, align 8
  %73 = load i8** %desc, align 8
  %call84 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %72, i8* getelementptr inbounds ([6 x i8]* @.str4, i32 0, i32 0), i8* %73)
  br label %if.end88

if.else85:                                        ; preds = %if.then65
  %74 = load %struct.__sFILE** @__stderrp, align 8
  %75 = load i8** %a, align 8
  %76 = load i8** %var, align 8
  %77 = bitcast i8* %76 to i8**
  %78 = load i8** %77, align 8
  %tobool86 = icmp ne i8* %78, null
  br i1 %tobool86, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else85
  %79 = load i8** %var, align 8
  %80 = bitcast i8* %79 to i8**
  %81 = load i8** %80, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else85
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %81, %cond.true ], [ getelementptr inbounds ([1 x i8]* @.str6, i32 0, i32 0), %cond.false ]
  %82 = load i8** %desc, align 8
  %call87 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %74, i8* getelementptr inbounds ([23 x i8]* @.str5, i32 0, i32 0), i8* %75, i8* %cond, i8* %82)
  br label %if.end88

if.end88:                                         ; preds = %cond.end, %sw.epilog
  br label %if.end93

if.else89:                                        ; preds = %if.end
  %83 = load %struct.__sFILE** @__stderrp, align 8
  %84 = load i8** %a, align 8
  %85 = load i8** %var, align 8
  %86 = bitcast i8* %85 to i32*
  %87 = load i32* %86, align 4
  %tobool90 = icmp ne i32 %87, 0
  %cond91 = select i1 %tobool90, i8* getelementptr inbounds ([4 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str9, i32 0, i32 0)
  %88 = load i8** %desc, align 8
  %call92 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %83, i8* getelementptr inbounds ([18 x i8]* @.str7, i32 0, i32 0), i8* %84, i8* %cond91, i8* %88)
  br label %if.end93

if.end93:                                         ; preds = %if.else89, %if.end88
  br label %if.end191

if.else94:                                        ; preds = %vaarg.end56
  %89 = load i32* %l, align 4
  %cmp95 = icmp sgt i32 %89, 1
  br i1 %cmp95, label %if.then97, label %if.else140

if.then97:                                        ; preds = %if.else94
  %90 = load i32* %count, align 4
  %tobool98 = icmp ne i32 %90, 0
  br i1 %tobool98, label %if.end139, label %land.lhs.true99

land.lhs.true99:                                  ; preds = %if.then97
  %91 = load i8** %s, align 8
  %92 = load i8** %a, align 8
  %call100 = call i32 @strcmp(i8* %91, i8* %92)
  %tobool101 = icmp ne i32 %call100, 0
  br i1 %tobool101, label %if.end139, label %if.then102

if.then102:                                       ; preds = %land.lhs.true99
  %93 = load i8** %fmt, align 8
  %tobool103 = icmp ne i8* %93, null
  br i1 %tobool103, label %if.then104, label %if.else129

if.then104:                                       ; preds = %if.then102
  %94 = load i32* %i, align 4
  %95 = load i32* %off, align 4
  %add = add nsw i32 %94, %95
  %96 = load i32* %argc.addr, align 4
  %cmp105 = icmp slt i32 %add, %96
  br i1 %cmp105, label %if.then107, label %if.else125

if.then107:                                       ; preds = %if.then104
  %97 = load i32* %i, align 4
  %98 = load i32* %off, align 4
  %inc109 = add nsw i32 %98, 1
  store i32 %inc109, i32* %off, align 4
  %add110 = add nsw i32 %97, %98
  %idxprom111 = sext i32 %add110 to i64
  %99 = load i8*** %argv.addr, align 8
  %arrayidx112 = getelementptr inbounds i8** %99, i64 %idxprom111
  %100 = load i8** %arrayidx112, align 8
  store i8* %100, i8** %x108, align 8
  %101 = load i8** %fmt, align 8
  %call113 = call i8* @strchr(i8* %101, i32 37)
  %tobool114 = icmp ne i8* %call113, null
  br i1 %tobool114, label %if.then115, label %if.else123

if.then115:                                       ; preds = %if.then107
  %102 = load i8** %x108, align 8
  %103 = load i8** %fmt, align 8
  %104 = load i8** %var, align 8
  %call116 = call i32 (i8*, i8*, ...)* @sscanf(i8* %102, i8* %103, i8* %104)
  %cmp117 = icmp ne i32 %call116, 1
  br i1 %cmp117, label %if.then119, label %if.end122

if.then119:                                       ; preds = %if.then115
  %105 = load %struct.__sFILE** @__stderrp, align 8
  %106 = load i8*** %argv.addr, align 8
  %arrayidx120 = getelementptr inbounds i8** %106, i64 0
  %107 = load i8** %arrayidx120, align 8
  %108 = load i8** %x108, align 8
  %109 = load i8** %a, align 8
  %call121 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %105, i8* getelementptr inbounds ([27 x i8]* @.str10, i32 0, i32 0), i8* %107, i8* %108, i8* %109)
  br label %if.end122

if.end122:                                        ; preds = %if.then119, %if.then115
  br label %if.end124

if.else123:                                       ; preds = %if.then107
  %110 = load i8** %x108, align 8
  %111 = load i8** %var, align 8
  %112 = bitcast i8* %111 to i8**
  store i8* %110, i8** %112, align 8
  br label %if.end124

if.end124:                                        ; preds = %if.else123, %if.end122
  br label %if.end128

if.else125:                                       ; preds = %if.then104
  %113 = load %struct.__sFILE** @__stderrp, align 8
  %114 = load i8*** %argv.addr, align 8
  %arrayidx126 = getelementptr inbounds i8** %114, i64 0
  %115 = load i8** %arrayidx126, align 8
  %116 = load i8** %a, align 8
  %call127 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %113, i8* getelementptr inbounds ([28 x i8]* @.str11, i32 0, i32 0), i8* %115, i8* %116)
  br label %if.end128

if.end128:                                        ; preds = %if.else125, %if.end124
  br label %if.end136

if.else129:                                       ; preds = %if.then102
  %117 = load i32* %flag, align 4
  %cmp130 = icmp eq i32 %117, 43
  br i1 %cmp130, label %if.then132, label %if.else133

if.then132:                                       ; preds = %if.else129
  %118 = load i8** %var, align 8
  %119 = bitcast i8* %118 to i32*
  store i32 1, i32* %119, align 4
  br label %if.end135

if.else133:                                       ; preds = %if.else129
  %120 = load i8** %var, align 8
  %121 = bitcast i8* %120 to i32*
  %122 = load i32* %121, align 4
  %tobool134 = icmp ne i32 %122, 0
  %lnot = xor i1 %tobool134, true
  %lnot.ext = zext i1 %lnot to i32
  %123 = load i8** %var, align 8
  %124 = bitcast i8* %123 to i32*
  store i32 %lnot.ext, i32* %124, align 4
  br label %if.end135

if.end135:                                        ; preds = %if.else133, %if.then132
  br label %if.end136

if.end136:                                        ; preds = %if.end135, %if.end128
  %125 = load i32* %count, align 4
  %inc137 = add nsw i32 %125, 1
  store i32 %inc137, i32* %count, align 4
  %126 = load i32* %l, align 4
  %127 = load i8** %s, align 8
  %idx.ext = sext i32 %126 to i64
  %add.ptr138 = getelementptr inbounds i8* %127, i64 %idx.ext
  store i8* %add.ptr138, i8** %s, align 8
  store i32 1, i32* %va_arg_loop_stop, align 4
  br label %if.end139

if.end139:                                        ; preds = %if.end136, %land.lhs.true99, %if.then97
  br label %if.end190

if.else140:                                       ; preds = %if.else94
  %128 = load i8** %s, align 8
  %129 = load i8* %128, align 1
  %conv141 = sext i8 %129 to i32
  %130 = load i8** %a, align 8
  %131 = load i8* %130, align 1
  %conv142 = sext i8 %131 to i32
  %cmp143 = icmp eq i32 %conv141, %conv142
  br i1 %cmp143, label %if.then145, label %if.end189

if.then145:                                       ; preds = %if.else140
  %132 = load i8** %fmt, align 8
  %tobool146 = icmp ne i8* %132, null
  br i1 %tobool146, label %if.then147, label %if.else173

if.then147:                                       ; preds = %if.then145
  %133 = load i32* %i, align 4
  %134 = load i32* %off, align 4
  %add148 = add nsw i32 %133, %134
  %135 = load i32* %argc.addr, align 4
  %cmp149 = icmp slt i32 %add148, %135
  br i1 %cmp149, label %if.then151, label %if.else169

if.then151:                                       ; preds = %if.then147
  %136 = load i32* %i, align 4
  %137 = load i32* %off, align 4
  %inc153 = add nsw i32 %137, 1
  store i32 %inc153, i32* %off, align 4
  %add154 = add nsw i32 %136, %137
  %idxprom155 = sext i32 %add154 to i64
  %138 = load i8*** %argv.addr, align 8
  %arrayidx156 = getelementptr inbounds i8** %138, i64 %idxprom155
  %139 = load i8** %arrayidx156, align 8
  store i8* %139, i8** %x152, align 8
  %140 = load i8** %fmt, align 8
  %call157 = call i8* @strchr(i8* %140, i32 37)
  %tobool158 = icmp ne i8* %call157, null
  br i1 %tobool158, label %if.then159, label %if.else167

if.then159:                                       ; preds = %if.then151
  %141 = load i8** %x152, align 8
  %142 = load i8** %fmt, align 8
  %143 = load i8** %var, align 8
  %call160 = call i32 (i8*, i8*, ...)* @sscanf(i8* %141, i8* %142, i8* %143)
  %cmp161 = icmp ne i32 %call160, 1
  br i1 %cmp161, label %if.then163, label %if.end166

if.then163:                                       ; preds = %if.then159
  %144 = load %struct.__sFILE** @__stderrp, align 8
  %145 = load i8*** %argv.addr, align 8
  %arrayidx164 = getelementptr inbounds i8** %145, i64 0
  %146 = load i8** %arrayidx164, align 8
  %147 = load i8** %x152, align 8
  %148 = load i8** %a, align 8
  %call165 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %144, i8* getelementptr inbounds ([27 x i8]* @.str10, i32 0, i32 0), i8* %146, i8* %147, i8* %148)
  br label %if.end166

if.end166:                                        ; preds = %if.then163, %if.then159
  br label %if.end168

if.else167:                                       ; preds = %if.then151
  %149 = load i8** %x152, align 8
  %150 = load i8** %var, align 8
  %151 = bitcast i8* %150 to i8**
  store i8* %149, i8** %151, align 8
  br label %if.end168

if.end168:                                        ; preds = %if.else167, %if.end166
  br label %if.end172

if.else169:                                       ; preds = %if.then147
  %152 = load %struct.__sFILE** @__stderrp, align 8
  %153 = load i8*** %argv.addr, align 8
  %arrayidx170 = getelementptr inbounds i8** %153, i64 0
  %154 = load i8** %arrayidx170, align 8
  %155 = load i8** %a, align 8
  %call171 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %152, i8* getelementptr inbounds ([28 x i8]* @.str11, i32 0, i32 0), i8* %154, i8* %155)
  br label %if.end172

if.end172:                                        ; preds = %if.else169, %if.end168
  br label %if.end186

if.else173:                                       ; preds = %if.then145
  %156 = load i8** %fmt, align 8
  %tobool174 = icmp ne i8* %156, null
  br i1 %tobool174, label %if.then178, label %lor.lhs.false175

lor.lhs.false175:                                 ; preds = %if.else173
  %157 = load i32* %flag, align 4
  %cmp176 = icmp eq i32 %157, 43
  br i1 %cmp176, label %if.then178, label %if.else181

if.then178:                                       ; preds = %lor.lhs.false175, %if.else173
  %158 = load i32* %flag, align 4
  %cmp179 = icmp eq i32 %158, 43
  %conv180 = zext i1 %cmp179 to i32
  %159 = load i8** %var, align 8
  %160 = bitcast i8* %159 to i32*
  store i32 %conv180, i32* %160, align 4
  br label %if.end185

if.else181:                                       ; preds = %lor.lhs.false175
  %161 = load i8** %var, align 8
  %162 = bitcast i8* %161 to i32*
  %163 = load i32* %162, align 4
  %tobool182 = icmp ne i32 %163, 0
  %lnot183 = xor i1 %tobool182, true
  %lnot.ext184 = zext i1 %lnot183 to i32
  %164 = load i8** %var, align 8
  %165 = bitcast i8* %164 to i32*
  store i32 %lnot.ext184, i32* %165, align 4
  br label %if.end185

if.end185:                                        ; preds = %if.else181, %if.then178
  br label %if.end186

if.end186:                                        ; preds = %if.end185, %if.end172
  %166 = load i32* %count, align 4
  %inc187 = add nsw i32 %166, 1
  store i32 %inc187, i32* %count, align 4
  %167 = load i8** %s, align 8
  %incdec.ptr188 = getelementptr inbounds i8* %167, i32 1
  store i8* %incdec.ptr188, i8** %s, align 8
  store i32 1, i32* %va_arg_loop_stop, align 4
  br label %if.end189

if.end189:                                        ; preds = %if.end186, %if.else140
  br label %if.end190

if.end190:                                        ; preds = %if.end189, %if.end139
  br label %if.end191

if.end191:                                        ; preds = %if.end190, %if.end93
  br label %while.cond13

while.end:                                        ; preds = %land.end19
  %arraydecay192 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay192193 = bitcast %struct.__va_list_tag* %arraydecay192 to i8*
  call void @llvm.va_end(i8* %arraydecay192193)
  %168 = load i32* %count, align 4
  %tobool194 = icmp ne i32 %168, 0
  br i1 %tobool194, label %if.end196, label %if.then195

if.then195:                                       ; preds = %while.end
  store i32 0, i32* %off, align 4
  store i32 1, i32* %s_loop_stop, align 4
  br label %if.end196

if.end196:                                        ; preds = %if.then195, %while.end
  br label %while.cond6

while.end197:                                     ; preds = %land.end
  %169 = load i32* %off, align 4
  %cmp198 = icmp ne i32 %169, 0
  br i1 %cmp198, label %if.then200, label %if.else209

if.then200:                                       ; preds = %while.end197
  %170 = load i32* %off, align 4
  %171 = load i32* %argc.addr, align 4
  %sub = sub nsw i32 %171, %170
  store i32 %sub, i32* %argc.addr, align 4
  %172 = load i32* %i, align 4
  store i32 %172, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then200
  %173 = load i32* %j, align 4
  %174 = load i32* %argc.addr, align 4
  %cmp201 = icmp sle i32 %173, %174
  br i1 %cmp201, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %175 = load i32* %j, align 4
  %176 = load i32* %off, align 4
  %add203 = add nsw i32 %175, %176
  %idxprom204 = sext i32 %add203 to i64
  %177 = load i8*** %argv.addr, align 8
  %arrayidx205 = getelementptr inbounds i8** %177, i64 %idxprom204
  %178 = load i8** %arrayidx205, align 8
  %179 = load i32* %j, align 4
  %idxprom206 = sext i32 %179 to i64
  %180 = load i8*** %argv.addr, align 8
  %arrayidx207 = getelementptr inbounds i8** %180, i64 %idxprom206
  store i8* %178, i8** %arrayidx207, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %181 = load i32* %j, align 4
  %inc208 = add nsw i32 %181, 1
  store i32 %inc208, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end211

if.else209:                                       ; preds = %while.end197
  %182 = load i32* %i, align 4
  %inc210 = add nsw i32 %182, 1
  store i32 %inc210, i32* %i, align 4
  br label %if.end211

if.end211:                                        ; preds = %if.else209, %for.end
  br label %if.end214

if.else212:                                       ; preds = %lor.lhs.false, %while.body
  %183 = load i32* %i, align 4
  %inc213 = add nsw i32 %183, 1
  store i32 %inc213, i32* %i, align 4
  br label %if.end214

if.end214:                                        ; preds = %if.else212, %if.end211
  br label %while.cond

while.end215:                                     ; preds = %while.cond
  %184 = load i32* @help_only, align 4
  %tobool216 = icmp ne i32 %184, 0
  br i1 %tobool216, label %land.lhs.true217, label %if.end221

land.lhs.true217:                                 ; preds = %while.end215
  %185 = load i32* %done_module, align 4
  %tobool218 = icmp ne i32 %185, 0
  br i1 %tobool218, label %if.then219, label %if.end221

if.then219:                                       ; preds = %land.lhs.true217
  %186 = load %struct.__sFILE** @__stderrp, align 8
  %call220 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %186, i8* getelementptr inbounds ([2 x i8]* @.str12, i32 0, i32 0))
  br label %if.end221

if.end221:                                        ; preds = %if.then219, %land.lhs.true217, %while.end215
  %187 = load i32* %argc.addr, align 4
  ret i32 %187
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #1

declare i64 @strlen(i8*) #2

declare i32 @strcmp(i8*, i8*) #2

declare i32 @fprintf(%struct.__sFILE*, i8*, ...) #2

declare i8* @strchr(i8*, i32) #2

declare i32 @sscanf(i8*, i8*, ...) #2

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #1

attributes #0 = { nounwind ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
