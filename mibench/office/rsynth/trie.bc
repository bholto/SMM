; ModuleID = 'trie.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.9.0"

%struct.trie_s = type { %struct.trie_s*, %struct.trie_s*, i8*, i8 }

@.str = private unnamed_addr constant [61 x i8] c"$Id: trie.c,v 1.13 1994/11/08 13:30:50 a904209 Exp a904209 $\00", align 1
@trie_id = global i8* getelementptr inbounds ([61 x i8]* @.str, i32 0, i32 0), align 8

; Function Attrs: nounwind ssp uwtable
define void @trie_insert(%struct.trie_s** %r, i8* %s, i8* %value) #0 {
entry:
  %r.addr = alloca %struct.trie_s**, align 8
  %s.addr = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  %p = alloca %struct.trie_s*, align 8
  %ch = alloca i8, align 1
  %stop_inner_while_loop = alloca i32, align 4
  store %struct.trie_s** %r, %struct.trie_s*** %r.addr, align 8
  store i8* %s, i8** %s.addr, align 8
  store i8* %value, i8** %value.addr, align 8
  store %struct.trie_s* null, %struct.trie_s** %p, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end12, %entry
  %0 = load i8** %s.addr, align 8
  %incdec.ptr = getelementptr inbounds i8* %0, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 8
  %1 = load i8* %0, align 1
  store i8 %1, i8* %ch, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end13

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %stop_inner_while_loop, align 4
  br label %while.cond1

while.cond1:                                      ; preds = %if.end, %while.body
  %2 = load %struct.trie_s*** %r.addr, align 8
  %3 = load %struct.trie_s** %2, align 8
  store %struct.trie_s* %3, %struct.trie_s** %p, align 8
  %tobool2 = icmp ne %struct.trie_s* %3, null
  br i1 %tobool2, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond1
  %4 = load i32* %stop_inner_while_loop, align 4
  %cmp = icmp eq i32 %4, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond1
  %5 = phi i1 [ false, %while.cond1 ], [ %cmp, %land.rhs ]
  br i1 %5, label %while.body3, label %while.end

while.body3:                                      ; preds = %land.end
  %6 = load %struct.trie_s** %p, align 8
  %ch4 = getelementptr inbounds %struct.trie_s* %6, i32 0, i32 3
  %7 = load i8* %ch4, align 1
  %conv = sext i8 %7 to i32
  %8 = load i8* %ch, align 1
  %conv5 = sext i8 %8 to i32
  %cmp6 = icmp eq i32 %conv, %conv5
  br i1 %cmp6, label %if.then, label %if.else

if.then:                                          ; preds = %while.body3
  store i32 1, i32* %stop_inner_while_loop, align 4
  br label %if.end

if.else:                                          ; preds = %while.body3
  %9 = load %struct.trie_s** %p, align 8
  %otherwise = getelementptr inbounds %struct.trie_s* %9, i32 0, i32 0
  store %struct.trie_s** %otherwise, %struct.trie_s*** %r.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond1

while.end:                                        ; preds = %land.end
  %10 = load %struct.trie_s** %p, align 8
  %tobool8 = icmp ne %struct.trie_s* %10, null
  br i1 %tobool8, label %if.end12, label %if.then9

if.then9:                                         ; preds = %while.end
  %call = call i8* @malloc(i64 32)
  %11 = bitcast i8* %call to %struct.trie_s*
  store %struct.trie_s* %11, %struct.trie_s** %p, align 8
  %12 = load %struct.trie_s** %p, align 8
  %13 = bitcast %struct.trie_s* %12 to i8*
  %14 = load %struct.trie_s** %p, align 8
  %15 = bitcast %struct.trie_s* %14 to i8*
  %16 = call i64 @llvm.objectsize.i64(i8* %15, i1 false)
  %call10 = call i8* @__memset_chk(i8* %13, i32 0, i64 32, i64 %16) #4
  %17 = load i8* %ch, align 1
  %18 = load %struct.trie_s** %p, align 8
  %ch11 = getelementptr inbounds %struct.trie_s* %18, i32 0, i32 3
  store i8 %17, i8* %ch11, align 1
  %19 = load %struct.trie_s** %p, align 8
  %20 = load %struct.trie_s*** %r.addr, align 8
  store %struct.trie_s* %19, %struct.trie_s** %20, align 8
  br label %if.end12

if.end12:                                         ; preds = %if.then9, %while.end
  %21 = load %struct.trie_s** %p, align 8
  %more = getelementptr inbounds %struct.trie_s* %21, i32 0, i32 1
  store %struct.trie_s** %more, %struct.trie_s*** %r.addr, align 8
  br label %while.cond

while.end13:                                      ; preds = %while.cond
  %22 = load i8** %value.addr, align 8
  %23 = load %struct.trie_s** %p, align 8
  %value14 = getelementptr inbounds %struct.trie_s* %23, i32 0, i32 2
  store i8* %22, i8** %value14, align 8
  ret void
}

declare i8* @malloc(i64) #1

; Function Attrs: nounwind
declare i8* @__memset_chk(i8*, i32, i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @llvm.objectsize.i64(i8*, i1) #3

; Function Attrs: nounwind ssp uwtable
define i8* @trie_lookup(%struct.trie_s** %r, i8** %sp) #0 {
entry:
  %r.addr = alloca %struct.trie_s**, align 8
  %sp.addr = alloca i8**, align 8
  %s = alloca i8*, align 8
  %value = alloca i8*, align 8
  %ch = alloca i8, align 1
  %stop_outer_while_loop = alloca i32, align 4
  %l = alloca %struct.trie_s**, align 8
  %p = alloca %struct.trie_s*, align 8
  %stop_inner_while_loop = alloca i32, align 4
  store %struct.trie_s** %r, %struct.trie_s*** %r.addr, align 8
  store i8** %sp, i8*** %sp.addr, align 8
  %0 = load i8*** %sp.addr, align 8
  %1 = load i8** %0, align 8
  store i8* %1, i8** %s, align 8
  store i8* null, i8** %value, align 8
  store i32 0, i32* %stop_outer_while_loop, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end20, %entry
  %2 = load i8** %s, align 8
  %3 = load i8* %2, align 1
  store i8 %3, i8* %ch, align 1
  %conv = sext i8 %3 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %4 = load i32* %stop_outer_while_loop, align 4
  %cmp = icmp eq i32 %4, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %5 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ]
  br i1 %5, label %while.body, label %while.end21

while.body:                                       ; preds = %land.end
  %6 = load %struct.trie_s*** %r.addr, align 8
  store %struct.trie_s** %6, %struct.trie_s*** %l, align 8
  store i32 0, i32* %stop_inner_while_loop, align 4
  br label %while.cond2

while.cond2:                                      ; preds = %if.end, %while.body
  %7 = load %struct.trie_s*** %l, align 8
  %8 = load %struct.trie_s** %7, align 8
  store %struct.trie_s* %8, %struct.trie_s** %p, align 8
  %tobool3 = icmp ne %struct.trie_s* %8, null
  br i1 %tobool3, label %land.rhs4, label %land.end7

land.rhs4:                                        ; preds = %while.cond2
  %9 = load i32* %stop_inner_while_loop, align 4
  %cmp5 = icmp eq i32 %9, 0
  br label %land.end7

land.end7:                                        ; preds = %land.rhs4, %while.cond2
  %10 = phi i1 [ false, %while.cond2 ], [ %cmp5, %land.rhs4 ]
  br i1 %10, label %while.body8, label %while.end

while.body8:                                      ; preds = %land.end7
  %11 = load %struct.trie_s** %p, align 8
  %ch9 = getelementptr inbounds %struct.trie_s* %11, i32 0, i32 3
  %12 = load i8* %ch9, align 1
  %conv10 = sext i8 %12 to i32
  %13 = load i8* %ch, align 1
  %conv11 = sext i8 %13 to i32
  %cmp12 = icmp eq i32 %conv10, %conv11
  br i1 %cmp12, label %if.then, label %if.else

if.then:                                          ; preds = %while.body8
  store i32 1, i32* %stop_inner_while_loop, align 4
  br label %if.end

if.else:                                          ; preds = %while.body8
  %14 = load %struct.trie_s** %p, align 8
  %otherwise = getelementptr inbounds %struct.trie_s* %14, i32 0, i32 0
  store %struct.trie_s** %otherwise, %struct.trie_s*** %l, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond2

while.end:                                        ; preds = %land.end7
  %15 = load %struct.trie_s** %p, align 8
  %tobool14 = icmp ne %struct.trie_s* %15, null
  br i1 %tobool14, label %if.then15, label %if.else19

if.then15:                                        ; preds = %while.end
  %16 = load %struct.trie_s** %p, align 8
  %otherwise16 = getelementptr inbounds %struct.trie_s* %16, i32 0, i32 0
  %17 = load %struct.trie_s** %otherwise16, align 8
  %18 = load %struct.trie_s*** %l, align 8
  store %struct.trie_s* %17, %struct.trie_s** %18, align 8
  %19 = load %struct.trie_s*** %r.addr, align 8
  %20 = load %struct.trie_s** %19, align 8
  %21 = load %struct.trie_s** %p, align 8
  %otherwise17 = getelementptr inbounds %struct.trie_s* %21, i32 0, i32 0
  store %struct.trie_s* %20, %struct.trie_s** %otherwise17, align 8
  %22 = load %struct.trie_s** %p, align 8
  %23 = load %struct.trie_s*** %r.addr, align 8
  store %struct.trie_s* %22, %struct.trie_s** %23, align 8
  %24 = load %struct.trie_s** %p, align 8
  %more = getelementptr inbounds %struct.trie_s* %24, i32 0, i32 1
  store %struct.trie_s** %more, %struct.trie_s*** %r.addr, align 8
  %25 = load %struct.trie_s** %p, align 8
  %value18 = getelementptr inbounds %struct.trie_s* %25, i32 0, i32 2
  %26 = load i8** %value18, align 8
  store i8* %26, i8** %value, align 8
  %27 = load i8** %s, align 8
  %incdec.ptr = getelementptr inbounds i8* %27, i32 1
  store i8* %incdec.ptr, i8** %s, align 8
  br label %if.end20

if.else19:                                        ; preds = %while.end
  store i32 1, i32* %stop_outer_while_loop, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.else19, %if.then15
  br label %while.cond

while.end21:                                      ; preds = %land.end
  %28 = load i8** %s, align 8
  %29 = load i8*** %sp.addr, align 8
  store i8* %28, i8** %29, align 8
  %30 = load i8** %value, align 8
  ret i8* %30
}

attributes #0 = { nounwind ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind }
