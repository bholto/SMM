; ModuleID = 'aufile.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.9.0"

%struct.__sFILE = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, i8*, i32 (i8*)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i32 (i8*, i8*, i32)*, %struct.__sbuf, %struct.__sFILEX*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i64 }
%struct.__sbuf = type { i8*, i32 }
%struct.__sFILEX = type opaque

@file_write = global void (i32, i16*)* null, align 8
@file_term = global void ()* null, align 8
@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str1 = private unnamed_addr constant [12 x i8] c"File output\00", align 1
@.str2 = private unnamed_addr constant [2 x i8] c"l\00", align 1
@linear_file = internal global i8* null, align 8
@.str3 = private unnamed_addr constant [27 x i8] c"Raw 16-bit linear pathname\00", align 1
@.str4 = private unnamed_addr constant [2 x i8] c"o\00", align 1
@au_file = internal global i8* null, align 8
@.str5 = private unnamed_addr constant [25 x i8] c"Sun/Next audio file name\00", align 1
@help_only = external global i32
@.str6 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@au_fd = internal global i32 -1, align 4
@samp_rate = external global i64
@au_encoding = internal global i32 1, align 4
@au_size = internal global i32 0, align 4
@linear_fd = internal global i32 -1, align 4
@.str7 = private unnamed_addr constant [6 x i8] c"write\00", align 1
@_l2u = external global i8*
@__stderrp = external global %struct.__sFILE*
@.str8 = private unnamed_addr constant [30 x i8] c"%s : No memory for ulaw data\0A\00", align 1
@program = external global i8*

; Function Attrs: nounwind ssp uwtable
define void @au_header(i32 %fd, i32 %enc, i32 %rate, i32 %size, i8* %comment) #0 {
entry:
  %fd.addr = alloca i32, align 4
  %enc.addr = alloca i32, align 4
  %rate.addr = alloca i32, align 4
  %size.addr = alloca i32, align 4
  %comment.addr = alloca i8*, align 8
  store i32 %fd, i32* %fd.addr, align 4
  store i32 %enc, i32* %enc.addr, align 4
  store i32 %rate, i32* %rate.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i8* %comment, i8** %comment.addr, align 8
  %0 = load i8** %comment.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([1 x i8]* @.str, i32 0, i32 0), i8** %comment.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32* %fd.addr, align 4
  call void @wblong(i32 %1, i64 779316836)
  %2 = load i32* %fd.addr, align 4
  %3 = load i8** %comment.addr, align 8
  %call = call i64 @strlen(i8* %3)
  %add = add i64 24, %call
  call void @wblong(i32 %2, i64 %add)
  %4 = load i32* %fd.addr, align 4
  %5 = load i32* %size.addr, align 4
  %conv = zext i32 %5 to i64
  call void @wblong(i32 %4, i64 %conv)
  %6 = load i32* %fd.addr, align 4
  %7 = load i32* %enc.addr, align 4
  %conv1 = zext i32 %7 to i64
  call void @wblong(i32 %6, i64 %conv1)
  %8 = load i32* %fd.addr, align 4
  %9 = load i32* %rate.addr, align 4
  %conv2 = zext i32 %9 to i64
  call void @wblong(i32 %8, i64 %conv2)
  %10 = load i32* %fd.addr, align 4
  call void @wblong(i32 %10, i64 1)
  %11 = load i32* %fd.addr, align 4
  %12 = load i8** %comment.addr, align 8
  %13 = load i8** %comment.addr, align 8
  %call3 = call i64 @strlen(i8* %13)
  %call4 = call i64 @"\01_write"(i32 %11, i8* %12, i64 %call3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @wblong(i32 %fd, i64 %x) #0 {
entry:
  %fd.addr = alloca i32, align 4
  %x.addr = alloca i64, align 8
  %i = alloca i32, align 4
  %byte = alloca i8, align 1
  store i32 %fd, i32* %fd.addr, align 4
  store i64 %x, i64* %x.addr, align 8
  store i32 24, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %cmp = icmp sge i32 %0, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64* %x.addr, align 8
  %2 = load i32* %i, align 4
  %sh_prom = zext i32 %2 to i64
  %shr = lshr i64 %1, %sh_prom
  %and = and i64 %shr, 255
  %conv = trunc i64 %and to i8
  store i8 %conv, i8* %byte, align 1
  %3 = load i32* %fd.addr, align 4
  %call = call i64 @"\01_write"(i32 %3, i8* %byte, i64 1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32* %i, align 4
  %sub = sub nsw i32 %4, 8
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i64 @strlen(i8*) #1

declare i64 @"\01_write"(i32, i8*, i64) #1

; Function Attrs: nounwind ssp uwtable
define i32 @file_init(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  %0 = load i32* %argc.addr, align 4
  %1 = load i8*** %argv.addr, align 8
  %call = call i32 (i8*, i32, i8**, ...)* @getargs(i8* getelementptr inbounds ([12 x i8]* @.str1, i32 0, i32 0), i32 %0, i8** %1, i8* getelementptr inbounds ([2 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str, i32 0, i32 0), i8** @linear_file, i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str4, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str, i32 0, i32 0), i8** @au_file, i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* null)
  store i32 %call, i32* %argc.addr, align 4
  %2 = load i32* @help_only, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32* %argc.addr, align 4
  store i32 %3, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i8** @au_file, align 8
  %tobool1 = icmp ne i8* %4, null
  br i1 %tobool1, label %if.then2, label %if.end17

if.then2:                                         ; preds = %if.end
  %5 = load i8** @au_file, align 8
  %call3 = call i32 @strcmp(i8* %5, i8* getelementptr inbounds ([2 x i8]* @.str6, i32 0, i32 0))
  %cmp = icmp eq i32 %call3, 0
  br i1 %cmp, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.then2
  store i32 1, i32* @au_fd, align 4
  br label %if.end9

if.else:                                          ; preds = %if.then2
  %6 = load i8** @au_file, align 8
  %call5 = call i32 (i8*, i32, ...)* @"\01_open"(i8* %6, i32 1537, i32 438)
  store i32 %call5, i32* @au_fd, align 4
  %7 = load i32* @au_fd, align 4
  %cmp6 = icmp slt i32 %7, 0
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.else
  %8 = load i8** @au_file, align 8
  call void @perror(i8* %8)
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.then4
  %9 = load i32* @au_fd, align 4
  %cmp10 = icmp sge i32 %9, 0
  br i1 %cmp10, label %if.then11, label %if.end16

if.then11:                                        ; preds = %if.end9
  %10 = load i64* @samp_rate, align 8
  %cmp12 = icmp sgt i64 %10, 8000
  br i1 %cmp12, label %if.then13, label %if.else14

if.then13:                                        ; preds = %if.then11
  store i32 3, i32* @au_encoding, align 4
  br label %if.end15

if.else14:                                        ; preds = %if.then11
  store i32 1, i32* @au_encoding, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.else14, %if.then13
  %11 = load i32* @au_fd, align 4
  %12 = load i32* @au_encoding, align 4
  %13 = load i64* @samp_rate, align 8
  %conv = trunc i64 %13 to i32
  call void @au_header(i32 %11, i32 %12, i32 %conv, i32 -1, i8* getelementptr inbounds ([1 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* @au_size, align 4
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %if.end9
  br label %if.end17

if.end17:                                         ; preds = %if.end16, %if.end
  %14 = load i8** @linear_file, align 8
  %tobool18 = icmp ne i8* %14, null
  br i1 %tobool18, label %if.then19, label %if.end31

if.then19:                                        ; preds = %if.end17
  %15 = load i8** @linear_file, align 8
  %call20 = call i32 @strcmp(i8* %15, i8* getelementptr inbounds ([2 x i8]* @.str6, i32 0, i32 0))
  %cmp21 = icmp eq i32 %call20, 0
  br i1 %cmp21, label %if.then23, label %if.else24

if.then23:                                        ; preds = %if.then19
  store i32 1, i32* @linear_fd, align 4
  br label %if.end30

if.else24:                                        ; preds = %if.then19
  %16 = load i8** @linear_file, align 8
  %call25 = call i32 (i8*, i32, ...)* @"\01_open"(i8* %16, i32 1537, i32 438)
  store i32 %call25, i32* @linear_fd, align 4
  %17 = load i32* @linear_fd, align 4
  %cmp26 = icmp slt i32 %17, 0
  br i1 %cmp26, label %if.then28, label %if.end29

if.then28:                                        ; preds = %if.else24
  %18 = load i8** @linear_file, align 8
  call void @perror(i8* %18)
  br label %if.end29

if.end29:                                         ; preds = %if.then28, %if.else24
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.then23
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.end17
  %19 = load i32* @au_fd, align 4
  %cmp32 = icmp sge i32 %19, 0
  br i1 %cmp32, label %if.then36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end31
  %20 = load i32* @linear_fd, align 4
  %cmp34 = icmp sge i32 %20, 0
  br i1 %cmp34, label %if.then36, label %if.end37

if.then36:                                        ; preds = %lor.lhs.false, %if.end31
  store void (i32, i16*)* @aufile_write, void (i32, i16*)** @file_write, align 8
  store void ()* @aufile_term, void ()** @file_term, align 8
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %lor.lhs.false
  %21 = load i32* %argc.addr, align 4
  store i32 %21, i32* %retval
  br label %return

return:                                           ; preds = %if.end37, %if.then
  %22 = load i32* %retval
  ret i32 %22
}

declare i32 @getargs(i8*, i32, i8**, ...) #1

declare i32 @strcmp(i8*, i8*) #1

declare i32 @"\01_open"(i8*, i32, ...) #1

declare void @perror(i8*) #1

; Function Attrs: nounwind ssp uwtable
define internal void @aufile_write(i32 %n, i16* %data) #0 {
entry:
  %n.addr = alloca i32, align 4
  %data.addr = alloca i16*, align 8
  %size = alloca i32, align 4
  %size17 = alloca i32, align 4
  %plabuf = alloca i8*, align 8
  %p = alloca i8*, align 8
  %e = alloca i8*, align 8
  store i32 %n, i32* %n.addr, align 4
  store i16* %data, i16** %data.addr, align 8
  %0 = load i32* %n.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end55

if.then:                                          ; preds = %entry
  %1 = load i32* @linear_fd, align 4
  %cmp1 = icmp sge i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.end10

if.then2:                                         ; preds = %if.then
  %2 = load i32* %n.addr, align 4
  %conv = sext i32 %2 to i64
  %mul = mul i64 %conv, 2
  %conv3 = trunc i64 %mul to i32
  store i32 %conv3, i32* %size, align 4
  %3 = load i32* @linear_fd, align 4
  %4 = load i16** %data.addr, align 8
  %5 = bitcast i16* %4 to i8*
  %6 = load i32* %n.addr, align 4
  %conv4 = sext i32 %6 to i64
  %mul5 = mul i64 %conv4, 2
  %call = call i64 @"\01_write"(i32 %3, i8* %5, i64 %mul5)
  %7 = load i32* %size, align 4
  %conv6 = zext i32 %7 to i64
  %cmp7 = icmp ne i64 %call, %conv6
  br i1 %cmp7, label %if.then9, label %if.end

if.then9:                                         ; preds = %if.then2
  call void @perror(i8* getelementptr inbounds ([6 x i8]* @.str7, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then9, %if.then2
  br label %if.end10

if.end10:                                         ; preds = %if.end, %if.then
  %8 = load i32* @au_fd, align 4
  %cmp11 = icmp sge i32 %8, 0
  br i1 %cmp11, label %if.then13, label %if.end54

if.then13:                                        ; preds = %if.end10
  %9 = load i32* @au_encoding, align 4
  %cmp14 = icmp eq i32 %9, 3
  br i1 %cmp14, label %if.then16, label %if.else28

if.then16:                                        ; preds = %if.then13
  %10 = load i32* %n.addr, align 4
  %conv18 = sext i32 %10 to i64
  %mul19 = mul i64 %conv18, 2
  %conv20 = trunc i64 %mul19 to i32
  store i32 %conv20, i32* %size17, align 4
  %11 = load i32* @au_fd, align 4
  %12 = load i16** %data.addr, align 8
  %13 = bitcast i16* %12 to i8*
  %14 = load i32* %size17, align 4
  %conv21 = zext i32 %14 to i64
  %call22 = call i64 @"\01_write"(i32 %11, i8* %13, i64 %conv21)
  %15 = load i32* %size17, align 4
  %conv23 = zext i32 %15 to i64
  %cmp24 = icmp ne i64 %call22, %conv23
  br i1 %cmp24, label %if.then26, label %if.else

if.then26:                                        ; preds = %if.then16
  call void @perror(i8* getelementptr inbounds ([6 x i8]* @.str7, i32 0, i32 0))
  br label %if.end27

if.else:                                          ; preds = %if.then16
  %16 = load i32* %size17, align 4
  %17 = load i32* @au_size, align 4
  %add = add i32 %17, %16
  store i32 %add, i32* @au_size, align 4
  br label %if.end27

if.end27:                                         ; preds = %if.else, %if.then26
  br label %if.end53

if.else28:                                        ; preds = %if.then13
  %18 = load i32* @au_encoding, align 4
  %cmp29 = icmp eq i32 %18, 1
  br i1 %cmp29, label %if.then31, label %if.else51

if.then31:                                        ; preds = %if.else28
  %19 = load i32* %n.addr, align 4
  %conv32 = sext i32 %19 to i64
  %call33 = call i8* @malloc(i64 %conv32)
  store i8* %call33, i8** %plabuf, align 8
  %20 = load i8** %plabuf, align 8
  %tobool = icmp ne i8* %20, null
  br i1 %tobool, label %if.then34, label %if.else48

if.then34:                                        ; preds = %if.then31
  %21 = load i8** %plabuf, align 8
  store i8* %21, i8** %p, align 8
  %22 = load i8** %p, align 8
  %23 = load i32* %n.addr, align 4
  %idx.ext = sext i32 %23 to i64
  %add.ptr = getelementptr inbounds i8* %22, i64 %idx.ext
  store i8* %add.ptr, i8** %e, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then34
  %24 = load i8** %p, align 8
  %25 = load i8** %e, align 8
  %cmp35 = icmp ult i8* %24, %25
  br i1 %cmp35, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %26 = load i16** %data.addr, align 8
  %incdec.ptr = getelementptr inbounds i16* %26, i32 1
  store i16* %incdec.ptr, i16** %data.addr, align 8
  %27 = load i16* %26, align 2
  %conv37 = sext i16 %27 to i32
  %shr = ashr i32 %conv37, 3
  %idxprom = sext i32 %shr to i64
  %28 = load i8** @_l2u, align 8
  %arrayidx = getelementptr inbounds i8* %28, i64 %idxprom
  %29 = load i8* %arrayidx, align 1
  %30 = load i8** %p, align 8
  %incdec.ptr38 = getelementptr inbounds i8* %30, i32 1
  store i8* %incdec.ptr38, i8** %p, align 8
  store i8 %29, i8* %30, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %31 = load i32* @au_fd, align 4
  %32 = load i8** %plabuf, align 8
  %33 = load i32* %n.addr, align 4
  %conv39 = sext i32 %33 to i64
  %call40 = call i64 @"\01_write"(i32 %31, i8* %32, i64 %conv39)
  %34 = load i32* %n.addr, align 4
  %conv41 = sext i32 %34 to i64
  %cmp42 = icmp ne i64 %call40, %conv41
  br i1 %cmp42, label %if.then44, label %if.else45

if.then44:                                        ; preds = %while.end
  %35 = load i8** @au_file, align 8
  call void @perror(i8* %35)
  br label %if.end47

if.else45:                                        ; preds = %while.end
  %36 = load i32* %n.addr, align 4
  %37 = load i32* @au_size, align 4
  %add46 = add i32 %37, %36
  store i32 %add46, i32* @au_size, align 4
  br label %if.end47

if.end47:                                         ; preds = %if.else45, %if.then44
  %38 = load i8** %plabuf, align 8
  call void @free(i8* %38)
  br label %if.end50

if.else48:                                        ; preds = %if.then31
  %39 = load %struct.__sFILE** @__stderrp, align 8
  %40 = load i8** @program, align 8
  %call49 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %39, i8* getelementptr inbounds ([30 x i8]* @.str8, i32 0, i32 0), i8* %40)
  br label %if.end50

if.end50:                                         ; preds = %if.else48, %if.end47
  br label %if.end52

if.else51:                                        ; preds = %if.else28
  call void @abort() #3
  unreachable

if.end52:                                         ; preds = %if.end50
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.end27
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.end10
  br label %if.end55

if.end55:                                         ; preds = %if.end54, %entry
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @aufile_term() #0 {
entry:
  %here = alloca i64, align 8
  %0 = load i32* @au_fd, align 4
  %cmp = icmp sge i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end13

if.then:                                          ; preds = %entry
  %1 = load i32* @au_fd, align 4
  %call = call i64 @lseek(i32 %1, i64 0, i32 1)
  store i64 %call, i64* %here, align 8
  %2 = load i64* %here, align 8
  %cmp1 = icmp sge i64 %2, 0
  br i1 %cmp1, label %if.then2, label %if.end7

if.then2:                                         ; preds = %if.then
  %3 = load i32* @au_fd, align 4
  %4 = load i64* %here, align 8
  %call3 = call i32 @ftruncate(i32 %3, i64 %4)
  %5 = load i32* @au_fd, align 4
  %call4 = call i64 @lseek(i32 %5, i64 8, i32 0)
  %cmp5 = icmp eq i64 %call4, 8
  br i1 %cmp5, label %if.then6, label %if.end

if.then6:                                         ; preds = %if.then2
  %6 = load i32* @au_fd, align 4
  %7 = load i32* @au_size, align 4
  %conv = zext i32 %7 to i64
  call void @wblong(i32 %6, i64 %conv)
  br label %if.end

if.end:                                           ; preds = %if.then6, %if.then2
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then
  %8 = load i32* @au_fd, align 4
  %cmp8 = icmp ne i32 %8, 1
  br i1 %cmp8, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end7
  %9 = load i32* @au_fd, align 4
  %call11 = call i32 @"\01_close"(i32 %9)
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end7
  store i32 -1, i32* @au_fd, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %entry
  %10 = load i32* @linear_fd, align 4
  %cmp14 = icmp sge i32 %10, 0
  br i1 %cmp14, label %if.then16, label %if.end24

if.then16:                                        ; preds = %if.end13
  %11 = load i32* @linear_fd, align 4
  %12 = load i32* @linear_fd, align 4
  %call17 = call i64 @lseek(i32 %12, i64 0, i32 1)
  %call18 = call i32 @ftruncate(i32 %11, i64 %call17)
  %13 = load i32* @linear_fd, align 4
  %cmp19 = icmp ne i32 %13, 1
  br i1 %cmp19, label %if.then21, label %if.end23

if.then21:                                        ; preds = %if.then16
  %14 = load i32* @linear_fd, align 4
  %call22 = call i32 @"\01_close"(i32 %14)
  br label %if.end23

if.end23:                                         ; preds = %if.then21, %if.then16
  store i32 -1, i32* @linear_fd, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.end13
  ret void
}

declare i64 @lseek(i32, i64, i32) #1

declare i32 @ftruncate(i32, i64) #1

declare i32 @"\01_close"(i32) #1

declare i8* @malloc(i64) #1

declare void @free(i8*) #1

declare i32 @fprintf(%struct.__sFILE*, i8*, ...) #1

; Function Attrs: noreturn
declare void @abort() #2

attributes #0 = { nounwind ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }
