; ModuleID = 'bmhasrch.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.9.0"

@lowervec = global [256 x i8] c"\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D\0E\0F\10\11\12\13\14\15\16\17\18\19\1A\1B\1C\1D\1E\1F !\22#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\5C]^_`abcdefghijklmnopqrstuvwxyz{|}~\7Fcueaaaaceeeiiiaae\91\92ooouuyou\9B\9C\9D\9E\9Faiounn\A6\A7\A8\A9\AA\AB\AC\AD\AE\AF\B0\B1\B2\B3\B4\B5\B6\B7\B8\B9\BA\BB\BC\BD\BE\BF\C0\C1\C2\C3\C4\C5\C6\C7\C8\C9\CA\CB\CC\CD\CE\CF\D0\D1\D2\D3\D4\D5\D6\D7\D8\D9\DA\DB\DC\DD\DE\DF\E0\E1\E2\E3\E4\E5\E6\E7\E8\E9\EA\EB\EC\ED\EE\EF\F0\F1\F2\F3\F4\F5\F6\F7\F8\F9\FA\FB\FC\FD\FE\FF", align 16
@pat = internal global i8* null, align 8
@patlen = internal global i32 0, align 4
@skip = internal global [256 x i32] zeroinitializer, align 16
@skip2 = internal global i32 0, align 4

; Function Attrs: nounwind ssp uwtable
define void @bmha_init(i8* %pattern) #0 {
entry:
  %pattern.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %stop = alloca i32, align 4
  store i8* %pattern, i8** %pattern.addr, align 8
  %0 = load i8** %pattern.addr, align 8
  store i8* %0, i8** @pat, align 8
  %1 = load i8** %pattern.addr, align 8
  %call = call i64 @strlen(i8* %1)
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* @patlen, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc34, %entry
  %2 = load i32* %i, align 4
  %cmp = icmp sle i32 %2, 255
  br i1 %cmp, label %for.body, label %for.end35

for.body:                                         ; preds = %for.cond
  %3 = load i32* @patlen, align 4
  %4 = load i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [256 x i32]* @skip, i32 0, i64 %idxprom
  store i32 %3, i32* %arrayidx, align 4
  store i32 0, i32* %stop, align 4
  %5 = load i32* @patlen, align 4
  %sub = sub nsw i32 %5, 1
  store i32 %sub, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %6 = load i32* %j, align 4
  %cmp3 = icmp sge i32 %6, 0
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond2
  %7 = load i32* %stop, align 4
  %cmp5 = icmp eq i32 %7, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond2
  %8 = phi i1 [ false, %for.cond2 ], [ %cmp5, %land.rhs ]
  br i1 %8, label %for.body7, label %for.end

for.body7:                                        ; preds = %land.end
  %9 = load i32* %i, align 4
  %conv8 = trunc i32 %9 to i8
  %idxprom9 = zext i8 %conv8 to i64
  %arrayidx10 = getelementptr inbounds [256 x i8]* @lowervec, i32 0, i64 %idxprom9
  %10 = load i8* %arrayidx10, align 1
  %conv11 = zext i8 %10 to i32
  %11 = load i32* %j, align 4
  %idxprom12 = sext i32 %11 to i64
  %12 = load i8** @pat, align 8
  %arrayidx13 = getelementptr inbounds i8* %12, i64 %idxprom12
  %13 = load i8* %arrayidx13, align 1
  %idxprom14 = zext i8 %13 to i64
  %arrayidx15 = getelementptr inbounds [256 x i8]* @lowervec, i32 0, i64 %idxprom14
  %14 = load i8* %arrayidx15, align 1
  %conv16 = zext i8 %14 to i32
  %cmp17 = icmp eq i32 %conv11, %conv16
  br i1 %cmp17, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  store i32 1, i32* %stop, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body7
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i32* %j, align 4
  %dec = add nsw i32 %15, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %land.end
  %16 = load i32* %j, align 4
  %cmp19 = icmp sge i32 %16, 0
  br i1 %cmp19, label %if.then21, label %if.end26

if.then21:                                        ; preds = %for.end
  %17 = load i32* @patlen, align 4
  %18 = load i32* %j, align 4
  %sub22 = sub nsw i32 %17, %18
  %sub23 = sub nsw i32 %sub22, 1
  %19 = load i32* %i, align 4
  %idxprom24 = sext i32 %19 to i64
  %arrayidx25 = getelementptr inbounds [256 x i32]* @skip, i32 0, i64 %idxprom24
  store i32 %sub23, i32* %arrayidx25, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.then21, %for.end
  %20 = load i32* %j, align 4
  %21 = load i32* @patlen, align 4
  %sub27 = sub nsw i32 %21, 1
  %cmp28 = icmp eq i32 %20, %sub27
  br i1 %cmp28, label %if.then30, label %if.end33

if.then30:                                        ; preds = %if.end26
  %22 = load i32* %i, align 4
  %idxprom31 = sext i32 %22 to i64
  %arrayidx32 = getelementptr inbounds [256 x i32]* @skip, i32 0, i64 %idxprom31
  store i32 32767, i32* %arrayidx32, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.then30, %if.end26
  br label %for.inc34

for.inc34:                                        ; preds = %if.end33
  %23 = load i32* %i, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end35:                                        ; preds = %for.cond
  %24 = load i32* @patlen, align 4
  store i32 %24, i32* @skip2, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond36

for.cond36:                                       ; preds = %for.inc58, %for.end35
  %25 = load i32* %i, align 4
  %26 = load i32* @patlen, align 4
  %sub37 = sub nsw i32 %26, 1
  %cmp38 = icmp slt i32 %25, %sub37
  br i1 %cmp38, label %for.body40, label %for.end60

for.body40:                                       ; preds = %for.cond36
  %27 = load i32* %i, align 4
  %idxprom41 = sext i32 %27 to i64
  %28 = load i8** @pat, align 8
  %arrayidx42 = getelementptr inbounds i8* %28, i64 %idxprom41
  %29 = load i8* %arrayidx42, align 1
  %idxprom43 = zext i8 %29 to i64
  %arrayidx44 = getelementptr inbounds [256 x i8]* @lowervec, i32 0, i64 %idxprom43
  %30 = load i8* %arrayidx44, align 1
  %conv45 = zext i8 %30 to i32
  %31 = load i32* @patlen, align 4
  %sub46 = sub nsw i32 %31, 1
  %idxprom47 = sext i32 %sub46 to i64
  %32 = load i8** @pat, align 8
  %arrayidx48 = getelementptr inbounds i8* %32, i64 %idxprom47
  %33 = load i8* %arrayidx48, align 1
  %idxprom49 = zext i8 %33 to i64
  %arrayidx50 = getelementptr inbounds [256 x i8]* @lowervec, i32 0, i64 %idxprom49
  %34 = load i8* %arrayidx50, align 1
  %conv51 = zext i8 %34 to i32
  %cmp52 = icmp eq i32 %conv45, %conv51
  br i1 %cmp52, label %if.then54, label %if.end57

if.then54:                                        ; preds = %for.body40
  %35 = load i32* @patlen, align 4
  %36 = load i32* %i, align 4
  %sub55 = sub nsw i32 %35, %36
  %sub56 = sub nsw i32 %sub55, 1
  store i32 %sub56, i32* @skip2, align 4
  br label %if.end57

if.end57:                                         ; preds = %if.then54, %for.body40
  br label %for.inc58

for.inc58:                                        ; preds = %if.end57
  %37 = load i32* %i, align 4
  %inc59 = add nsw i32 %37, 1
  store i32 %inc59, i32* %i, align 4
  br label %for.cond36

for.end60:                                        ; preds = %for.cond36
  ret void
}

declare i64 @strlen(i8*) #1

; Function Attrs: nounwind ssp uwtable
define i8* @bmha_search(i8* %string, i32 %stringlen) #0 {
entry:
  %retval = alloca i8*, align 8
  %string.addr = alloca i8*, align 8
  %stringlen.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %stop = alloca i32, align 4
  %s = alloca i8*, align 8
  store i8* %string, i8** %string.addr, align 8
  store i32 %stringlen, i32* %stringlen.addr, align 4
  store i32 0, i32* %stop, align 4
  store i8* null, i8** %s, align 8
  %0 = load i32* @patlen, align 4
  %sub = sub nsw i32 %0, 1
  %1 = load i32* %stringlen.addr, align 4
  %sub1 = sub nsw i32 %sub, %1
  store i32 %sub1, i32* %i, align 4
  %2 = load i32* %i, align 4
  %cmp = icmp sge i32 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32* %stringlen.addr, align 4
  %4 = load i8** %string.addr, align 8
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds i8* %4, i64 %idx.ext
  store i8* %add.ptr, i8** %string.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end39, %if.end
  %5 = load i32* %stop, align 4
  %cmp2 = icmp eq i32 %5, 0
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %6 = load i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load i8** %string.addr, align 8
  %arrayidx = getelementptr inbounds i8* %7, i64 %idxprom
  %8 = load i8* %arrayidx, align 1
  %idxprom3 = zext i8 %8 to i64
  %arrayidx4 = getelementptr inbounds [256 x i32]* @skip, i32 0, i64 %idxprom3
  %9 = load i32* %arrayidx4, align 4
  %10 = load i32* %i, align 4
  %add = add nsw i32 %10, %9
  store i32 %add, i32* %i, align 4
  %cmp5 = icmp slt i32 %add, 0
  br i1 %cmp5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %11 = load i32* %i, align 4
  %12 = load i32* %stringlen.addr, align 4
  %sub6 = sub nsw i32 32767, %12
  %cmp7 = icmp slt i32 %11, %sub6
  br i1 %cmp7, label %if.then8, label %if.else

if.then8:                                         ; preds = %while.end
  store i32 1, i32* %stop, align 4
  store i8* null, i8** %s, align 8
  br label %if.end39

if.else:                                          ; preds = %while.end
  %13 = load i32* %i, align 4
  %sub9 = sub nsw i32 %13, 32767
  store i32 %sub9, i32* %i, align 4
  %14 = load i32* @patlen, align 4
  %sub10 = sub nsw i32 %14, 1
  store i32 %sub10, i32* %j, align 4
  %15 = load i8** %string.addr, align 8
  %16 = load i32* %i, align 4
  %17 = load i32* %j, align 4
  %sub11 = sub nsw i32 %16, %17
  %idx.ext12 = sext i32 %sub11 to i64
  %add.ptr13 = getelementptr inbounds i8* %15, i64 %idx.ext12
  store i8* %add.ptr13, i8** %s, align 8
  br label %while.cond14

while.cond14:                                     ; preds = %while.body27, %if.else
  %18 = load i32* %j, align 4
  %dec = add nsw i32 %18, -1
  store i32 %dec, i32* %j, align 4
  %cmp15 = icmp sge i32 %dec, 0
  br i1 %cmp15, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond14
  %19 = load i32* %j, align 4
  %idxprom16 = sext i32 %19 to i64
  %20 = load i8** %s, align 8
  %arrayidx17 = getelementptr inbounds i8* %20, i64 %idxprom16
  %21 = load i8* %arrayidx17, align 1
  %idxprom18 = zext i8 %21 to i64
  %arrayidx19 = getelementptr inbounds [256 x i8]* @lowervec, i32 0, i64 %idxprom18
  %22 = load i8* %arrayidx19, align 1
  %conv = zext i8 %22 to i32
  %23 = load i32* %j, align 4
  %idxprom20 = sext i32 %23 to i64
  %24 = load i8** @pat, align 8
  %arrayidx21 = getelementptr inbounds i8* %24, i64 %idxprom20
  %25 = load i8* %arrayidx21, align 1
  %idxprom22 = zext i8 %25 to i64
  %arrayidx23 = getelementptr inbounds [256 x i8]* @lowervec, i32 0, i64 %idxprom22
  %26 = load i8* %arrayidx23, align 1
  %conv24 = zext i8 %26 to i32
  %cmp25 = icmp eq i32 %conv, %conv24
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond14
  %27 = phi i1 [ false, %while.cond14 ], [ %cmp25, %land.rhs ]
  br i1 %27, label %while.body27, label %while.end28

while.body27:                                     ; preds = %land.end
  br label %while.cond14

while.end28:                                      ; preds = %land.end
  %28 = load i32* %j, align 4
  %cmp29 = icmp slt i32 %28, 0
  br i1 %cmp29, label %if.then31, label %if.else32

if.then31:                                        ; preds = %while.end28
  store i32 1, i32* %stop, align 4
  br label %if.end38

if.else32:                                        ; preds = %while.end28
  %29 = load i32* @skip2, align 4
  %30 = load i32* %i, align 4
  %add33 = add nsw i32 %30, %29
  store i32 %add33, i32* %i, align 4
  %cmp34 = icmp sge i32 %add33, 0
  br i1 %cmp34, label %if.then36, label %if.end37

if.then36:                                        ; preds = %if.else32
  store i32 1, i32* %stop, align 4
  store i8* null, i8** %s, align 8
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %if.else32
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %if.then31
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %if.then8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %31 = load i8** %s, align 8
  store i8* %31, i8** %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %32 = load i8** %retval
  ret i8* %32
}

attributes #0 = { nounwind ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
