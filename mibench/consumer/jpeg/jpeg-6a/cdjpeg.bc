; ModuleID = 'cdjpeg.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.9.0"

%struct.__sFILE = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, i8*, i32 (i8*)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i32 (i8*, i8*, i32)*, %struct.__sbuf, %struct.__sFILEX*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i64 }
%struct.__sbuf = type { i8*, i32 }
%struct.__sFILEX = type opaque

@__stdinp = external global %struct.__sFILE*
@__stdoutp = external global %struct.__sFILE*

; Function Attrs: nounwind ssp uwtable
define i32 @keymatch(i8* %arg, i8* %keyword, i32 %minchars) #0 {
entry:
  %retval = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %keyword.addr = alloca i8*, align 8
  %minchars.addr = alloca i32, align 4
  %ca = alloca i32, align 4
  %ck = alloca i32, align 4
  %nmatched = alloca i32, align 4
  store i8* %arg, i8** %arg.addr, align 8
  store i8* %keyword, i8** %keyword.addr, align 8
  store i32 %minchars, i32* %minchars.addr, align 4
  store i32 0, i32* %nmatched, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end12, %entry
  %0 = load i8** %arg.addr, align 8
  %incdec.ptr = getelementptr inbounds i8* %0, i32 1
  store i8* %incdec.ptr, i8** %arg.addr, align 8
  %1 = load i8* %0, align 1
  %conv = sext i8 %1 to i32
  store i32 %conv, i32* %ca, align 4
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8** %keyword.addr, align 8
  %incdec.ptr2 = getelementptr inbounds i8* %2, i32 1
  store i8* %incdec.ptr2, i8** %keyword.addr, align 8
  %3 = load i8* %2, align 1
  %conv3 = sext i8 %3 to i32
  store i32 %conv3, i32* %ck, align 4
  %cmp4 = icmp eq i32 %conv3, 0
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %while.body
  %4 = load i32* %ca, align 4
  %call = call i32 @isupper(i32 %4)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %5 = load i32* %ca, align 4
  %call7 = call i32 @tolower(i32 %5)
  store i32 %call7, i32* %ca, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.end
  %6 = load i32* %ca, align 4
  %7 = load i32* %ck, align 4
  %cmp9 = icmp ne i32 %6, %7
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end8
  store i32 0, i32* %retval
  br label %return

if.end12:                                         ; preds = %if.end8
  %8 = load i32* %nmatched, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %nmatched, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %9 = load i32* %nmatched, align 4
  %10 = load i32* %minchars.addr, align 4
  %cmp13 = icmp slt i32 %9, %10
  br i1 %cmp13, label %if.then15, label %if.end16

if.then15:                                        ; preds = %while.end
  store i32 0, i32* %retval
  br label %return

if.end16:                                         ; preds = %while.end
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end16, %if.then15, %if.then11, %if.then
  %11 = load i32* %retval
  ret i32 %11
}

declare i32 @isupper(i32) #1

declare i32 @tolower(i32) #1

; Function Attrs: nounwind ssp uwtable
define %struct.__sFILE* @read_stdin() #0 {
entry:
  %input_file = alloca %struct.__sFILE*, align 8
  %0 = load %struct.__sFILE** @__stdinp, align 8
  store %struct.__sFILE* %0, %struct.__sFILE** %input_file, align 8
  %1 = load %struct.__sFILE** %input_file, align 8
  ret %struct.__sFILE* %1
}

; Function Attrs: nounwind ssp uwtable
define %struct.__sFILE* @write_stdout() #0 {
entry:
  %output_file = alloca %struct.__sFILE*, align 8
  %0 = load %struct.__sFILE** @__stdoutp, align 8
  store %struct.__sFILE* %0, %struct.__sFILE** %output_file, align 8
  %1 = load %struct.__sFILE** %output_file, align 8
  ret %struct.__sFILE* %1
}

attributes #0 = { nounwind ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
