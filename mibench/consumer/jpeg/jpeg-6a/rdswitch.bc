; ModuleID = 'rdswitch.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.9.0"

%struct.__sFILE = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, i8*, i32 (i8*)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i32 (i8*, i8*, i32)*, %struct.__sbuf, %struct.__sFILEX*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i64 }
%struct.__sbuf = type { i8*, i32 }
%struct.__sFILEX = type opaque
%struct.jpeg_compress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32, %struct.jpeg_destination_mgr*, i32, i32, i32, i32, double, i32, i32, i32, %struct.jpeg_component_info*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], [16 x i8], [16 x i8], [16 x i8], i32, %struct.jpeg_scan_info*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i16, i16, i32, i32, i32, i32, i32, i32, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, %struct.jpeg_comp_master*, %struct.jpeg_c_main_controller*, %struct.jpeg_c_prep_controller*, %struct.jpeg_c_coef_controller*, %struct.jpeg_marker_writer*, %struct.jpeg_color_converter*, %struct.jpeg_downsampler*, %struct.jpeg_forward_dct*, %struct.jpeg_entropy_encoder* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32 }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_destination_mgr = type { i8*, i64, void (%struct.jpeg_compress_struct*)*, i32 (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)* }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_scan_info = type { i32, [4 x i32], i32, i32, i32, i32 }
%struct.jpeg_comp_master = type opaque
%struct.jpeg_c_main_controller = type opaque
%struct.jpeg_c_prep_controller = type opaque
%struct.jpeg_c_coef_controller = type opaque
%struct.jpeg_marker_writer = type opaque
%struct.jpeg_color_converter = type opaque
%struct.jpeg_downsampler = type opaque
%struct.jpeg_forward_dct = type opaque
%struct.jpeg_entropy_encoder = type opaque

@.str = private unnamed_addr constant [2 x i8] c"r\00", align 1
@__stderrp = external global %struct.__sFILE*
@.str1 = private unnamed_addr constant [26 x i8] c"Can't open table file %s\0A\00", align 1
@.str2 = private unnamed_addr constant [28 x i8] c"Too many tables in file %s\0A\00", align 1
@.str3 = private unnamed_addr constant [31 x i8] c"Invalid table data in file %s\0A\00", align 1
@.str4 = private unnamed_addr constant [29 x i8] c"Non-numeric data in file %s\0A\00", align 1
@.str5 = private unnamed_addr constant [36 x i8] c"Can't open scan definition file %s\0A\00", align 1
@.str6 = private unnamed_addr constant [35 x i8] c"Too many scans defined in file %s\0A\00", align 1
@.str7 = private unnamed_addr constant [44 x i8] c"Too many components in one scan in file %s\0A\00", align 1
@.str8 = private unnamed_addr constant [38 x i8] c"Invalid scan entry format in file %s\0A\00", align 1
@.str9 = private unnamed_addr constant [5 x i8] c"%d%c\00", align 1
@.str10 = private unnamed_addr constant [45 x i8] c"JPEG quantization tables are numbered 0..%d\0A\00", align 1
@.str11 = private unnamed_addr constant [9 x i8] c"%d%c%d%c\00", align 1
@.str12 = private unnamed_addr constant [36 x i8] c"JPEG sampling factors must be 1..4\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define i32 @read_quant_tables(%struct.jpeg_compress_struct* %cinfo, i8* %filename, i32 %scale_factor, i32 %force_baseline) #0 {
entry:
  %retval = alloca i32, align 4
  %cinfo.addr = alloca %struct.jpeg_compress_struct*, align 8
  %filename.addr = alloca i8*, align 8
  %scale_factor.addr = alloca i32, align 4
  %force_baseline.addr = alloca i32, align 4
  %fp = alloca %struct.__sFILE*, align 8
  %tblno = alloca i32, align 4
  %i = alloca i32, align 4
  %termchar = alloca i32, align 4
  %val = alloca i64, align 8
  %table = alloca [64 x i32], align 16
  store %struct.jpeg_compress_struct* %cinfo, %struct.jpeg_compress_struct** %cinfo.addr, align 8
  store i8* %filename, i8** %filename.addr, align 8
  store i32 %scale_factor, i32* %scale_factor.addr, align 4
  store i32 %force_baseline, i32* %force_baseline.addr, align 4
  %0 = load i8** %filename.addr, align 8
  %call = call %struct.__sFILE* @"\01_fopen"(i8* %0, i8* getelementptr inbounds ([2 x i8]* @.str, i32 0, i32 0))
  store %struct.__sFILE* %call, %struct.__sFILE** %fp, align 8
  %cmp = icmp eq %struct.__sFILE* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.__sFILE** @__stderrp, align 8
  %2 = load i8** %filename.addr, align 8
  %call1 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %1, i8* getelementptr inbounds ([26 x i8]* @.str1, i32 0, i32 0), i8* %2)
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %tblno, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end, %if.end
  %3 = load %struct.__sFILE** %fp, align 8
  %call2 = call i32 @read_text_integer(%struct.__sFILE* %3, i64* %val, i32* %termchar)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32* %tblno, align 4
  %cmp3 = icmp sge i32 %4, 4
  br i1 %cmp3, label %if.then4, label %if.end7

if.then4:                                         ; preds = %while.body
  %5 = load %struct.__sFILE** @__stderrp, align 8
  %6 = load i8** %filename.addr, align 8
  %call5 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %5, i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* %6)
  %7 = load %struct.__sFILE** %fp, align 8
  %call6 = call i32 @fclose(%struct.__sFILE* %7)
  store i32 0, i32* %retval
  br label %return

if.end7:                                          ; preds = %while.body
  %8 = load i64* %val, align 8
  %conv = trunc i64 %8 to i32
  %arrayidx = getelementptr inbounds [64 x i32]* %table, i32 0, i64 0
  store i32 %conv, i32* %arrayidx, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end7
  %9 = load i32* %i, align 4
  %cmp8 = icmp slt i32 %9, 64
  br i1 %cmp8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load %struct.__sFILE** %fp, align 8
  %call10 = call i32 @read_text_integer(%struct.__sFILE* %10, i64* %val, i32* %termchar)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %if.end15, label %if.then12

if.then12:                                        ; preds = %for.body
  %11 = load %struct.__sFILE** @__stderrp, align 8
  %12 = load i8** %filename.addr, align 8
  %call13 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %11, i8* getelementptr inbounds ([31 x i8]* @.str3, i32 0, i32 0), i8* %12)
  %13 = load %struct.__sFILE** %fp, align 8
  %call14 = call i32 @fclose(%struct.__sFILE* %13)
  store i32 0, i32* %retval
  br label %return

if.end15:                                         ; preds = %for.body
  %14 = load i64* %val, align 8
  %conv16 = trunc i64 %14 to i32
  %15 = load i32* %i, align 4
  %idxprom = sext i32 %15 to i64
  %arrayidx17 = getelementptr inbounds [64 x i32]* %table, i32 0, i64 %idxprom
  store i32 %conv16, i32* %arrayidx17, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end15
  %16 = load i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load %struct.jpeg_compress_struct** %cinfo.addr, align 8
  %18 = load i32* %tblno, align 4
  %arraydecay = getelementptr inbounds [64 x i32]* %table, i32 0, i32 0
  %19 = load i32* %scale_factor.addr, align 4
  %20 = load i32* %force_baseline.addr, align 4
  call void @jpeg_add_quant_table(%struct.jpeg_compress_struct* %17, i32 %18, i32* %arraydecay, i32 %19, i32 %20)
  %21 = load i32* %tblno, align 4
  %inc18 = add nsw i32 %21, 1
  store i32 %inc18, i32* %tblno, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load i32* %termchar, align 4
  %cmp19 = icmp ne i32 %22, -1
  br i1 %cmp19, label %if.then21, label %if.end24

if.then21:                                        ; preds = %while.end
  %23 = load %struct.__sFILE** @__stderrp, align 8
  %24 = load i8** %filename.addr, align 8
  %call22 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %23, i8* getelementptr inbounds ([29 x i8]* @.str4, i32 0, i32 0), i8* %24)
  %25 = load %struct.__sFILE** %fp, align 8
  %call23 = call i32 @fclose(%struct.__sFILE* %25)
  store i32 0, i32* %retval
  br label %return

if.end24:                                         ; preds = %while.end
  %26 = load %struct.__sFILE** %fp, align 8
  %call25 = call i32 @fclose(%struct.__sFILE* %26)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end24, %if.then21, %if.then12, %if.then4, %if.then
  %27 = load i32* %retval
  ret i32 %27
}

declare %struct.__sFILE* @"\01_fopen"(i8*, i8*) #1

declare i32 @fprintf(%struct.__sFILE*, i8*, ...) #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @read_text_integer(%struct.__sFILE* %file, i64* %result, i32* %termchar) #0 {
entry:
  %retval = alloca i32, align 4
  %file.addr = alloca %struct.__sFILE*, align 8
  %result.addr = alloca i64*, align 8
  %termchar.addr = alloca i32*, align 8
  %ch = alloca i32, align 4
  %val = alloca i64, align 8
  store %struct.__sFILE* %file, %struct.__sFILE** %file.addr, align 8
  store i64* %result, i64** %result.addr, align 8
  store i32* %termchar, i32** %termchar.addr, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %0 = load %struct.__sFILE** %file.addr, align 8
  %call = call i32 @text_getc(%struct.__sFILE* %0)
  store i32 %call, i32* %ch, align 4
  %1 = load i32* %ch, align 4
  %cmp = icmp eq i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %2 = load i32* %ch, align 4
  %3 = load i32** %termchar.addr, align 8
  store i32 %2, i32* %3, align 4
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end
  %4 = load i32* %ch, align 4
  %call1 = call i32 @isspace(i32 %4)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %5 = load i32* %ch, align 4
  %call2 = call i32 @isdigit(i32 %5)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.end5, label %if.then4

if.then4:                                         ; preds = %do.end
  %6 = load i32* %ch, align 4
  %7 = load i32** %termchar.addr, align 8
  store i32 %6, i32* %7, align 4
  store i32 0, i32* %retval
  br label %return

if.end5:                                          ; preds = %do.end
  %8 = load i32* %ch, align 4
  %sub = sub nsw i32 %8, 48
  %conv = sext i32 %sub to i64
  store i64 %conv, i64* %val, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end12, %if.end5
  %9 = load %struct.__sFILE** %file.addr, align 8
  %call6 = call i32 @text_getc(%struct.__sFILE* %9)
  store i32 %call6, i32* %ch, align 4
  %cmp7 = icmp ne i32 %call6, -1
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %10 = load i32* %ch, align 4
  %call9 = call i32 @isdigit(i32 %10)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.end12, label %if.then11

if.then11:                                        ; preds = %while.body
  br label %while.end

if.end12:                                         ; preds = %while.body
  %11 = load i64* %val, align 8
  %mul = mul nsw i64 %11, 10
  store i64 %mul, i64* %val, align 8
  %12 = load i32* %ch, align 4
  %sub13 = sub nsw i32 %12, 48
  %conv14 = sext i32 %sub13 to i64
  %13 = load i64* %val, align 8
  %add = add nsw i64 %13, %conv14
  store i64 %add, i64* %val, align 8
  br label %while.cond

while.end:                                        ; preds = %if.then11, %while.cond
  %14 = load i64* %val, align 8
  %15 = load i64** %result.addr, align 8
  store i64 %14, i64* %15, align 8
  %16 = load i32* %ch, align 4
  %17 = load i32** %termchar.addr, align 8
  store i32 %16, i32* %17, align 4
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then4, %if.then
  %18 = load i32* %retval
  ret i32 %18
}

declare i32 @fclose(%struct.__sFILE*) #1

declare void @jpeg_add_quant_table(%struct.jpeg_compress_struct*, i32, i32*, i32, i32) #1

; Function Attrs: nounwind ssp uwtable
define i32 @read_scan_script(%struct.jpeg_compress_struct* %cinfo, i8* %filename) #0 {
entry:
  %retval = alloca i32, align 4
  %cinfo.addr = alloca %struct.jpeg_compress_struct*, align 8
  %filename.addr = alloca i8*, align 8
  %fp = alloca %struct.__sFILE*, align 8
  %scanno = alloca i32, align 4
  %ncomps = alloca i32, align 4
  %termchar = alloca i32, align 4
  %val = alloca i64, align 8
  %scanptr = alloca %struct.jpeg_scan_info*, align 8
  %scans = alloca [100 x %struct.jpeg_scan_info], align 16
  store %struct.jpeg_compress_struct* %cinfo, %struct.jpeg_compress_struct** %cinfo.addr, align 8
  store i8* %filename, i8** %filename.addr, align 8
  %0 = load i8** %filename.addr, align 8
  %call = call %struct.__sFILE* @"\01_fopen"(i8* %0, i8* getelementptr inbounds ([2 x i8]* @.str, i32 0, i32 0))
  store %struct.__sFILE* %call, %struct.__sFILE** %fp, align 8
  %cmp = icmp eq %struct.__sFILE* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.__sFILE** @__stderrp, align 8
  %2 = load i8** %filename.addr, align 8
  %call1 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %1, i8* getelementptr inbounds ([36 x i8]* @.str5, i32 0, i32 0), i8* %2)
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %arraydecay = getelementptr inbounds [100 x %struct.jpeg_scan_info]* %scans, i32 0, i32 0
  store %struct.jpeg_scan_info* %arraydecay, %struct.jpeg_scan_info** %scanptr, align 8
  store i32 0, i32* %scanno, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end68, %if.end
  %3 = load %struct.__sFILE** %fp, align 8
  %call2 = call i32 @read_scan_integer(%struct.__sFILE* %3, i64* %val, i32* %termchar)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %while.body, label %while.end70

while.body:                                       ; preds = %while.cond
  %4 = load i32* %scanno, align 4
  %cmp3 = icmp sge i32 %4, 100
  br i1 %cmp3, label %if.then4, label %if.end7

if.then4:                                         ; preds = %while.body
  %5 = load %struct.__sFILE** @__stderrp, align 8
  %6 = load i8** %filename.addr, align 8
  %call5 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %5, i8* getelementptr inbounds ([35 x i8]* @.str6, i32 0, i32 0), i8* %6)
  %7 = load %struct.__sFILE** %fp, align 8
  %call6 = call i32 @fclose(%struct.__sFILE* %7)
  store i32 0, i32* %retval
  br label %return

if.end7:                                          ; preds = %while.body
  %8 = load i64* %val, align 8
  %conv = trunc i64 %8 to i32
  %9 = load %struct.jpeg_scan_info** %scanptr, align 8
  %component_index = getelementptr inbounds %struct.jpeg_scan_info* %9, i32 0, i32 1
  %arrayidx = getelementptr inbounds [4 x i32]* %component_index, i32 0, i64 0
  store i32 %conv, i32* %arrayidx, align 4
  store i32 1, i32* %ncomps, align 4
  br label %while.cond8

while.cond8:                                      ; preds = %if.end21, %if.end7
  %10 = load i32* %termchar, align 4
  %cmp9 = icmp eq i32 %10, 32
  br i1 %cmp9, label %while.body11, label %while.end

while.body11:                                     ; preds = %while.cond8
  %11 = load i32* %ncomps, align 4
  %cmp12 = icmp sge i32 %11, 4
  br i1 %cmp12, label %if.then14, label %if.end17

if.then14:                                        ; preds = %while.body11
  %12 = load %struct.__sFILE** @__stderrp, align 8
  %13 = load i8** %filename.addr, align 8
  %call15 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %12, i8* getelementptr inbounds ([44 x i8]* @.str7, i32 0, i32 0), i8* %13)
  %14 = load %struct.__sFILE** %fp, align 8
  %call16 = call i32 @fclose(%struct.__sFILE* %14)
  store i32 0, i32* %retval
  br label %return

if.end17:                                         ; preds = %while.body11
  %15 = load %struct.__sFILE** %fp, align 8
  %call18 = call i32 @read_scan_integer(%struct.__sFILE* %15, i64* %val, i32* %termchar)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.end21, label %if.then20

if.then20:                                        ; preds = %if.end17
  br label %bogus

if.end21:                                         ; preds = %if.end17
  %16 = load i64* %val, align 8
  %conv22 = trunc i64 %16 to i32
  %17 = load i32* %ncomps, align 4
  %idxprom = sext i32 %17 to i64
  %18 = load %struct.jpeg_scan_info** %scanptr, align 8
  %component_index23 = getelementptr inbounds %struct.jpeg_scan_info* %18, i32 0, i32 1
  %arrayidx24 = getelementptr inbounds [4 x i32]* %component_index23, i32 0, i64 %idxprom
  store i32 %conv22, i32* %arrayidx24, align 4
  %19 = load i32* %ncomps, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %ncomps, align 4
  br label %while.cond8

while.end:                                        ; preds = %while.cond8
  %20 = load i32* %ncomps, align 4
  %21 = load %struct.jpeg_scan_info** %scanptr, align 8
  %comps_in_scan = getelementptr inbounds %struct.jpeg_scan_info* %21, i32 0, i32 0
  store i32 %20, i32* %comps_in_scan, align 4
  %22 = load i32* %termchar, align 4
  %cmp25 = icmp eq i32 %22, 58
  br i1 %cmp25, label %if.then27, label %if.else

if.then27:                                        ; preds = %while.end
  %23 = load %struct.__sFILE** %fp, align 8
  %call28 = call i32 @read_scan_integer(%struct.__sFILE* %23, i64* %val, i32* %termchar)
  %tobool29 = icmp ne i32 %call28, 0
  br i1 %tobool29, label %lor.lhs.false, label %if.then32

lor.lhs.false:                                    ; preds = %if.then27
  %24 = load i32* %termchar, align 4
  %cmp30 = icmp ne i32 %24, 32
  br i1 %cmp30, label %if.then32, label %if.end33

if.then32:                                        ; preds = %lor.lhs.false, %if.then27
  br label %bogus

if.end33:                                         ; preds = %lor.lhs.false
  %25 = load i64* %val, align 8
  %conv34 = trunc i64 %25 to i32
  %26 = load %struct.jpeg_scan_info** %scanptr, align 8
  %Ss = getelementptr inbounds %struct.jpeg_scan_info* %26, i32 0, i32 2
  store i32 %conv34, i32* %Ss, align 4
  %27 = load %struct.__sFILE** %fp, align 8
  %call35 = call i32 @read_scan_integer(%struct.__sFILE* %27, i64* %val, i32* %termchar)
  %tobool36 = icmp ne i32 %call35, 0
  br i1 %tobool36, label %lor.lhs.false37, label %if.then40

lor.lhs.false37:                                  ; preds = %if.end33
  %28 = load i32* %termchar, align 4
  %cmp38 = icmp ne i32 %28, 32
  br i1 %cmp38, label %if.then40, label %if.end41

if.then40:                                        ; preds = %lor.lhs.false37, %if.end33
  br label %bogus

if.end41:                                         ; preds = %lor.lhs.false37
  %29 = load i64* %val, align 8
  %conv42 = trunc i64 %29 to i32
  %30 = load %struct.jpeg_scan_info** %scanptr, align 8
  %Se = getelementptr inbounds %struct.jpeg_scan_info* %30, i32 0, i32 3
  store i32 %conv42, i32* %Se, align 4
  %31 = load %struct.__sFILE** %fp, align 8
  %call43 = call i32 @read_scan_integer(%struct.__sFILE* %31, i64* %val, i32* %termchar)
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %lor.lhs.false45, label %if.then48

lor.lhs.false45:                                  ; preds = %if.end41
  %32 = load i32* %termchar, align 4
  %cmp46 = icmp ne i32 %32, 32
  br i1 %cmp46, label %if.then48, label %if.end49

if.then48:                                        ; preds = %lor.lhs.false45, %if.end41
  br label %bogus

if.end49:                                         ; preds = %lor.lhs.false45
  %33 = load i64* %val, align 8
  %conv50 = trunc i64 %33 to i32
  %34 = load %struct.jpeg_scan_info** %scanptr, align 8
  %Ah = getelementptr inbounds %struct.jpeg_scan_info* %34, i32 0, i32 4
  store i32 %conv50, i32* %Ah, align 4
  %35 = load %struct.__sFILE** %fp, align 8
  %call51 = call i32 @read_scan_integer(%struct.__sFILE* %35, i64* %val, i32* %termchar)
  %tobool52 = icmp ne i32 %call51, 0
  br i1 %tobool52, label %if.end54, label %if.then53

if.then53:                                        ; preds = %if.end49
  br label %bogus

if.end54:                                         ; preds = %if.end49
  %36 = load i64* %val, align 8
  %conv55 = trunc i64 %36 to i32
  %37 = load %struct.jpeg_scan_info** %scanptr, align 8
  %Al = getelementptr inbounds %struct.jpeg_scan_info* %37, i32 0, i32 5
  store i32 %conv55, i32* %Al, align 4
  br label %if.end60

if.else:                                          ; preds = %while.end
  %38 = load %struct.jpeg_scan_info** %scanptr, align 8
  %Ss56 = getelementptr inbounds %struct.jpeg_scan_info* %38, i32 0, i32 2
  store i32 0, i32* %Ss56, align 4
  %39 = load %struct.jpeg_scan_info** %scanptr, align 8
  %Se57 = getelementptr inbounds %struct.jpeg_scan_info* %39, i32 0, i32 3
  store i32 63, i32* %Se57, align 4
  %40 = load %struct.jpeg_scan_info** %scanptr, align 8
  %Ah58 = getelementptr inbounds %struct.jpeg_scan_info* %40, i32 0, i32 4
  store i32 0, i32* %Ah58, align 4
  %41 = load %struct.jpeg_scan_info** %scanptr, align 8
  %Al59 = getelementptr inbounds %struct.jpeg_scan_info* %41, i32 0, i32 5
  store i32 0, i32* %Al59, align 4
  br label %if.end60

if.end60:                                         ; preds = %if.else, %if.end54
  %42 = load i32* %termchar, align 4
  %cmp61 = icmp ne i32 %42, 59
  br i1 %cmp61, label %land.lhs.true, label %if.end68

land.lhs.true:                                    ; preds = %if.end60
  %43 = load i32* %termchar, align 4
  %cmp63 = icmp ne i32 %43, -1
  br i1 %cmp63, label %if.then65, label %if.end68

if.then65:                                        ; preds = %land.lhs.true
  br label %bogus

bogus:                                            ; preds = %if.then65, %if.then53, %if.then48, %if.then40, %if.then32, %if.then20
  %44 = load %struct.__sFILE** @__stderrp, align 8
  %45 = load i8** %filename.addr, align 8
  %call66 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %44, i8* getelementptr inbounds ([38 x i8]* @.str8, i32 0, i32 0), i8* %45)
  %46 = load %struct.__sFILE** %fp, align 8
  %call67 = call i32 @fclose(%struct.__sFILE* %46)
  store i32 0, i32* %retval
  br label %return

if.end68:                                         ; preds = %land.lhs.true, %if.end60
  %47 = load %struct.jpeg_scan_info** %scanptr, align 8
  %incdec.ptr = getelementptr inbounds %struct.jpeg_scan_info* %47, i32 1
  store %struct.jpeg_scan_info* %incdec.ptr, %struct.jpeg_scan_info** %scanptr, align 8
  %48 = load i32* %scanno, align 4
  %inc69 = add nsw i32 %48, 1
  store i32 %inc69, i32* %scanno, align 4
  br label %while.cond

while.end70:                                      ; preds = %while.cond
  %49 = load i32* %termchar, align 4
  %cmp71 = icmp ne i32 %49, -1
  br i1 %cmp71, label %if.then73, label %if.end76

if.then73:                                        ; preds = %while.end70
  %50 = load %struct.__sFILE** @__stderrp, align 8
  %51 = load i8** %filename.addr, align 8
  %call74 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %50, i8* getelementptr inbounds ([29 x i8]* @.str4, i32 0, i32 0), i8* %51)
  %52 = load %struct.__sFILE** %fp, align 8
  %call75 = call i32 @fclose(%struct.__sFILE* %52)
  store i32 0, i32* %retval
  br label %return

if.end76:                                         ; preds = %while.end70
  %53 = load i32* %scanno, align 4
  %cmp77 = icmp sgt i32 %53, 0
  br i1 %cmp77, label %if.then79, label %if.end86

if.then79:                                        ; preds = %if.end76
  %54 = load %struct.jpeg_compress_struct** %cinfo.addr, align 8
  %mem = getelementptr inbounds %struct.jpeg_compress_struct* %54, i32 0, i32 1
  %55 = load %struct.jpeg_memory_mgr** %mem, align 8
  %alloc_small = getelementptr inbounds %struct.jpeg_memory_mgr* %55, i32 0, i32 0
  %56 = load i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small, align 8
  %57 = load %struct.jpeg_compress_struct** %cinfo.addr, align 8
  %58 = bitcast %struct.jpeg_compress_struct* %57 to %struct.jpeg_common_struct*
  %59 = load i32* %scanno, align 4
  %conv80 = sext i32 %59 to i64
  %mul = mul i64 %conv80, 36
  %call81 = call i8* %56(%struct.jpeg_common_struct* %58, i32 1, i64 %mul)
  %60 = bitcast i8* %call81 to %struct.jpeg_scan_info*
  store %struct.jpeg_scan_info* %60, %struct.jpeg_scan_info** %scanptr, align 8
  %61 = load %struct.jpeg_scan_info** %scanptr, align 8
  %62 = bitcast %struct.jpeg_scan_info* %61 to i8*
  %arraydecay82 = getelementptr inbounds [100 x %struct.jpeg_scan_info]* %scans, i32 0, i32 0
  %63 = bitcast %struct.jpeg_scan_info* %arraydecay82 to i8*
  %64 = load i32* %scanno, align 4
  %conv83 = sext i32 %64 to i64
  %mul84 = mul i64 %conv83, 36
  %65 = load %struct.jpeg_scan_info** %scanptr, align 8
  %66 = bitcast %struct.jpeg_scan_info* %65 to i8*
  %67 = call i64 @llvm.objectsize.i64(i8* %66, i1 false)
  %call85 = call i8* @__memcpy_chk(i8* %62, i8* %63, i64 %mul84, i64 %67) #4
  %68 = load %struct.jpeg_scan_info** %scanptr, align 8
  %69 = load %struct.jpeg_compress_struct** %cinfo.addr, align 8
  %scan_info = getelementptr inbounds %struct.jpeg_compress_struct* %69, i32 0, i32 22
  store %struct.jpeg_scan_info* %68, %struct.jpeg_scan_info** %scan_info, align 8
  %70 = load i32* %scanno, align 4
  %71 = load %struct.jpeg_compress_struct** %cinfo.addr, align 8
  %num_scans = getelementptr inbounds %struct.jpeg_compress_struct* %71, i32 0, i32 21
  store i32 %70, i32* %num_scans, align 4
  br label %if.end86

if.end86:                                         ; preds = %if.then79, %if.end76
  %72 = load %struct.__sFILE** %fp, align 8
  %call87 = call i32 @fclose(%struct.__sFILE* %72)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end86, %if.then73, %bogus, %if.then14, %if.then4, %if.then
  %73 = load i32* %retval
  ret i32 %73
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @read_scan_integer(%struct.__sFILE* %file, i64* %result, i32* %termchar) #0 {
entry:
  %retval = alloca i32, align 4
  %file.addr = alloca %struct.__sFILE*, align 8
  %result.addr = alloca i64*, align 8
  %termchar.addr = alloca i32*, align 8
  %ch = alloca i32, align 4
  store %struct.__sFILE* %file, %struct.__sFILE** %file.addr, align 8
  store i64* %result, i64** %result.addr, align 8
  store i32* %termchar, i32** %termchar.addr, align 8
  %0 = load %struct.__sFILE** %file.addr, align 8
  %1 = load i64** %result.addr, align 8
  %2 = load i32** %termchar.addr, align 8
  %call = call i32 @read_text_integer(%struct.__sFILE* %0, i64* %1, i32* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32** %termchar.addr, align 8
  %4 = load i32* %3, align 4
  store i32 %4, i32* %ch, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %5 = load i32* %ch, align 4
  %cmp = icmp ne i32 %5, -1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %6 = load i32* %ch, align 4
  %call1 = call i32 @isspace(i32 %6)
  %tobool2 = icmp ne i32 %call1, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ]
  br i1 %7, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %8 = load %struct.__sFILE** %file.addr, align 8
  %call3 = call i32 @text_getc(%struct.__sFILE* %8)
  store i32 %call3, i32* %ch, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  %9 = load i32* %ch, align 4
  %call4 = call i32 @isdigit(i32 %9)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then6, label %if.else

if.then6:                                         ; preds = %while.end
  %10 = load i32* %ch, align 4
  %11 = load %struct.__sFILE** %file.addr, align 8
  %call7 = call i32 @ungetc(i32 %10, %struct.__sFILE* %11)
  %cmp8 = icmp eq i32 %call7, -1
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.then6
  store i32 0, i32* %retval
  br label %return

if.end10:                                         ; preds = %if.then6
  store i32 32, i32* %ch, align 4
  br label %if.end17

if.else:                                          ; preds = %while.end
  %12 = load i32* %ch, align 4
  %cmp11 = icmp ne i32 %12, -1
  br i1 %cmp11, label %land.lhs.true, label %if.end16

land.lhs.true:                                    ; preds = %if.else
  %13 = load i32* %ch, align 4
  %cmp12 = icmp ne i32 %13, 59
  br i1 %cmp12, label %land.lhs.true13, label %if.end16

land.lhs.true13:                                  ; preds = %land.lhs.true
  %14 = load i32* %ch, align 4
  %cmp14 = icmp ne i32 %14, 58
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %land.lhs.true13
  store i32 32, i32* %ch, align 4
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %land.lhs.true13, %land.lhs.true, %if.else
  br label %if.end17

if.end17:                                         ; preds = %if.end16, %if.end10
  %15 = load i32* %ch, align 4
  %16 = load i32** %termchar.addr, align 8
  store i32 %15, i32* %16, align 4
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end17, %if.then9, %if.then
  %17 = load i32* %retval
  ret i32 %17
}

; Function Attrs: nounwind
declare i8* @__memcpy_chk(i8*, i8*, i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @llvm.objectsize.i64(i8*, i1) #3

; Function Attrs: nounwind ssp uwtable
define i32 @set_quant_slots(%struct.jpeg_compress_struct* %cinfo, i8* %arg) #0 {
entry:
  %retval = alloca i32, align 4
  %cinfo.addr = alloca %struct.jpeg_compress_struct*, align 8
  %arg.addr = alloca i8*, align 8
  %val = alloca i32, align 4
  %ci = alloca i32, align 4
  %ch = alloca i8, align 1
  store %struct.jpeg_compress_struct* %cinfo, %struct.jpeg_compress_struct** %cinfo.addr, align 8
  store i8* %arg, i8** %arg.addr, align 8
  store i32 0, i32* %val, align 4
  store i32 0, i32* %ci, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %ci, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i8** %arg.addr, align 8
  %2 = load i8* %1, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  store i8 44, i8* %ch, align 1
  %3 = load i8** %arg.addr, align 8
  %call = call i32 (i8*, i8*, ...)* @sscanf(i8* %3, i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i32* %val, i8* %ch)
  %cmp1 = icmp slt i32 %call, 1
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %4 = load i8* %ch, align 1
  %conv = sext i8 %4 to i32
  %cmp3 = icmp ne i32 %conv, 44
  br i1 %cmp3, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end6:                                          ; preds = %if.end
  %5 = load i32* %val, align 4
  %cmp7 = icmp slt i32 %5, 0
  br i1 %cmp7, label %if.then11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end6
  %6 = load i32* %val, align 4
  %cmp9 = icmp sge i32 %6, 4
  br i1 %cmp9, label %if.then11, label %if.end13

if.then11:                                        ; preds = %lor.lhs.false, %if.end6
  %7 = load %struct.__sFILE** @__stderrp, align 8
  %call12 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %7, i8* getelementptr inbounds ([45 x i8]* @.str10, i32 0, i32 0), i32 3)
  store i32 0, i32* %retval
  br label %return

if.end13:                                         ; preds = %lor.lhs.false
  %8 = load i32* %val, align 4
  %9 = load i32* %ci, align 4
  %idxprom = sext i32 %9 to i64
  %10 = load %struct.jpeg_compress_struct** %cinfo.addr, align 8
  %comp_info = getelementptr inbounds %struct.jpeg_compress_struct* %10, i32 0, i32 14
  %11 = load %struct.jpeg_component_info** %comp_info, align 8
  %arrayidx = getelementptr inbounds %struct.jpeg_component_info* %11, i64 %idxprom
  %quant_tbl_no = getelementptr inbounds %struct.jpeg_component_info* %arrayidx, i32 0, i32 4
  store i32 %8, i32* %quant_tbl_no, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end13
  %12 = load i8** %arg.addr, align 8
  %13 = load i8* %12, align 1
  %conv14 = sext i8 %13 to i32
  %tobool15 = icmp ne i32 %conv14, 0
  br i1 %tobool15, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %14 = load i8** %arg.addr, align 8
  %incdec.ptr = getelementptr inbounds i8* %14, i32 1
  store i8* %incdec.ptr, i8** %arg.addr, align 8
  %15 = load i8* %14, align 1
  %conv16 = sext i8 %15 to i32
  %cmp17 = icmp ne i32 %conv16, 44
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %16 = phi i1 [ false, %while.cond ], [ %cmp17, %land.rhs ]
  br i1 %16, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %if.end23

if.else:                                          ; preds = %for.body
  %17 = load i32* %val, align 4
  %18 = load i32* %ci, align 4
  %idxprom19 = sext i32 %18 to i64
  %19 = load %struct.jpeg_compress_struct** %cinfo.addr, align 8
  %comp_info20 = getelementptr inbounds %struct.jpeg_compress_struct* %19, i32 0, i32 14
  %20 = load %struct.jpeg_component_info** %comp_info20, align 8
  %arrayidx21 = getelementptr inbounds %struct.jpeg_component_info* %20, i64 %idxprom19
  %quant_tbl_no22 = getelementptr inbounds %struct.jpeg_component_info* %arrayidx21, i32 0, i32 4
  store i32 %17, i32* %quant_tbl_no22, align 4
  br label %if.end23

if.end23:                                         ; preds = %if.else, %while.end
  br label %for.inc

for.inc:                                          ; preds = %if.end23
  %21 = load i32* %ci, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %ci, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then11, %if.then5, %if.then2
  %22 = load i32* %retval
  ret i32 %22
}

declare i32 @sscanf(i8*, i8*, ...) #1

; Function Attrs: nounwind ssp uwtable
define i32 @set_sample_factors(%struct.jpeg_compress_struct* %cinfo, i8* %arg) #0 {
entry:
  %retval = alloca i32, align 4
  %cinfo.addr = alloca %struct.jpeg_compress_struct*, align 8
  %arg.addr = alloca i8*, align 8
  %ci = alloca i32, align 4
  %val1 = alloca i32, align 4
  %val2 = alloca i32, align 4
  %ch1 = alloca i8, align 1
  %ch2 = alloca i8, align 1
  store %struct.jpeg_compress_struct* %cinfo, %struct.jpeg_compress_struct** %cinfo.addr, align 8
  store i8* %arg, i8** %arg.addr, align 8
  store i32 0, i32* %ci, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %ci, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i8** %arg.addr, align 8
  %2 = load i8* %1, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  store i8 44, i8* %ch2, align 1
  %3 = load i8** %arg.addr, align 8
  %call = call i32 (i8*, i8*, ...)* @sscanf(i8* %3, i8* getelementptr inbounds ([9 x i8]* @.str11, i32 0, i32 0), i32* %val1, i8* %ch1, i32* %val2, i8* %ch2)
  %cmp1 = icmp slt i32 %call, 3
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %4 = load i8* %ch1, align 1
  %conv = sext i8 %4 to i32
  %cmp3 = icmp ne i32 %conv, 120
  br i1 %cmp3, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %if.end
  %5 = load i8* %ch1, align 1
  %conv5 = sext i8 %5 to i32
  %cmp6 = icmp ne i32 %conv5, 88
  br i1 %cmp6, label %if.then11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %if.end
  %6 = load i8* %ch2, align 1
  %conv8 = sext i8 %6 to i32
  %cmp9 = icmp ne i32 %conv8, 44
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %lor.lhs.false, %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end12:                                         ; preds = %lor.lhs.false
  %7 = load i32* %val1, align 4
  %cmp13 = icmp sle i32 %7, 0
  br i1 %cmp13, label %if.then24, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %if.end12
  %8 = load i32* %val1, align 4
  %cmp16 = icmp sgt i32 %8, 4
  br i1 %cmp16, label %if.then24, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %lor.lhs.false15
  %9 = load i32* %val2, align 4
  %cmp19 = icmp sle i32 %9, 0
  br i1 %cmp19, label %if.then24, label %lor.lhs.false21

lor.lhs.false21:                                  ; preds = %lor.lhs.false18
  %10 = load i32* %val2, align 4
  %cmp22 = icmp sgt i32 %10, 4
  br i1 %cmp22, label %if.then24, label %if.end26

if.then24:                                        ; preds = %lor.lhs.false21, %lor.lhs.false18, %lor.lhs.false15, %if.end12
  %11 = load %struct.__sFILE** @__stderrp, align 8
  %call25 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %11, i8* getelementptr inbounds ([36 x i8]* @.str12, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

if.end26:                                         ; preds = %lor.lhs.false21
  %12 = load i32* %val1, align 4
  %13 = load i32* %ci, align 4
  %idxprom = sext i32 %13 to i64
  %14 = load %struct.jpeg_compress_struct** %cinfo.addr, align 8
  %comp_info = getelementptr inbounds %struct.jpeg_compress_struct* %14, i32 0, i32 14
  %15 = load %struct.jpeg_component_info** %comp_info, align 8
  %arrayidx = getelementptr inbounds %struct.jpeg_component_info* %15, i64 %idxprom
  %h_samp_factor = getelementptr inbounds %struct.jpeg_component_info* %arrayidx, i32 0, i32 2
  store i32 %12, i32* %h_samp_factor, align 4
  %16 = load i32* %val2, align 4
  %17 = load i32* %ci, align 4
  %idxprom27 = sext i32 %17 to i64
  %18 = load %struct.jpeg_compress_struct** %cinfo.addr, align 8
  %comp_info28 = getelementptr inbounds %struct.jpeg_compress_struct* %18, i32 0, i32 14
  %19 = load %struct.jpeg_component_info** %comp_info28, align 8
  %arrayidx29 = getelementptr inbounds %struct.jpeg_component_info* %19, i64 %idxprom27
  %v_samp_factor = getelementptr inbounds %struct.jpeg_component_info* %arrayidx29, i32 0, i32 3
  store i32 %16, i32* %v_samp_factor, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end26
  %20 = load i8** %arg.addr, align 8
  %21 = load i8* %20, align 1
  %conv30 = sext i8 %21 to i32
  %tobool31 = icmp ne i32 %conv30, 0
  br i1 %tobool31, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %22 = load i8** %arg.addr, align 8
  %incdec.ptr = getelementptr inbounds i8* %22, i32 1
  store i8* %incdec.ptr, i8** %arg.addr, align 8
  %23 = load i8* %22, align 1
  %conv32 = sext i8 %23 to i32
  %cmp33 = icmp ne i32 %conv32, 44
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %24 = phi i1 [ false, %while.cond ], [ %cmp33, %land.rhs ]
  br i1 %24, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %if.end43

if.else:                                          ; preds = %for.body
  %25 = load i32* %ci, align 4
  %idxprom35 = sext i32 %25 to i64
  %26 = load %struct.jpeg_compress_struct** %cinfo.addr, align 8
  %comp_info36 = getelementptr inbounds %struct.jpeg_compress_struct* %26, i32 0, i32 14
  %27 = load %struct.jpeg_component_info** %comp_info36, align 8
  %arrayidx37 = getelementptr inbounds %struct.jpeg_component_info* %27, i64 %idxprom35
  %h_samp_factor38 = getelementptr inbounds %struct.jpeg_component_info* %arrayidx37, i32 0, i32 2
  store i32 1, i32* %h_samp_factor38, align 4
  %28 = load i32* %ci, align 4
  %idxprom39 = sext i32 %28 to i64
  %29 = load %struct.jpeg_compress_struct** %cinfo.addr, align 8
  %comp_info40 = getelementptr inbounds %struct.jpeg_compress_struct* %29, i32 0, i32 14
  %30 = load %struct.jpeg_component_info** %comp_info40, align 8
  %arrayidx41 = getelementptr inbounds %struct.jpeg_component_info* %30, i64 %idxprom39
  %v_samp_factor42 = getelementptr inbounds %struct.jpeg_component_info* %arrayidx41, i32 0, i32 3
  store i32 1, i32* %v_samp_factor42, align 4
  br label %if.end43

if.end43:                                         ; preds = %if.else, %while.end
  br label %for.inc

for.inc:                                          ; preds = %if.end43
  %31 = load i32* %ci, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %ci, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then24, %if.then11, %if.then2
  %32 = load i32* %retval
  ret i32 %32
}

declare i32 @isspace(i32) #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @text_getc(%struct.__sFILE* %file) #0 {
entry:
  %file.addr = alloca %struct.__sFILE*, align 8
  %ch = alloca i32, align 4
  store %struct.__sFILE* %file, %struct.__sFILE** %file.addr, align 8
  %0 = load %struct.__sFILE** %file.addr, align 8
  %call = call i32 @getc(%struct.__sFILE* %0)
  store i32 %call, i32* %ch, align 4
  %1 = load i32* %ch, align 4
  %cmp = icmp eq i32 %1, 35
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %land.end, %if.then
  %2 = load %struct.__sFILE** %file.addr, align 8
  %call1 = call i32 @getc(%struct.__sFILE* %2)
  store i32 %call1, i32* %ch, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %3 = load i32* %ch, align 4
  %cmp2 = icmp ne i32 %3, 10
  br i1 %cmp2, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %4 = load i32* %ch, align 4
  %cmp3 = icmp ne i32 %4, -1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %5 = phi i1 [ false, %do.cond ], [ %cmp3, %land.rhs ]
  br i1 %5, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  %6 = load i32* %ch, align 4
  ret i32 %6
}

declare i32 @isdigit(i32) #1

declare i32 @ungetc(i32, %struct.__sFILE*) #1

declare i32 @getc(%struct.__sFILE*) #1

attributes #0 = { nounwind ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind }
