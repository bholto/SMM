; ModuleID = 'patricia.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.9.0"

%struct.ptree = type { i64, %struct.ptree_mask*, i8, i8, %struct.ptree*, %struct.ptree* }
%struct.ptree_mask = type { i64, i8* }

; Function Attrs: nounwind ssp uwtable
define %struct.ptree* @pat_insert(%struct.ptree* %n, %struct.ptree* %head) #0 {
entry:
  %retval = alloca %struct.ptree*, align 8
  %n.addr = alloca %struct.ptree*, align 8
  %head.addr = alloca %struct.ptree*, align 8
  %t = alloca %struct.ptree*, align 8
  %buf = alloca %struct.ptree_mask*, align 8
  %pm = alloca %struct.ptree_mask*, align 8
  %i = alloca i32, align 4
  %copied = alloca i32, align 4
  %stop = alloca i32, align 4
  store %struct.ptree* %n, %struct.ptree** %n.addr, align 8
  store %struct.ptree* %head, %struct.ptree** %head.addr, align 8
  %0 = load %struct.ptree** %head.addr, align 8
  %tobool = icmp ne %struct.ptree* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.ptree** %n.addr, align 8
  %tobool1 = icmp ne %struct.ptree* %1, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load %struct.ptree** %n.addr, align 8
  %p_m = getelementptr inbounds %struct.ptree* %2, i32 0, i32 1
  %3 = load %struct.ptree_mask** %p_m, align 8
  %tobool3 = icmp ne %struct.ptree_mask* %3, null
  br i1 %tobool3, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store %struct.ptree* null, %struct.ptree** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %4 = load %struct.ptree** %n.addr, align 8
  %p_m4 = getelementptr inbounds %struct.ptree* %4, i32 0, i32 1
  %5 = load %struct.ptree_mask** %p_m4, align 8
  %pm_mask = getelementptr inbounds %struct.ptree_mask* %5, i32 0, i32 0
  %6 = load i64* %pm_mask, align 8
  %7 = load %struct.ptree** %n.addr, align 8
  %p_key = getelementptr inbounds %struct.ptree* %7, i32 0, i32 0
  %8 = load i64* %p_key, align 8
  %and = and i64 %8, %6
  store i64 %and, i64* %p_key, align 8
  %9 = load %struct.ptree** %head.addr, align 8
  store %struct.ptree* %9, %struct.ptree** %t, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %10 = load %struct.ptree** %t, align 8
  %p_b = getelementptr inbounds %struct.ptree* %10, i32 0, i32 3
  %11 = load i8* %p_b, align 1
  %conv = sext i8 %11 to i32
  store i32 %conv, i32* %i, align 4
  %12 = load %struct.ptree** %t, align 8
  %p_b5 = getelementptr inbounds %struct.ptree* %12, i32 0, i32 3
  %13 = load i8* %p_b5, align 1
  %conv6 = sext i8 %13 to i32
  %14 = load %struct.ptree** %n.addr, align 8
  %p_key7 = getelementptr inbounds %struct.ptree* %14, i32 0, i32 0
  %15 = load i64* %p_key7, align 8
  %call = call i64 @bit(i32 %conv6, i64 %15)
  %tobool8 = icmp ne i64 %call, 0
  br i1 %tobool8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  %16 = load %struct.ptree** %t, align 8
  %p_right = getelementptr inbounds %struct.ptree* %16, i32 0, i32 5
  %17 = load %struct.ptree** %p_right, align 8
  br label %cond.end

cond.false:                                       ; preds = %do.body
  %18 = load %struct.ptree** %t, align 8
  %p_left = getelementptr inbounds %struct.ptree* %18, i32 0, i32 4
  %19 = load %struct.ptree** %p_left, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.ptree* [ %17, %cond.true ], [ %19, %cond.false ]
  store %struct.ptree* %cond, %struct.ptree** %t, align 8
  br label %do.cond

do.cond:                                          ; preds = %cond.end
  %20 = load i32* %i, align 4
  %21 = load %struct.ptree** %t, align 8
  %p_b9 = getelementptr inbounds %struct.ptree* %21, i32 0, i32 3
  %22 = load i8* %p_b9, align 1
  %conv10 = sext i8 %22 to i32
  %cmp = icmp slt i32 %20, %conv10
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %23 = load %struct.ptree** %n.addr, align 8
  %p_key12 = getelementptr inbounds %struct.ptree* %23, i32 0, i32 0
  %24 = load i64* %p_key12, align 8
  %25 = load %struct.ptree** %t, align 8
  %p_key13 = getelementptr inbounds %struct.ptree* %25, i32 0, i32 0
  %26 = load i64* %p_key13, align 8
  %cmp14 = icmp eq i64 %24, %26
  br i1 %cmp14, label %if.then16, label %if.end76

if.then16:                                        ; preds = %do.end
  store i32 0, i32* %stop, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then16
  %27 = load i32* %i, align 4
  %28 = load %struct.ptree** %t, align 8
  %p_mlen = getelementptr inbounds %struct.ptree* %28, i32 0, i32 2
  %29 = load i8* %p_mlen, align 1
  %conv17 = zext i8 %29 to i32
  %cmp18 = icmp slt i32 %27, %conv17
  br i1 %cmp18, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %30 = load i32* %stop, align 4
  %cmp20 = icmp eq i32 %30, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %31 = phi i1 [ false, %for.cond ], [ %cmp20, %land.rhs ]
  br i1 %31, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %32 = load %struct.ptree** %n.addr, align 8
  %p_m22 = getelementptr inbounds %struct.ptree* %32, i32 0, i32 1
  %33 = load %struct.ptree_mask** %p_m22, align 8
  %pm_mask23 = getelementptr inbounds %struct.ptree_mask* %33, i32 0, i32 0
  %34 = load i64* %pm_mask23, align 8
  %35 = load i32* %i, align 4
  %idxprom = sext i32 %35 to i64
  %36 = load %struct.ptree** %t, align 8
  %p_m24 = getelementptr inbounds %struct.ptree* %36, i32 0, i32 1
  %37 = load %struct.ptree_mask** %p_m24, align 8
  %arrayidx = getelementptr inbounds %struct.ptree_mask* %37, i64 %idxprom
  %pm_mask25 = getelementptr inbounds %struct.ptree_mask* %arrayidx, i32 0, i32 0
  %38 = load i64* %pm_mask25, align 8
  %cmp26 = icmp eq i64 %34, %38
  br i1 %cmp26, label %if.then28, label %if.end35

if.then28:                                        ; preds = %for.body
  %39 = load %struct.ptree** %n.addr, align 8
  %p_m29 = getelementptr inbounds %struct.ptree* %39, i32 0, i32 1
  %40 = load %struct.ptree_mask** %p_m29, align 8
  %pm_data = getelementptr inbounds %struct.ptree_mask* %40, i32 0, i32 1
  %41 = load i8** %pm_data, align 8
  %42 = load i32* %i, align 4
  %idxprom30 = sext i32 %42 to i64
  %43 = load %struct.ptree** %t, align 8
  %p_m31 = getelementptr inbounds %struct.ptree* %43, i32 0, i32 1
  %44 = load %struct.ptree_mask** %p_m31, align 8
  %arrayidx32 = getelementptr inbounds %struct.ptree_mask* %44, i64 %idxprom30
  %pm_data33 = getelementptr inbounds %struct.ptree_mask* %arrayidx32, i32 0, i32 1
  store i8* %41, i8** %pm_data33, align 8
  %45 = load %struct.ptree** %n.addr, align 8
  %p_m34 = getelementptr inbounds %struct.ptree* %45, i32 0, i32 1
  %46 = load %struct.ptree_mask** %p_m34, align 8
  %47 = bitcast %struct.ptree_mask* %46 to i8*
  call void @free(i8* %47)
  %48 = load %struct.ptree** %n.addr, align 8
  %49 = bitcast %struct.ptree* %48 to i8*
  call void @free(i8* %49)
  store %struct.ptree* null, %struct.ptree** %n.addr, align 8
  store i32 1, i32* %stop, align 4
  br label %if.end35

if.end35:                                         ; preds = %if.then28, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end35
  %50 = load i32* %i, align 4
  %inc = add nsw i32 %50, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %51 = load i32* %stop, align 4
  %cmp36 = icmp eq i32 %51, 1
  br i1 %cmp36, label %if.then38, label %if.end39

if.then38:                                        ; preds = %for.end
  %52 = load %struct.ptree** %t, align 8
  store %struct.ptree* %52, %struct.ptree** %retval
  br label %return

if.end39:                                         ; preds = %for.end
  %53 = load %struct.ptree** %t, align 8
  %p_mlen40 = getelementptr inbounds %struct.ptree* %53, i32 0, i32 2
  %54 = load i8* %p_mlen40, align 1
  %conv41 = zext i8 %54 to i32
  %add = add nsw i32 %conv41, 1
  %conv42 = sext i32 %add to i64
  %mul = mul i64 16, %conv42
  %call43 = call i8* @malloc(i64 %mul)
  %55 = bitcast i8* %call43 to %struct.ptree_mask*
  store %struct.ptree_mask* %55, %struct.ptree_mask** %buf, align 8
  store i32 0, i32* %copied, align 4
  store i32 0, i32* %i, align 4
  %56 = load %struct.ptree_mask** %buf, align 8
  store %struct.ptree_mask* %56, %struct.ptree_mask** %pm, align 8
  br label %for.cond44

for.cond44:                                       ; preds = %for.inc65, %if.end39
  %57 = load i32* %i, align 4
  %58 = load %struct.ptree** %t, align 8
  %p_mlen45 = getelementptr inbounds %struct.ptree* %58, i32 0, i32 2
  %59 = load i8* %p_mlen45, align 1
  %conv46 = zext i8 %59 to i32
  %cmp47 = icmp slt i32 %57, %conv46
  br i1 %cmp47, label %for.body49, label %for.end66

for.body49:                                       ; preds = %for.cond44
  %60 = load %struct.ptree** %n.addr, align 8
  %p_m50 = getelementptr inbounds %struct.ptree* %60, i32 0, i32 1
  %61 = load %struct.ptree_mask** %p_m50, align 8
  %pm_mask51 = getelementptr inbounds %struct.ptree_mask* %61, i32 0, i32 0
  %62 = load i64* %pm_mask51, align 8
  %63 = load i32* %i, align 4
  %idxprom52 = sext i32 %63 to i64
  %64 = load %struct.ptree** %t, align 8
  %p_m53 = getelementptr inbounds %struct.ptree* %64, i32 0, i32 1
  %65 = load %struct.ptree_mask** %p_m53, align 8
  %arrayidx54 = getelementptr inbounds %struct.ptree_mask* %65, i64 %idxprom52
  %pm_mask55 = getelementptr inbounds %struct.ptree_mask* %arrayidx54, i32 0, i32 0
  %66 = load i64* %pm_mask55, align 8
  %cmp56 = icmp ugt i64 %62, %66
  br i1 %cmp56, label %if.then58, label %if.else

if.then58:                                        ; preds = %for.body49
  %67 = load %struct.ptree** %t, align 8
  %p_m59 = getelementptr inbounds %struct.ptree* %67, i32 0, i32 1
  %68 = load %struct.ptree_mask** %p_m59, align 8
  %69 = load i32* %i, align 4
  %idx.ext = sext i32 %69 to i64
  %add.ptr = getelementptr inbounds %struct.ptree_mask* %68, i64 %idx.ext
  %70 = bitcast %struct.ptree_mask* %add.ptr to i8*
  %71 = load %struct.ptree_mask** %pm, align 8
  %72 = bitcast %struct.ptree_mask* %71 to i8*
  call void @bcopy(i8* %70, i8* %72, i64 16)
  %73 = load i32* %i, align 4
  %inc60 = add nsw i32 %73, 1
  store i32 %inc60, i32* %i, align 4
  br label %if.end64

if.else:                                          ; preds = %for.body49
  %74 = load %struct.ptree** %n.addr, align 8
  %p_m61 = getelementptr inbounds %struct.ptree* %74, i32 0, i32 1
  %75 = load %struct.ptree_mask** %p_m61, align 8
  %76 = bitcast %struct.ptree_mask* %75 to i8*
  %77 = load %struct.ptree_mask** %pm, align 8
  %78 = bitcast %struct.ptree_mask* %77 to i8*
  call void @bcopy(i8* %76, i8* %78, i64 16)
  %79 = load %struct.ptree** %n.addr, align 8
  %p_m62 = getelementptr inbounds %struct.ptree* %79, i32 0, i32 1
  %80 = load %struct.ptree_mask** %p_m62, align 8
  %pm_mask63 = getelementptr inbounds %struct.ptree_mask* %80, i32 0, i32 0
  store i64 4294967295, i64* %pm_mask63, align 8
  store i32 1, i32* %copied, align 4
  br label %if.end64

if.end64:                                         ; preds = %if.else, %if.then58
  br label %for.inc65

for.inc65:                                        ; preds = %if.end64
  %81 = load %struct.ptree_mask** %pm, align 8
  %incdec.ptr = getelementptr inbounds %struct.ptree_mask* %81, i32 1
  store %struct.ptree_mask* %incdec.ptr, %struct.ptree_mask** %pm, align 8
  br label %for.cond44

for.end66:                                        ; preds = %for.cond44
  %82 = load i32* %copied, align 4
  %tobool67 = icmp ne i32 %82, 0
  br i1 %tobool67, label %if.end70, label %if.then68

if.then68:                                        ; preds = %for.end66
  %83 = load %struct.ptree** %n.addr, align 8
  %p_m69 = getelementptr inbounds %struct.ptree* %83, i32 0, i32 1
  %84 = load %struct.ptree_mask** %p_m69, align 8
  %85 = bitcast %struct.ptree_mask* %84 to i8*
  %86 = load %struct.ptree_mask** %pm, align 8
  %87 = bitcast %struct.ptree_mask* %86 to i8*
  call void @bcopy(i8* %85, i8* %87, i64 16)
  br label %if.end70

if.end70:                                         ; preds = %if.then68, %for.end66
  %88 = load %struct.ptree** %n.addr, align 8
  %p_m71 = getelementptr inbounds %struct.ptree* %88, i32 0, i32 1
  %89 = load %struct.ptree_mask** %p_m71, align 8
  %90 = bitcast %struct.ptree_mask* %89 to i8*
  call void @free(i8* %90)
  %91 = load %struct.ptree** %n.addr, align 8
  %92 = bitcast %struct.ptree* %91 to i8*
  call void @free(i8* %92)
  store %struct.ptree* null, %struct.ptree** %n.addr, align 8
  %93 = load %struct.ptree** %t, align 8
  %p_mlen72 = getelementptr inbounds %struct.ptree* %93, i32 0, i32 2
  %94 = load i8* %p_mlen72, align 1
  %inc73 = add i8 %94, 1
  store i8 %inc73, i8* %p_mlen72, align 1
  %95 = load %struct.ptree** %t, align 8
  %p_m74 = getelementptr inbounds %struct.ptree* %95, i32 0, i32 1
  %96 = load %struct.ptree_mask** %p_m74, align 8
  %97 = bitcast %struct.ptree_mask* %96 to i8*
  call void @free(i8* %97)
  %98 = load %struct.ptree_mask** %buf, align 8
  %99 = load %struct.ptree** %t, align 8
  %p_m75 = getelementptr inbounds %struct.ptree* %99, i32 0, i32 1
  store %struct.ptree_mask* %98, %struct.ptree_mask** %p_m75, align 8
  %100 = load %struct.ptree** %t, align 8
  store %struct.ptree* %100, %struct.ptree** %retval
  br label %return

if.end76:                                         ; preds = %do.end
  store i32 1, i32* %i, align 4
  br label %for.cond77

for.cond77:                                       ; preds = %for.inc89, %if.end76
  %101 = load i32* %i, align 4
  %cmp78 = icmp slt i32 %101, 32
  br i1 %cmp78, label %land.rhs80, label %land.end87

land.rhs80:                                       ; preds = %for.cond77
  %102 = load i32* %i, align 4
  %103 = load %struct.ptree** %n.addr, align 8
  %p_key81 = getelementptr inbounds %struct.ptree* %103, i32 0, i32 0
  %104 = load i64* %p_key81, align 8
  %call82 = call i64 @bit(i32 %102, i64 %104)
  %105 = load i32* %i, align 4
  %106 = load %struct.ptree** %t, align 8
  %p_key83 = getelementptr inbounds %struct.ptree* %106, i32 0, i32 0
  %107 = load i64* %p_key83, align 8
  %call84 = call i64 @bit(i32 %105, i64 %107)
  %cmp85 = icmp eq i64 %call82, %call84
  br label %land.end87

land.end87:                                       ; preds = %land.rhs80, %for.cond77
  %108 = phi i1 [ false, %for.cond77 ], [ %cmp85, %land.rhs80 ]
  br i1 %108, label %for.body88, label %for.end91

for.body88:                                       ; preds = %land.end87
  br label %for.inc89

for.inc89:                                        ; preds = %for.body88
  %109 = load i32* %i, align 4
  %inc90 = add nsw i32 %109, 1
  store i32 %inc90, i32* %i, align 4
  br label %for.cond77

for.end91:                                        ; preds = %land.end87
  %110 = load %struct.ptree** %head.addr, align 8
  %p_b92 = getelementptr inbounds %struct.ptree* %110, i32 0, i32 3
  %111 = load i8* %p_b92, align 1
  %conv93 = sext i8 %111 to i32
  %112 = load %struct.ptree** %n.addr, align 8
  %p_key94 = getelementptr inbounds %struct.ptree* %112, i32 0, i32 0
  %113 = load i64* %p_key94, align 8
  %call95 = call i64 @bit(i32 %conv93, i64 %113)
  %tobool96 = icmp ne i64 %call95, 0
  br i1 %tobool96, label %if.then97, label %if.else101

if.then97:                                        ; preds = %for.end91
  %114 = load %struct.ptree** %head.addr, align 8
  %p_right98 = getelementptr inbounds %struct.ptree* %114, i32 0, i32 5
  %115 = load %struct.ptree** %p_right98, align 8
  %116 = load %struct.ptree** %n.addr, align 8
  %117 = load i32* %i, align 4
  %118 = load %struct.ptree** %head.addr, align 8
  %call99 = call %struct.ptree* @insertR(%struct.ptree* %115, %struct.ptree* %116, i32 %117, %struct.ptree* %118)
  %119 = load %struct.ptree** %head.addr, align 8
  %p_right100 = getelementptr inbounds %struct.ptree* %119, i32 0, i32 5
  store %struct.ptree* %call99, %struct.ptree** %p_right100, align 8
  br label %if.end105

if.else101:                                       ; preds = %for.end91
  %120 = load %struct.ptree** %head.addr, align 8
  %p_left102 = getelementptr inbounds %struct.ptree* %120, i32 0, i32 4
  %121 = load %struct.ptree** %p_left102, align 8
  %122 = load %struct.ptree** %n.addr, align 8
  %123 = load i32* %i, align 4
  %124 = load %struct.ptree** %head.addr, align 8
  %call103 = call %struct.ptree* @insertR(%struct.ptree* %121, %struct.ptree* %122, i32 %123, %struct.ptree* %124)
  %125 = load %struct.ptree** %head.addr, align 8
  %p_left104 = getelementptr inbounds %struct.ptree* %125, i32 0, i32 4
  store %struct.ptree* %call103, %struct.ptree** %p_left104, align 8
  br label %if.end105

if.end105:                                        ; preds = %if.else101, %if.then97
  %126 = load %struct.ptree** %n.addr, align 8
  store %struct.ptree* %126, %struct.ptree** %retval
  br label %return

return:                                           ; preds = %if.end105, %if.end70, %if.then38, %if.then
  %127 = load %struct.ptree** %retval
  ret %struct.ptree* %127
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal i64 @bit(i32 %i, i64 %key) #1 {
entry:
  %i.addr = alloca i32, align 4
  %key.addr = alloca i64, align 8
  store i32 %i, i32* %i.addr, align 4
  store i64 %key, i64* %key.addr, align 8
  %0 = load i64* %key.addr, align 8
  %1 = load i32* %i.addr, align 4
  %sub = sub nsw i32 31, %1
  %shl = shl i32 1, %sub
  %conv = sext i32 %shl to i64
  %and = and i64 %0, %conv
  ret i64 %and
}

declare void @free(i8*) #2

declare i8* @malloc(i64) #2

declare void @bcopy(i8*, i8*, i64) #2

; Function Attrs: nounwind ssp uwtable
define internal %struct.ptree* @insertR(%struct.ptree* %h, %struct.ptree* %n, i32 %d, %struct.ptree* %p) #0 {
entry:
  %retval = alloca %struct.ptree*, align 8
  %h.addr = alloca %struct.ptree*, align 8
  %n.addr = alloca %struct.ptree*, align 8
  %d.addr = alloca i32, align 4
  %p.addr = alloca %struct.ptree*, align 8
  store %struct.ptree* %h, %struct.ptree** %h.addr, align 8
  store %struct.ptree* %n, %struct.ptree** %n.addr, align 8
  store i32 %d, i32* %d.addr, align 4
  store %struct.ptree* %p, %struct.ptree** %p.addr, align 8
  %0 = load %struct.ptree** %h.addr, align 8
  %p_b = getelementptr inbounds %struct.ptree* %0, i32 0, i32 3
  %1 = load i8* %p_b, align 1
  %conv = sext i8 %1 to i32
  %2 = load i32* %d.addr, align 4
  %cmp = icmp sge i32 %conv, %2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.ptree** %h.addr, align 8
  %p_b2 = getelementptr inbounds %struct.ptree* %3, i32 0, i32 3
  %4 = load i8* %p_b2, align 1
  %conv3 = sext i8 %4 to i32
  %5 = load %struct.ptree** %p.addr, align 8
  %p_b4 = getelementptr inbounds %struct.ptree* %5, i32 0, i32 3
  %6 = load i8* %p_b4, align 1
  %conv5 = sext i8 %6 to i32
  %cmp6 = icmp sle i32 %conv3, %conv5
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %7 = load i32* %d.addr, align 4
  %conv8 = trunc i32 %7 to i8
  %8 = load %struct.ptree** %n.addr, align 8
  %p_b9 = getelementptr inbounds %struct.ptree* %8, i32 0, i32 3
  store i8 %conv8, i8* %p_b9, align 1
  %9 = load i32* %d.addr, align 4
  %10 = load %struct.ptree** %n.addr, align 8
  %p_key = getelementptr inbounds %struct.ptree* %10, i32 0, i32 0
  %11 = load i64* %p_key, align 8
  %call = call i64 @bit(i32 %9, i64 %11)
  %tobool = icmp ne i64 %call, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %12 = load %struct.ptree** %h.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %13 = load %struct.ptree** %n.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.ptree* [ %12, %cond.true ], [ %13, %cond.false ]
  %14 = load %struct.ptree** %n.addr, align 8
  %p_left = getelementptr inbounds %struct.ptree* %14, i32 0, i32 4
  store %struct.ptree* %cond, %struct.ptree** %p_left, align 8
  %15 = load i32* %d.addr, align 4
  %16 = load %struct.ptree** %n.addr, align 8
  %p_key10 = getelementptr inbounds %struct.ptree* %16, i32 0, i32 0
  %17 = load i64* %p_key10, align 8
  %call11 = call i64 @bit(i32 %15, i64 %17)
  %tobool12 = icmp ne i64 %call11, 0
  br i1 %tobool12, label %cond.true13, label %cond.false14

cond.true13:                                      ; preds = %cond.end
  %18 = load %struct.ptree** %n.addr, align 8
  br label %cond.end15

cond.false14:                                     ; preds = %cond.end
  %19 = load %struct.ptree** %h.addr, align 8
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond16 = phi %struct.ptree* [ %18, %cond.true13 ], [ %19, %cond.false14 ]
  %20 = load %struct.ptree** %n.addr, align 8
  %p_right = getelementptr inbounds %struct.ptree* %20, i32 0, i32 5
  store %struct.ptree* %cond16, %struct.ptree** %p_right, align 8
  %21 = load %struct.ptree** %n.addr, align 8
  store %struct.ptree* %21, %struct.ptree** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %22 = load %struct.ptree** %h.addr, align 8
  %p_b17 = getelementptr inbounds %struct.ptree* %22, i32 0, i32 3
  %23 = load i8* %p_b17, align 1
  %conv18 = sext i8 %23 to i32
  %24 = load %struct.ptree** %n.addr, align 8
  %p_key19 = getelementptr inbounds %struct.ptree* %24, i32 0, i32 0
  %25 = load i64* %p_key19, align 8
  %call20 = call i64 @bit(i32 %conv18, i64 %25)
  %tobool21 = icmp ne i64 %call20, 0
  br i1 %tobool21, label %if.then22, label %if.else

if.then22:                                        ; preds = %if.end
  %26 = load %struct.ptree** %h.addr, align 8
  %p_right23 = getelementptr inbounds %struct.ptree* %26, i32 0, i32 5
  %27 = load %struct.ptree** %p_right23, align 8
  %28 = load %struct.ptree** %n.addr, align 8
  %29 = load i32* %d.addr, align 4
  %30 = load %struct.ptree** %h.addr, align 8
  %call24 = call %struct.ptree* @insertR(%struct.ptree* %27, %struct.ptree* %28, i32 %29, %struct.ptree* %30)
  %31 = load %struct.ptree** %h.addr, align 8
  %p_right25 = getelementptr inbounds %struct.ptree* %31, i32 0, i32 5
  store %struct.ptree* %call24, %struct.ptree** %p_right25, align 8
  br label %if.end29

if.else:                                          ; preds = %if.end
  %32 = load %struct.ptree** %h.addr, align 8
  %p_left26 = getelementptr inbounds %struct.ptree* %32, i32 0, i32 4
  %33 = load %struct.ptree** %p_left26, align 8
  %34 = load %struct.ptree** %n.addr, align 8
  %35 = load i32* %d.addr, align 4
  %36 = load %struct.ptree** %h.addr, align 8
  %call27 = call %struct.ptree* @insertR(%struct.ptree* %33, %struct.ptree* %34, i32 %35, %struct.ptree* %36)
  %37 = load %struct.ptree** %h.addr, align 8
  %p_left28 = getelementptr inbounds %struct.ptree* %37, i32 0, i32 4
  store %struct.ptree* %call27, %struct.ptree** %p_left28, align 8
  br label %if.end29

if.end29:                                         ; preds = %if.else, %if.then22
  %38 = load %struct.ptree** %h.addr, align 8
  store %struct.ptree* %38, %struct.ptree** %retval
  br label %return

return:                                           ; preds = %if.end29, %cond.end15
  %39 = load %struct.ptree** %retval
  ret %struct.ptree* %39
}

; Function Attrs: nounwind ssp uwtable
define i32 @pat_remove(%struct.ptree* %n, %struct.ptree* %head) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca %struct.ptree*, align 8
  %head.addr = alloca %struct.ptree*, align 8
  %p = alloca %struct.ptree*, align 8
  %g = alloca %struct.ptree*, align 8
  %pt = alloca %struct.ptree*, align 8
  %pp = alloca %struct.ptree*, align 8
  %t = alloca %struct.ptree*, align 8
  %buf = alloca %struct.ptree_mask*, align 8
  %pm = alloca %struct.ptree_mask*, align 8
  %i = alloca i32, align 4
  %stop = alloca i32, align 4
  store %struct.ptree* %n, %struct.ptree** %n.addr, align 8
  store %struct.ptree* %head, %struct.ptree** %head.addr, align 8
  %0 = load %struct.ptree** %n.addr, align 8
  %tobool = icmp ne %struct.ptree* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.ptree** %n.addr, align 8
  %p_m = getelementptr inbounds %struct.ptree* %1, i32 0, i32 1
  %2 = load %struct.ptree_mask** %p_m, align 8
  %tobool1 = icmp ne %struct.ptree_mask* %2, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %struct.ptree** %t, align 8
  %tobool3 = icmp ne %struct.ptree* %3, null
  br i1 %tobool3, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %4 = load %struct.ptree** %head.addr, align 8
  store %struct.ptree* %4, %struct.ptree** %t, align 8
  store %struct.ptree* %4, %struct.ptree** %p, align 8
  store %struct.ptree* %4, %struct.ptree** %g, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %5 = load %struct.ptree** %t, align 8
  %p_b = getelementptr inbounds %struct.ptree* %5, i32 0, i32 3
  %6 = load i8* %p_b, align 1
  %conv = sext i8 %6 to i32
  store i32 %conv, i32* %i, align 4
  %7 = load %struct.ptree** %p, align 8
  store %struct.ptree* %7, %struct.ptree** %g, align 8
  %8 = load %struct.ptree** %t, align 8
  store %struct.ptree* %8, %struct.ptree** %p, align 8
  %9 = load %struct.ptree** %t, align 8
  %p_b4 = getelementptr inbounds %struct.ptree* %9, i32 0, i32 3
  %10 = load i8* %p_b4, align 1
  %conv5 = sext i8 %10 to i32
  %11 = load %struct.ptree** %n.addr, align 8
  %p_key = getelementptr inbounds %struct.ptree* %11, i32 0, i32 0
  %12 = load i64* %p_key, align 8
  %call = call i64 @bit(i32 %conv5, i64 %12)
  %tobool6 = icmp ne i64 %call, 0
  br i1 %tobool6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  %13 = load %struct.ptree** %t, align 8
  %p_right = getelementptr inbounds %struct.ptree* %13, i32 0, i32 5
  %14 = load %struct.ptree** %p_right, align 8
  br label %cond.end

cond.false:                                       ; preds = %do.body
  %15 = load %struct.ptree** %t, align 8
  %p_left = getelementptr inbounds %struct.ptree* %15, i32 0, i32 4
  %16 = load %struct.ptree** %p_left, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.ptree* [ %14, %cond.true ], [ %16, %cond.false ]
  store %struct.ptree* %cond, %struct.ptree** %t, align 8
  br label %do.cond

do.cond:                                          ; preds = %cond.end
  %17 = load i32* %i, align 4
  %18 = load %struct.ptree** %t, align 8
  %p_b7 = getelementptr inbounds %struct.ptree* %18, i32 0, i32 3
  %19 = load i8* %p_b7, align 1
  %conv8 = sext i8 %19 to i32
  %cmp = icmp slt i32 %17, %conv8
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %20 = load %struct.ptree** %t, align 8
  %p_key10 = getelementptr inbounds %struct.ptree* %20, i32 0, i32 0
  %21 = load i64* %p_key10, align 8
  %22 = load %struct.ptree** %n.addr, align 8
  %p_key11 = getelementptr inbounds %struct.ptree* %22, i32 0, i32 0
  %23 = load i64* %p_key11, align 8
  %cmp12 = icmp ne i64 %21, %23
  br i1 %cmp12, label %if.then14, label %if.end15

if.then14:                                        ; preds = %do.end
  store i32 0, i32* %retval
  br label %return

if.end15:                                         ; preds = %do.end
  %24 = load %struct.ptree** %t, align 8
  %p_mlen = getelementptr inbounds %struct.ptree* %24, i32 0, i32 2
  %25 = load i8* %p_mlen, align 1
  %conv16 = zext i8 %25 to i32
  %cmp17 = icmp eq i32 %conv16, 1
  br i1 %cmp17, label %if.then19, label %if.end111

if.then19:                                        ; preds = %if.end15
  %26 = load %struct.ptree** %t, align 8
  %p_b20 = getelementptr inbounds %struct.ptree* %26, i32 0, i32 3
  %27 = load i8* %p_b20, align 1
  %conv21 = sext i8 %27 to i32
  %cmp22 = icmp eq i32 %conv21, 0
  br i1 %cmp22, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.then19
  store i32 0, i32* %retval
  br label %return

if.end25:                                         ; preds = %if.then19
  %28 = load %struct.ptree** %t, align 8
  %p_m26 = getelementptr inbounds %struct.ptree* %28, i32 0, i32 1
  %29 = load %struct.ptree_mask** %p_m26, align 8
  %pm_mask = getelementptr inbounds %struct.ptree_mask* %29, i32 0, i32 0
  %30 = load i64* %pm_mask, align 8
  %31 = load %struct.ptree** %n.addr, align 8
  %p_m27 = getelementptr inbounds %struct.ptree* %31, i32 0, i32 1
  %32 = load %struct.ptree_mask** %p_m27, align 8
  %pm_mask28 = getelementptr inbounds %struct.ptree_mask* %32, i32 0, i32 0
  %33 = load i64* %pm_mask28, align 8
  %cmp29 = icmp ne i64 %30, %33
  br i1 %cmp29, label %if.then31, label %if.end32

if.then31:                                        ; preds = %if.end25
  store i32 0, i32* %retval
  br label %return

if.end32:                                         ; preds = %if.end25
  %34 = load %struct.ptree** %p, align 8
  store %struct.ptree* %34, %struct.ptree** %pt, align 8
  store %struct.ptree* %34, %struct.ptree** %pp, align 8
  br label %do.body33

do.body33:                                        ; preds = %do.cond47, %if.end32
  %35 = load %struct.ptree** %pt, align 8
  %p_b34 = getelementptr inbounds %struct.ptree* %35, i32 0, i32 3
  %36 = load i8* %p_b34, align 1
  %conv35 = sext i8 %36 to i32
  store i32 %conv35, i32* %i, align 4
  %37 = load %struct.ptree** %pt, align 8
  store %struct.ptree* %37, %struct.ptree** %pp, align 8
  %38 = load %struct.ptree** %pt, align 8
  %p_b36 = getelementptr inbounds %struct.ptree* %38, i32 0, i32 3
  %39 = load i8* %p_b36, align 1
  %conv37 = sext i8 %39 to i32
  %40 = load %struct.ptree** %p, align 8
  %p_key38 = getelementptr inbounds %struct.ptree* %40, i32 0, i32 0
  %41 = load i64* %p_key38, align 8
  %call39 = call i64 @bit(i32 %conv37, i64 %41)
  %tobool40 = icmp ne i64 %call39, 0
  br i1 %tobool40, label %cond.true41, label %cond.false43

cond.true41:                                      ; preds = %do.body33
  %42 = load %struct.ptree** %pt, align 8
  %p_right42 = getelementptr inbounds %struct.ptree* %42, i32 0, i32 5
  %43 = load %struct.ptree** %p_right42, align 8
  br label %cond.end45

cond.false43:                                     ; preds = %do.body33
  %44 = load %struct.ptree** %pt, align 8
  %p_left44 = getelementptr inbounds %struct.ptree* %44, i32 0, i32 4
  %45 = load %struct.ptree** %p_left44, align 8
  br label %cond.end45

cond.end45:                                       ; preds = %cond.false43, %cond.true41
  %cond46 = phi %struct.ptree* [ %43, %cond.true41 ], [ %45, %cond.false43 ]
  store %struct.ptree* %cond46, %struct.ptree** %pt, align 8
  br label %do.cond47

do.cond47:                                        ; preds = %cond.end45
  %46 = load i32* %i, align 4
  %47 = load %struct.ptree** %pt, align 8
  %p_b48 = getelementptr inbounds %struct.ptree* %47, i32 0, i32 3
  %48 = load i8* %p_b48, align 1
  %conv49 = sext i8 %48 to i32
  %cmp50 = icmp slt i32 %46, %conv49
  br i1 %cmp50, label %do.body33, label %do.end52

do.end52:                                         ; preds = %do.cond47
  %49 = load %struct.ptree** %pp, align 8
  %p_b53 = getelementptr inbounds %struct.ptree* %49, i32 0, i32 3
  %50 = load i8* %p_b53, align 1
  %conv54 = sext i8 %50 to i32
  %51 = load %struct.ptree** %p, align 8
  %p_key55 = getelementptr inbounds %struct.ptree* %51, i32 0, i32 0
  %52 = load i64* %p_key55, align 8
  %call56 = call i64 @bit(i32 %conv54, i64 %52)
  %tobool57 = icmp ne i64 %call56, 0
  br i1 %tobool57, label %if.then58, label %if.else

if.then58:                                        ; preds = %do.end52
  %53 = load %struct.ptree** %t, align 8
  %54 = load %struct.ptree** %pp, align 8
  %p_right59 = getelementptr inbounds %struct.ptree* %54, i32 0, i32 5
  store %struct.ptree* %53, %struct.ptree** %p_right59, align 8
  br label %if.end61

if.else:                                          ; preds = %do.end52
  %55 = load %struct.ptree** %t, align 8
  %56 = load %struct.ptree** %pp, align 8
  %p_left60 = getelementptr inbounds %struct.ptree* %56, i32 0, i32 4
  store %struct.ptree* %55, %struct.ptree** %p_left60, align 8
  br label %if.end61

if.end61:                                         ; preds = %if.else, %if.then58
  %57 = load %struct.ptree** %g, align 8
  %p_b62 = getelementptr inbounds %struct.ptree* %57, i32 0, i32 3
  %58 = load i8* %p_b62, align 1
  %conv63 = sext i8 %58 to i32
  %59 = load %struct.ptree** %n.addr, align 8
  %p_key64 = getelementptr inbounds %struct.ptree* %59, i32 0, i32 0
  %60 = load i64* %p_key64, align 8
  %call65 = call i64 @bit(i32 %conv63, i64 %60)
  %tobool66 = icmp ne i64 %call65, 0
  br i1 %tobool66, label %if.then67, label %if.else80

if.then67:                                        ; preds = %if.end61
  %61 = load %struct.ptree** %p, align 8
  %p_b68 = getelementptr inbounds %struct.ptree* %61, i32 0, i32 3
  %62 = load i8* %p_b68, align 1
  %conv69 = sext i8 %62 to i32
  %63 = load %struct.ptree** %n.addr, align 8
  %p_key70 = getelementptr inbounds %struct.ptree* %63, i32 0, i32 0
  %64 = load i64* %p_key70, align 8
  %call71 = call i64 @bit(i32 %conv69, i64 %64)
  %tobool72 = icmp ne i64 %call71, 0
  br i1 %tobool72, label %cond.true73, label %cond.false75

cond.true73:                                      ; preds = %if.then67
  %65 = load %struct.ptree** %p, align 8
  %p_left74 = getelementptr inbounds %struct.ptree* %65, i32 0, i32 4
  %66 = load %struct.ptree** %p_left74, align 8
  br label %cond.end77

cond.false75:                                     ; preds = %if.then67
  %67 = load %struct.ptree** %p, align 8
  %p_right76 = getelementptr inbounds %struct.ptree* %67, i32 0, i32 5
  %68 = load %struct.ptree** %p_right76, align 8
  br label %cond.end77

cond.end77:                                       ; preds = %cond.false75, %cond.true73
  %cond78 = phi %struct.ptree* [ %66, %cond.true73 ], [ %68, %cond.false75 ]
  %69 = load %struct.ptree** %g, align 8
  %p_right79 = getelementptr inbounds %struct.ptree* %69, i32 0, i32 5
  store %struct.ptree* %cond78, %struct.ptree** %p_right79, align 8
  br label %if.end93

if.else80:                                        ; preds = %if.end61
  %70 = load %struct.ptree** %p, align 8
  %p_b81 = getelementptr inbounds %struct.ptree* %70, i32 0, i32 3
  %71 = load i8* %p_b81, align 1
  %conv82 = sext i8 %71 to i32
  %72 = load %struct.ptree** %n.addr, align 8
  %p_key83 = getelementptr inbounds %struct.ptree* %72, i32 0, i32 0
  %73 = load i64* %p_key83, align 8
  %call84 = call i64 @bit(i32 %conv82, i64 %73)
  %tobool85 = icmp ne i64 %call84, 0
  br i1 %tobool85, label %cond.true86, label %cond.false88

cond.true86:                                      ; preds = %if.else80
  %74 = load %struct.ptree** %p, align 8
  %p_left87 = getelementptr inbounds %struct.ptree* %74, i32 0, i32 4
  %75 = load %struct.ptree** %p_left87, align 8
  br label %cond.end90

cond.false88:                                     ; preds = %if.else80
  %76 = load %struct.ptree** %p, align 8
  %p_right89 = getelementptr inbounds %struct.ptree* %76, i32 0, i32 5
  %77 = load %struct.ptree** %p_right89, align 8
  br label %cond.end90

cond.end90:                                       ; preds = %cond.false88, %cond.true86
  %cond91 = phi %struct.ptree* [ %75, %cond.true86 ], [ %77, %cond.false88 ]
  %78 = load %struct.ptree** %g, align 8
  %p_left92 = getelementptr inbounds %struct.ptree* %78, i32 0, i32 4
  store %struct.ptree* %cond91, %struct.ptree** %p_left92, align 8
  br label %if.end93

if.end93:                                         ; preds = %cond.end90, %cond.end77
  %79 = load %struct.ptree** %t, align 8
  %p_m94 = getelementptr inbounds %struct.ptree* %79, i32 0, i32 1
  %80 = load %struct.ptree_mask** %p_m94, align 8
  %pm_data = getelementptr inbounds %struct.ptree_mask* %80, i32 0, i32 1
  %81 = load i8** %pm_data, align 8
  %tobool95 = icmp ne i8* %81, null
  br i1 %tobool95, label %if.then96, label %if.end99

if.then96:                                        ; preds = %if.end93
  %82 = load %struct.ptree** %t, align 8
  %p_m97 = getelementptr inbounds %struct.ptree* %82, i32 0, i32 1
  %83 = load %struct.ptree_mask** %p_m97, align 8
  %pm_data98 = getelementptr inbounds %struct.ptree_mask* %83, i32 0, i32 1
  %84 = load i8** %pm_data98, align 8
  call void @free(i8* %84)
  br label %if.end99

if.end99:                                         ; preds = %if.then96, %if.end93
  %85 = load %struct.ptree** %t, align 8
  %p_m100 = getelementptr inbounds %struct.ptree* %85, i32 0, i32 1
  %86 = load %struct.ptree_mask** %p_m100, align 8
  %87 = bitcast %struct.ptree_mask* %86 to i8*
  call void @free(i8* %87)
  %88 = load %struct.ptree** %t, align 8
  %89 = load %struct.ptree** %p, align 8
  %cmp101 = icmp ne %struct.ptree* %88, %89
  br i1 %cmp101, label %if.then103, label %if.end110

if.then103:                                       ; preds = %if.end99
  %90 = load %struct.ptree** %p, align 8
  %p_key104 = getelementptr inbounds %struct.ptree* %90, i32 0, i32 0
  %91 = load i64* %p_key104, align 8
  %92 = load %struct.ptree** %t, align 8
  %p_key105 = getelementptr inbounds %struct.ptree* %92, i32 0, i32 0
  store i64 %91, i64* %p_key105, align 8
  %93 = load %struct.ptree** %p, align 8
  %p_m106 = getelementptr inbounds %struct.ptree* %93, i32 0, i32 1
  %94 = load %struct.ptree_mask** %p_m106, align 8
  %95 = load %struct.ptree** %t, align 8
  %p_m107 = getelementptr inbounds %struct.ptree* %95, i32 0, i32 1
  store %struct.ptree_mask* %94, %struct.ptree_mask** %p_m107, align 8
  %96 = load %struct.ptree** %p, align 8
  %p_mlen108 = getelementptr inbounds %struct.ptree* %96, i32 0, i32 2
  %97 = load i8* %p_mlen108, align 1
  %98 = load %struct.ptree** %t, align 8
  %p_mlen109 = getelementptr inbounds %struct.ptree* %98, i32 0, i32 2
  store i8 %97, i8* %p_mlen109, align 1
  br label %if.end110

if.end110:                                        ; preds = %if.then103, %if.end99
  %99 = load %struct.ptree** %p, align 8
  %100 = bitcast %struct.ptree* %99 to i8*
  call void @free(i8* %100)
  store i32 1, i32* %retval
  br label %return

if.end111:                                        ; preds = %if.end15
  store i32 0, i32* %stop, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end111
  %101 = load i32* %i, align 4
  %102 = load %struct.ptree** %t, align 8
  %p_mlen112 = getelementptr inbounds %struct.ptree* %102, i32 0, i32 2
  %103 = load i8* %p_mlen112, align 1
  %conv113 = zext i8 %103 to i32
  %cmp114 = icmp slt i32 %101, %conv113
  br i1 %cmp114, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %104 = load i32* %stop, align 4
  %cmp116 = icmp eq i32 %104, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %105 = phi i1 [ false, %for.cond ], [ %cmp116, %land.rhs ]
  br i1 %105, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %106 = load %struct.ptree** %n.addr, align 8
  %p_m118 = getelementptr inbounds %struct.ptree* %106, i32 0, i32 1
  %107 = load %struct.ptree_mask** %p_m118, align 8
  %pm_mask119 = getelementptr inbounds %struct.ptree_mask* %107, i32 0, i32 0
  %108 = load i64* %pm_mask119, align 8
  %109 = load i32* %i, align 4
  %idxprom = sext i32 %109 to i64
  %110 = load %struct.ptree** %t, align 8
  %p_m120 = getelementptr inbounds %struct.ptree* %110, i32 0, i32 1
  %111 = load %struct.ptree_mask** %p_m120, align 8
  %arrayidx = getelementptr inbounds %struct.ptree_mask* %111, i64 %idxprom
  %pm_mask121 = getelementptr inbounds %struct.ptree_mask* %arrayidx, i32 0, i32 0
  %112 = load i64* %pm_mask121, align 8
  %cmp122 = icmp eq i64 %108, %112
  br i1 %cmp122, label %if.then124, label %if.end125

if.then124:                                       ; preds = %for.body
  store i32 1, i32* %stop, align 4
  br label %if.end125

if.end125:                                        ; preds = %if.then124, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end125
  %113 = load i32* %i, align 4
  %inc = add nsw i32 %113, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %114 = load i32* %i, align 4
  %115 = load %struct.ptree** %t, align 8
  %p_mlen126 = getelementptr inbounds %struct.ptree* %115, i32 0, i32 2
  %116 = load i8* %p_mlen126, align 1
  %conv127 = zext i8 %116 to i32
  %cmp128 = icmp sge i32 %114, %conv127
  br i1 %cmp128, label %if.then130, label %if.end131

if.then130:                                       ; preds = %for.end
  store i32 0, i32* %retval
  br label %return

if.end131:                                        ; preds = %for.end
  %117 = load %struct.ptree** %t, align 8
  %p_mlen132 = getelementptr inbounds %struct.ptree* %117, i32 0, i32 2
  %118 = load i8* %p_mlen132, align 1
  %conv133 = zext i8 %118 to i32
  %sub = sub nsw i32 %conv133, 1
  %conv134 = sext i32 %sub to i64
  %mul = mul i64 16, %conv134
  %call135 = call i8* @malloc(i64 %mul)
  %119 = bitcast i8* %call135 to %struct.ptree_mask*
  store %struct.ptree_mask* %119, %struct.ptree_mask** %buf, align 8
  store i32 0, i32* %i, align 4
  %120 = load %struct.ptree_mask** %buf, align 8
  store %struct.ptree_mask* %120, %struct.ptree_mask** %pm, align 8
  br label %for.cond136

for.cond136:                                      ; preds = %for.inc153, %if.end131
  %121 = load i32* %i, align 4
  %122 = load %struct.ptree** %t, align 8
  %p_mlen137 = getelementptr inbounds %struct.ptree* %122, i32 0, i32 2
  %123 = load i8* %p_mlen137, align 1
  %conv138 = zext i8 %123 to i32
  %cmp139 = icmp slt i32 %121, %conv138
  br i1 %cmp139, label %for.body141, label %for.end155

for.body141:                                      ; preds = %for.cond136
  %124 = load %struct.ptree** %n.addr, align 8
  %p_m142 = getelementptr inbounds %struct.ptree* %124, i32 0, i32 1
  %125 = load %struct.ptree_mask** %p_m142, align 8
  %pm_mask143 = getelementptr inbounds %struct.ptree_mask* %125, i32 0, i32 0
  %126 = load i64* %pm_mask143, align 8
  %127 = load i32* %i, align 4
  %idxprom144 = sext i32 %127 to i64
  %128 = load %struct.ptree** %t, align 8
  %p_m145 = getelementptr inbounds %struct.ptree* %128, i32 0, i32 1
  %129 = load %struct.ptree_mask** %p_m145, align 8
  %arrayidx146 = getelementptr inbounds %struct.ptree_mask* %129, i64 %idxprom144
  %pm_mask147 = getelementptr inbounds %struct.ptree_mask* %arrayidx146, i32 0, i32 0
  %130 = load i64* %pm_mask147, align 8
  %cmp148 = icmp ne i64 %126, %130
  br i1 %cmp148, label %if.then150, label %if.end152

if.then150:                                       ; preds = %for.body141
  %131 = load %struct.ptree** %t, align 8
  %p_m151 = getelementptr inbounds %struct.ptree* %131, i32 0, i32 1
  %132 = load %struct.ptree_mask** %p_m151, align 8
  %133 = load i32* %i, align 4
  %idx.ext = sext i32 %133 to i64
  %add.ptr = getelementptr inbounds %struct.ptree_mask* %132, i64 %idx.ext
  %134 = bitcast %struct.ptree_mask* %add.ptr to i8*
  %135 = load %struct.ptree_mask** %pm, align 8
  %incdec.ptr = getelementptr inbounds %struct.ptree_mask* %135, i32 1
  store %struct.ptree_mask* %incdec.ptr, %struct.ptree_mask** %pm, align 8
  %136 = bitcast %struct.ptree_mask* %135 to i8*
  call void @bcopy(i8* %134, i8* %136, i64 16)
  br label %if.end152

if.end152:                                        ; preds = %if.then150, %for.body141
  br label %for.inc153

for.inc153:                                       ; preds = %if.end152
  %137 = load i32* %i, align 4
  %inc154 = add nsw i32 %137, 1
  store i32 %inc154, i32* %i, align 4
  br label %for.cond136

for.end155:                                       ; preds = %for.cond136
  %138 = load %struct.ptree** %t, align 8
  %p_mlen156 = getelementptr inbounds %struct.ptree* %138, i32 0, i32 2
  %139 = load i8* %p_mlen156, align 1
  %dec = add i8 %139, -1
  store i8 %dec, i8* %p_mlen156, align 1
  %140 = load %struct.ptree** %t, align 8
  %p_m157 = getelementptr inbounds %struct.ptree* %140, i32 0, i32 1
  %141 = load %struct.ptree_mask** %p_m157, align 8
  %142 = bitcast %struct.ptree_mask* %141 to i8*
  call void @free(i8* %142)
  %143 = load %struct.ptree_mask** %buf, align 8
  %144 = load %struct.ptree** %t, align 8
  %p_m158 = getelementptr inbounds %struct.ptree* %144, i32 0, i32 1
  store %struct.ptree_mask* %143, %struct.ptree_mask** %p_m158, align 8
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end155, %if.then130, %if.end110, %if.then31, %if.then24, %if.then14, %if.then
  %145 = load i32* %retval
  ret i32 %145
}

; Function Attrs: nounwind ssp uwtable
define %struct.ptree* @pat_search(i64 %key, %struct.ptree* %head) #0 {
entry:
  %retval = alloca %struct.ptree*, align 8
  %key.addr = alloca i64, align 8
  %head.addr = alloca %struct.ptree*, align 8
  %p = alloca %struct.ptree*, align 8
  %t = alloca %struct.ptree*, align 8
  %i = alloca i32, align 4
  store i64 %key, i64* %key.addr, align 8
  store %struct.ptree* %head, %struct.ptree** %head.addr, align 8
  store %struct.ptree* null, %struct.ptree** %p, align 8
  %0 = load %struct.ptree** %head.addr, align 8
  store %struct.ptree* %0, %struct.ptree** %t, align 8
  %1 = load %struct.ptree** %t, align 8
  %tobool = icmp ne %struct.ptree* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.ptree* null, %struct.ptree** %retval
  br label %return

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %2 = load %struct.ptree** %t, align 8
  %p_key = getelementptr inbounds %struct.ptree* %2, i32 0, i32 0
  %3 = load i64* %p_key, align 8
  %4 = load i64* %key.addr, align 8
  %5 = load %struct.ptree** %t, align 8
  %p_m = getelementptr inbounds %struct.ptree* %5, i32 0, i32 1
  %6 = load %struct.ptree_mask** %p_m, align 8
  %pm_mask = getelementptr inbounds %struct.ptree_mask* %6, i32 0, i32 0
  %7 = load i64* %pm_mask, align 8
  %and = and i64 %4, %7
  %cmp = icmp eq i64 %3, %and
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %do.body
  %8 = load %struct.ptree** %t, align 8
  store %struct.ptree* %8, %struct.ptree** %p, align 8
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %do.body
  %9 = load %struct.ptree** %t, align 8
  %p_b = getelementptr inbounds %struct.ptree* %9, i32 0, i32 3
  %10 = load i8* %p_b, align 1
  %conv = sext i8 %10 to i32
  store i32 %conv, i32* %i, align 4
  %11 = load %struct.ptree** %t, align 8
  %p_b3 = getelementptr inbounds %struct.ptree* %11, i32 0, i32 3
  %12 = load i8* %p_b3, align 1
  %conv4 = sext i8 %12 to i32
  %13 = load i64* %key.addr, align 8
  %call = call i64 @bit(i32 %conv4, i64 %13)
  %tobool5 = icmp ne i64 %call, 0
  br i1 %tobool5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end2
  %14 = load %struct.ptree** %t, align 8
  %p_right = getelementptr inbounds %struct.ptree* %14, i32 0, i32 5
  %15 = load %struct.ptree** %p_right, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end2
  %16 = load %struct.ptree** %t, align 8
  %p_left = getelementptr inbounds %struct.ptree* %16, i32 0, i32 4
  %17 = load %struct.ptree** %p_left, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.ptree* [ %15, %cond.true ], [ %17, %cond.false ]
  store %struct.ptree* %cond, %struct.ptree** %t, align 8
  br label %do.cond

do.cond:                                          ; preds = %cond.end
  %18 = load i32* %i, align 4
  %19 = load %struct.ptree** %t, align 8
  %p_b6 = getelementptr inbounds %struct.ptree* %19, i32 0, i32 3
  %20 = load i8* %p_b6, align 1
  %conv7 = sext i8 %20 to i32
  %cmp8 = icmp slt i32 %18, %conv7
  br i1 %cmp8, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %21 = load %struct.ptree** %t, align 8
  %p_key10 = getelementptr inbounds %struct.ptree* %21, i32 0, i32 0
  %22 = load i64* %p_key10, align 8
  %23 = load i64* %key.addr, align 8
  %24 = load %struct.ptree** %t, align 8
  %p_m11 = getelementptr inbounds %struct.ptree* %24, i32 0, i32 1
  %25 = load %struct.ptree_mask** %p_m11, align 8
  %pm_mask12 = getelementptr inbounds %struct.ptree_mask* %25, i32 0, i32 0
  %26 = load i64* %pm_mask12, align 8
  %and13 = and i64 %23, %26
  %cmp14 = icmp eq i64 %22, %and13
  br i1 %cmp14, label %cond.true16, label %cond.false17

cond.true16:                                      ; preds = %do.end
  %27 = load %struct.ptree** %t, align 8
  br label %cond.end18

cond.false17:                                     ; preds = %do.end
  %28 = load %struct.ptree** %p, align 8
  br label %cond.end18

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond19 = phi %struct.ptree* [ %27, %cond.true16 ], [ %28, %cond.false17 ]
  store %struct.ptree* %cond19, %struct.ptree** %retval
  br label %return

return:                                           ; preds = %cond.end18, %if.then
  %29 = load %struct.ptree** %retval
  ret %struct.ptree* %29
}

attributes #0 = { nounwind ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
