; ModuleID = 'timing.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.9.0"

%struct.adpcm_state = type { i16, i8 }

@pcmdata = common global [10240 x i16] zeroinitializer, align 16
@adpcmdata = common global [5120 x i8] zeroinitializer, align 16
@coder_1_state = common global %struct.adpcm_state zeroinitializer, align 2
@.str = private unnamed_addr constant [26 x i8] c"Coder: %d Ksample/second\0A\00", align 1
@.str1 = private unnamed_addr constant [49 x i8] c"  (coded %d blocks of %d samples in %d seconds)\0A\00", align 1
@coder_2_state = common global %struct.adpcm_state zeroinitializer, align 2
@pcmdata_2 = common global [10240 x i16] zeroinitializer, align 16
@decoder_state = common global %struct.adpcm_state zeroinitializer, align 2
@.str2 = private unnamed_addr constant [28 x i8] c"Decoder: %d Ksample/second\0A\00", align 1
@.str3 = private unnamed_addr constant [57 x i8] c"  (coded&decoded %d blocks of %d samples in %d seconds)\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %t0 = alloca i32, align 4
  %t1 = alloca i32, align 4
  %t2 = alloca i32, align 4
  %t3 = alloca i32, align 4
  %count = alloca i32, align 4
  %count2 = alloca i32, align 4
  store i32 0, i32* %retval
  store i32 0, i32* %count, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %cmp = icmp slt i32 %0, 10240
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 (...)* @random()
  %and = and i32 %call, 65535
  %conv = trunc i32 %and to i16
  %1 = load i32* %i, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [10240 x i16]* @pcmdata, i32 0, i64 %idxprom
  store i16 %conv, i16* %arrayidx, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call1 = call i32 (i32, ...)* bitcast (i32 (...)* @time to i32 (i32, ...)*)(i32 0)
  store i32 %call1, i32* %t0, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.end
  call void @adpcm_coder(i16* getelementptr inbounds ([10240 x i16]* @pcmdata, i32 0, i32 0), i8* getelementptr inbounds ([5120 x i8]* @adpcmdata, i32 0, i32 0), i32 10240, %struct.adpcm_state* @coder_1_state)
  %call2 = call i32 (i32, ...)* bitcast (i32 (...)* @time to i32 (i32, ...)*)(i32 0)
  store i32 %call2, i32* %t1, align 4
  %3 = load i32* %count, align 4
  %inc3 = add nsw i32 %3, 1
  store i32 %inc3, i32* %count, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %4 = load i32* %t1, align 4
  %5 = load i32* %t0, align 4
  %add = add nsw i32 %5, 10
  %cmp4 = icmp slt i32 %4, %add
  br i1 %cmp4, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %6 = load i32* %count, align 4
  %mul = mul nsw i32 %6, 10
  %mul6 = mul nsw i32 %mul, 1024
  %7 = load i32* %t1, align 4
  %8 = load i32* %t0, align 4
  %sub = sub nsw i32 %7, %8
  %mul7 = mul nsw i32 1000, %sub
  %div = sdiv i32 %mul6, %mul7
  %call8 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([26 x i8]* @.str, i32 0, i32 0), i32 %div)
  %9 = load i32* %count, align 4
  %10 = load i32* %t1, align 4
  %11 = load i32* %t0, align 4
  %sub9 = sub nsw i32 %10, %11
  %call10 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([49 x i8]* @.str1, i32 0, i32 0), i32 %9, i32 10240, i32 %sub9)
  %call11 = call i32 (i32, ...)* bitcast (i32 (...)* @time to i32 (i32, ...)*)(i32 0)
  store i32 %call11, i32* %t2, align 4
  %12 = load i32* %count, align 4
  store i32 %12, i32* %count2, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %do.end
  %13 = load i32* %count2, align 4
  %cmp12 = icmp sgt i32 %13, 0
  br i1 %cmp12, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @adpcm_coder(i16* getelementptr inbounds ([10240 x i16]* @pcmdata, i32 0, i32 0), i8* getelementptr inbounds ([5120 x i8]* @adpcmdata, i32 0, i32 0), i32 10240, %struct.adpcm_state* @coder_2_state)
  call void @adpcm_decoder(i8* getelementptr inbounds ([5120 x i8]* @adpcmdata, i32 0, i32 0), i16* getelementptr inbounds ([10240 x i16]* @pcmdata_2, i32 0, i32 0), i32 10240, %struct.adpcm_state* @decoder_state)
  %14 = load i32* %count2, align 4
  %dec = add nsw i32 %14, -1
  store i32 %dec, i32* %count2, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call14 = call i32 (i32, ...)* bitcast (i32 (...)* @time to i32 (i32, ...)*)(i32 0)
  store i32 %call14, i32* %t3, align 4
  %15 = load i32* %count, align 4
  %mul15 = mul nsw i32 %15, 10
  %mul16 = mul nsw i32 %mul15, 1024
  %16 = load i32* %t3, align 4
  %17 = load i32* %t2, align 4
  %sub17 = sub nsw i32 %16, %17
  %18 = load i32* %t1, align 4
  %sub18 = sub nsw i32 %sub17, %18
  %19 = load i32* %t0, align 4
  %add19 = add nsw i32 %sub18, %19
  %mul20 = mul nsw i32 1000, %add19
  %div21 = sdiv i32 %mul16, %mul20
  %call22 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i32 %div21)
  %20 = load i32* %count, align 4
  %21 = load i32* %t3, align 4
  %22 = load i32* %t2, align 4
  %sub23 = sub nsw i32 %21, %22
  %call24 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([57 x i8]* @.str3, i32 0, i32 0), i32 %20, i32 10240, i32 %sub23)
  call void @exit(i32 0) #3
  unreachable

return:                                           ; No predecessors!
  %23 = load i32* %retval
  ret i32 %23
}

declare i32 @random(...) #1

declare i32 @time(...) #1

declare void @adpcm_coder(i16*, i8*, i32, %struct.adpcm_state*) #1

declare i32 @printf(i8*, ...) #1

declare void @adpcm_decoder(i8*, i16*, i32, %struct.adpcm_state*) #1

; Function Attrs: noreturn
declare void @exit(i32) #2

attributes #0 = { nounwind ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }
