; ModuleID = 'main.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.9.0"

@.str = private unnamed_addr constant [32 x i8] c"Usage: fft <waves> <length> -i\0A\00", align 1
@.str1 = private unnamed_addr constant [28 x i8] c"-i performs an inverse fft\0A\00", align 1
@.str2 = private unnamed_addr constant [30 x i8] c"make <waves> random sinusoids\00", align 1
@.str3 = private unnamed_addr constant [35 x i8] c"<length> is the number of samples\0A\00", align 1
@.str4 = private unnamed_addr constant [3 x i8] c"-i\00", align 1
@.str5 = private unnamed_addr constant [10 x i8] c"RealOut:\0A\00", align 1
@.str6 = private unnamed_addr constant [5 x i8] c"%f \09\00", align 1
@.str7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str8 = private unnamed_addr constant [10 x i8] c"ImagOut:\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %MAXSIZE = alloca i32, align 4
  %MAXWAVES = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %RealIn = alloca float*, align 8
  %ImagIn = alloca float*, align 8
  %RealOut = alloca float*, align 8
  %ImagOut = alloca float*, align 8
  %coeff = alloca float*, align 8
  %amp = alloca float*, align 8
  %invfft = alloca i32, align 4
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  store i32 0, i32* %invfft, align 4
  %0 = load i32* %argc.addr, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([32 x i8]* @.str, i32 0, i32 0))
  %call1 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([28 x i8]* @.str1, i32 0, i32 0))
  %call2 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([30 x i8]* @.str2, i32 0, i32 0))
  %call3 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([35 x i8]* @.str3, i32 0, i32 0))
  call void @exit(i32 -1) #4
  unreachable

if.else:                                          ; preds = %entry
  %1 = load i32* %argc.addr, align 4
  %cmp4 = icmp eq i32 %1, 4
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %if.else
  %2 = load i8*** %argv.addr, align 8
  %arrayidx = getelementptr inbounds i8** %2, i64 3
  %3 = load i8** %arrayidx, align 8
  %call6 = call i32 @strncmp(i8* %3, i8* getelementptr inbounds ([3 x i8]* @.str4, i32 0, i32 0), i64 2)
  %tobool = icmp ne i32 %call6, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %invfft, align 4
  br label %if.end

if.end:                                           ; preds = %if.then5, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end
  %4 = load i8*** %argv.addr, align 8
  %arrayidx8 = getelementptr inbounds i8** %4, i64 2
  %5 = load i8** %arrayidx8, align 8
  %call9 = call i32 @atoi(i8* %5)
  store i32 %call9, i32* %MAXSIZE, align 4
  %6 = load i8*** %argv.addr, align 8
  %arrayidx10 = getelementptr inbounds i8** %6, i64 1
  %7 = load i8** %arrayidx10, align 8
  %call11 = call i32 @atoi(i8* %7)
  store i32 %call11, i32* %MAXWAVES, align 4
  call void @srand(i32 1)
  %8 = load i32* %MAXSIZE, align 4
  %conv = zext i32 %8 to i64
  %mul = mul i64 4, %conv
  %call12 = call i8* @malloc(i64 %mul)
  %9 = bitcast i8* %call12 to float*
  store float* %9, float** %RealIn, align 8
  %10 = load i32* %MAXSIZE, align 4
  %conv13 = zext i32 %10 to i64
  %mul14 = mul i64 4, %conv13
  %call15 = call i8* @malloc(i64 %mul14)
  %11 = bitcast i8* %call15 to float*
  store float* %11, float** %ImagIn, align 8
  %12 = load i32* %MAXSIZE, align 4
  %conv16 = zext i32 %12 to i64
  %mul17 = mul i64 4, %conv16
  %call18 = call i8* @malloc(i64 %mul17)
  %13 = bitcast i8* %call18 to float*
  store float* %13, float** %RealOut, align 8
  %14 = load i32* %MAXSIZE, align 4
  %conv19 = zext i32 %14 to i64
  %mul20 = mul i64 4, %conv19
  %call21 = call i8* @malloc(i64 %mul20)
  %15 = bitcast i8* %call21 to float*
  store float* %15, float** %ImagOut, align 8
  %16 = load i32* %MAXWAVES, align 4
  %conv22 = zext i32 %16 to i64
  %mul23 = mul i64 4, %conv22
  %call24 = call i8* @malloc(i64 %mul23)
  %17 = bitcast i8* %call24 to float*
  store float* %17, float** %coeff, align 8
  %18 = load i32* %MAXWAVES, align 4
  %conv25 = zext i32 %18 to i64
  %mul26 = mul i64 4, %conv25
  %call27 = call i8* @malloc(i64 %mul26)
  %19 = bitcast i8* %call27 to float*
  store float* %19, float** %amp, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end7
  %20 = load i32* %i, align 4
  %21 = load i32* %MAXWAVES, align 4
  %cmp28 = icmp ult i32 %20, %21
  br i1 %cmp28, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call30 = call i32 @rand()
  %rem = srem i32 %call30, 1000
  %conv31 = sitofp i32 %rem to float
  %22 = load i32* %i, align 4
  %idxprom = zext i32 %22 to i64
  %23 = load float** %coeff, align 8
  %arrayidx32 = getelementptr inbounds float* %23, i64 %idxprom
  store float %conv31, float* %arrayidx32, align 4
  %call33 = call i32 @rand()
  %rem34 = srem i32 %call33, 1000
  %conv35 = sitofp i32 %rem34 to float
  %24 = load i32* %i, align 4
  %idxprom36 = zext i32 %24 to i64
  %25 = load float** %amp, align 8
  %arrayidx37 = getelementptr inbounds float* %25, i64 %idxprom36
  store float %conv35, float* %arrayidx37, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %26 = load i32* %i, align 4
  %inc = add i32 %26, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond38

for.cond38:                                       ; preds = %for.inc88, %for.end
  %27 = load i32* %i, align 4
  %28 = load i32* %MAXSIZE, align 4
  %cmp39 = icmp ult i32 %27, %28
  br i1 %cmp39, label %for.body41, label %for.end90

for.body41:                                       ; preds = %for.cond38
  %29 = load i32* %i, align 4
  %idxprom42 = zext i32 %29 to i64
  %30 = load float** %RealIn, align 8
  %arrayidx43 = getelementptr inbounds float* %30, i64 %idxprom42
  store float 0.000000e+00, float* %arrayidx43, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond44

for.cond44:                                       ; preds = %for.inc85, %for.body41
  %31 = load i32* %j, align 4
  %32 = load i32* %MAXWAVES, align 4
  %cmp45 = icmp ult i32 %31, %32
  br i1 %cmp45, label %for.body47, label %for.end87

for.body47:                                       ; preds = %for.cond44
  %call48 = call i32 @rand()
  %rem49 = srem i32 %call48, 2
  %tobool50 = icmp ne i32 %rem49, 0
  br i1 %tobool50, label %if.then51, label %if.else66

if.then51:                                        ; preds = %for.body47
  %33 = load i32* %j, align 4
  %idxprom52 = zext i32 %33 to i64
  %34 = load float** %coeff, align 8
  %arrayidx53 = getelementptr inbounds float* %34, i64 %idxprom52
  %35 = load float* %arrayidx53, align 4
  %conv54 = fpext float %35 to double
  %36 = load i32* %j, align 4
  %idxprom55 = zext i32 %36 to i64
  %37 = load float** %amp, align 8
  %arrayidx56 = getelementptr inbounds float* %37, i64 %idxprom55
  %38 = load float* %arrayidx56, align 4
  %39 = load i32* %i, align 4
  %conv57 = uitofp i32 %39 to float
  %mul58 = fmul float %38, %conv57
  %conv59 = fpext float %mul58 to double
  %call60 = call double @cos(double %conv59) #5
  %mul61 = fmul double %conv54, %call60
  %40 = load i32* %i, align 4
  %idxprom62 = zext i32 %40 to i64
  %41 = load float** %RealIn, align 8
  %arrayidx63 = getelementptr inbounds float* %41, i64 %idxprom62
  %42 = load float* %arrayidx63, align 4
  %conv64 = fpext float %42 to double
  %add = fadd double %conv64, %mul61
  %conv65 = fptrunc double %add to float
  store float %conv65, float* %arrayidx63, align 4
  br label %if.end82

if.else66:                                        ; preds = %for.body47
  %43 = load i32* %j, align 4
  %idxprom67 = zext i32 %43 to i64
  %44 = load float** %coeff, align 8
  %arrayidx68 = getelementptr inbounds float* %44, i64 %idxprom67
  %45 = load float* %arrayidx68, align 4
  %conv69 = fpext float %45 to double
  %46 = load i32* %j, align 4
  %idxprom70 = zext i32 %46 to i64
  %47 = load float** %amp, align 8
  %arrayidx71 = getelementptr inbounds float* %47, i64 %idxprom70
  %48 = load float* %arrayidx71, align 4
  %49 = load i32* %i, align 4
  %conv72 = uitofp i32 %49 to float
  %mul73 = fmul float %48, %conv72
  %conv74 = fpext float %mul73 to double
  %call75 = call double @sin(double %conv74) #5
  %mul76 = fmul double %conv69, %call75
  %50 = load i32* %i, align 4
  %idxprom77 = zext i32 %50 to i64
  %51 = load float** %RealIn, align 8
  %arrayidx78 = getelementptr inbounds float* %51, i64 %idxprom77
  %52 = load float* %arrayidx78, align 4
  %conv79 = fpext float %52 to double
  %add80 = fadd double %conv79, %mul76
  %conv81 = fptrunc double %add80 to float
  store float %conv81, float* %arrayidx78, align 4
  br label %if.end82

if.end82:                                         ; preds = %if.else66, %if.then51
  %53 = load i32* %i, align 4
  %idxprom83 = zext i32 %53 to i64
  %54 = load float** %ImagIn, align 8
  %arrayidx84 = getelementptr inbounds float* %54, i64 %idxprom83
  store float 0.000000e+00, float* %arrayidx84, align 4
  br label %for.inc85

for.inc85:                                        ; preds = %if.end82
  %55 = load i32* %j, align 4
  %inc86 = add i32 %55, 1
  store i32 %inc86, i32* %j, align 4
  br label %for.cond44

for.end87:                                        ; preds = %for.cond44
  br label %for.inc88

for.inc88:                                        ; preds = %for.end87
  %56 = load i32* %i, align 4
  %inc89 = add i32 %56, 1
  store i32 %inc89, i32* %i, align 4
  br label %for.cond38

for.end90:                                        ; preds = %for.cond38
  %57 = load i32* %MAXSIZE, align 4
  %58 = load i32* %invfft, align 4
  %59 = load float** %RealIn, align 8
  %60 = load float** %ImagIn, align 8
  %61 = load float** %RealOut, align 8
  %62 = load float** %ImagOut, align 8
  %call91 = call i32 (i32, i32, float*, float*, float*, float*, ...)* bitcast (i32 (...)* @fft_float to i32 (i32, i32, float*, float*, float*, float*, ...)*)(i32 %57, i32 %58, float* %59, float* %60, float* %61, float* %62)
  %call92 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([10 x i8]* @.str5, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond93

for.cond93:                                       ; preds = %for.inc101, %for.end90
  %63 = load i32* %i, align 4
  %64 = load i32* %MAXSIZE, align 4
  %cmp94 = icmp ult i32 %63, %64
  br i1 %cmp94, label %for.body96, label %for.end103

for.body96:                                       ; preds = %for.cond93
  %65 = load i32* %i, align 4
  %idxprom97 = zext i32 %65 to i64
  %66 = load float** %RealOut, align 8
  %arrayidx98 = getelementptr inbounds float* %66, i64 %idxprom97
  %67 = load float* %arrayidx98, align 4
  %conv99 = fpext float %67 to double
  %call100 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), double %conv99)
  br label %for.inc101

for.inc101:                                       ; preds = %for.body96
  %68 = load i32* %i, align 4
  %inc102 = add i32 %68, 1
  store i32 %inc102, i32* %i, align 4
  br label %for.cond93

for.end103:                                       ; preds = %for.cond93
  %call104 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str7, i32 0, i32 0))
  %call105 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([10 x i8]* @.str8, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond106

for.cond106:                                      ; preds = %for.inc114, %for.end103
  %69 = load i32* %i, align 4
  %70 = load i32* %MAXSIZE, align 4
  %cmp107 = icmp ult i32 %69, %70
  br i1 %cmp107, label %for.body109, label %for.end116

for.body109:                                      ; preds = %for.cond106
  %71 = load i32* %i, align 4
  %idxprom110 = zext i32 %71 to i64
  %72 = load float** %ImagOut, align 8
  %arrayidx111 = getelementptr inbounds float* %72, i64 %idxprom110
  %73 = load float* %arrayidx111, align 4
  %conv112 = fpext float %73 to double
  %call113 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), double %conv112)
  br label %for.inc114

for.inc114:                                       ; preds = %for.body109
  %74 = load i32* %i, align 4
  %inc115 = add i32 %74, 1
  store i32 %inc115, i32* %i, align 4
  br label %for.cond106

for.end116:                                       ; preds = %for.cond106
  %call117 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str7, i32 0, i32 0))
  %75 = load float** %RealIn, align 8
  %76 = bitcast float* %75 to i8*
  call void @free(i8* %76)
  %77 = load float** %ImagIn, align 8
  %78 = bitcast float* %77 to i8*
  call void @free(i8* %78)
  %79 = load float** %RealOut, align 8
  %80 = bitcast float* %79 to i8*
  call void @free(i8* %80)
  %81 = load float** %ImagOut, align 8
  %82 = bitcast float* %81 to i8*
  call void @free(i8* %82)
  %83 = load float** %coeff, align 8
  %84 = bitcast float* %83 to i8*
  call void @free(i8* %84)
  %85 = load float** %amp, align 8
  %86 = bitcast float* %85 to i8*
  call void @free(i8* %86)
  call void @exit(i32 0) #4
  unreachable

return:                                           ; No predecessors!
  %87 = load i32* %retval
  ret i32 %87
}

declare i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare void @exit(i32) #2

declare i32 @strncmp(i8*, i8*, i64) #1

declare i32 @atoi(i8*) #1

declare void @srand(i32) #1

declare i8* @malloc(i64) #1

declare i32 @rand() #1

; Function Attrs: nounwind readnone
declare double @cos(double) #3

; Function Attrs: nounwind readnone
declare double @sin(double) #3

declare i32 @fft_float(...) #1

declare void @free(i8*) #1

attributes #0 = { nounwind ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }
attributes #5 = { nounwind readnone }
