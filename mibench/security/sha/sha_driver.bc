; ModuleID = 'sha_driver.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.9.0"

%struct.__sFILE = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, i8*, i32 (i8*)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i32 (i8*, i8*, i32)*, %struct.__sbuf, %struct.__sFILEX*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i64 }
%struct.__sbuf = type { i8*, i32 }
%struct.__sFILEX = type opaque
%struct.SHA_INFO = type { [5 x i64], i64, i64, [16 x i64] }

@__stdinp = external global %struct.__sFILE*
@.str = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str1 = private unnamed_addr constant [30 x i8] c"error opening %s for reading\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %fin = alloca %struct.__sFILE*, align 8
  %sha_info = alloca %struct.SHA_INFO, align 8
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  %0 = load i32* %argc.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.__sFILE** @__stdinp, align 8
  store %struct.__sFILE* %1, %struct.__sFILE** %fin, align 8
  %2 = load %struct.__sFILE** %fin, align 8
  call void @sha_stream(%struct.SHA_INFO* %sha_info, %struct.__sFILE* %2)
  call void @sha_print(%struct.SHA_INFO* %sha_info)
  br label %if.end6

if.else:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.else
  %3 = load i32* %argc.addr, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %argc.addr, align 4
  %tobool = icmp ne i32 %dec, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*** %argv.addr, align 8
  %incdec.ptr = getelementptr inbounds i8** %4, i32 1
  store i8** %incdec.ptr, i8*** %argv.addr, align 8
  %5 = load i8** %incdec.ptr, align 8
  %call = call %struct.__sFILE* @"\01_fopen"(i8* %5, i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0))
  store %struct.__sFILE* %call, %struct.__sFILE** %fin, align 8
  %6 = load %struct.__sFILE** %fin, align 8
  %cmp1 = icmp eq %struct.__sFILE* %6, null
  br i1 %cmp1, label %if.then2, label %if.else4

if.then2:                                         ; preds = %while.body
  %7 = load i8*** %argv.addr, align 8
  %8 = load i8** %7, align 8
  %call3 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([30 x i8]* @.str1, i32 0, i32 0), i8* %8)
  br label %if.end

if.else4:                                         ; preds = %while.body
  %9 = load %struct.__sFILE** %fin, align 8
  call void @sha_stream(%struct.SHA_INFO* %sha_info, %struct.__sFILE* %9)
  call void @sha_print(%struct.SHA_INFO* %sha_info)
  %10 = load %struct.__sFILE** %fin, align 8
  %call5 = call i32 @fclose(%struct.__sFILE* %10)
  br label %if.end

if.end:                                           ; preds = %if.else4, %if.then2
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end6

if.end6:                                          ; preds = %while.end, %if.then
  ret i32 0
}

declare void @sha_stream(%struct.SHA_INFO*, %struct.__sFILE*) #1

declare void @sha_print(%struct.SHA_INFO*) #1

declare %struct.__sFILE* @"\01_fopen"(i8*, i8*) #1

declare i32 @printf(i8*, ...) #1

declare i32 @fclose(%struct.__sFILE*) #1

attributes #0 = { nounwind ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
