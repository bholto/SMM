; ModuleID = 'bf.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.9.0"

%struct.bf_key_st = type { [18 x i64], [1024 x i64] }
%struct.__sFILE = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, i8*, i32 (i8*)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i32 (i8*, i8*, i32)*, %struct.__sbuf, %struct.__sFILEX*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i64 }
%struct.__sbuf = type { i8*, i32 }
%struct.__sFILEX = type opaque

@.str = private unnamed_addr constant [45 x i8] c"Usage: blowfish {e|d} <intput> <output> key\0A\00", align 1
@.str1 = private unnamed_addr constant [37 x i8] c"key must be in hexadecimal notation\0A\00", align 1
@.str2 = private unnamed_addr constant [16 x i8] c"Bad key value.\0A\00", align 1
@.str3 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str4 = private unnamed_addr constant [2 x i8] c"w\00", align 1

; Function Attrs: nounwind ssp uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %key = alloca %struct.bf_key_st, align 8
  %ukey = alloca [8 x i8], align 1
  %indata = alloca [40 x i8], align 16
  %outdata = alloca [40 x i8], align 16
  %ivec = alloca [8 x i8], align 1
  %num = alloca i32, align 4
  %by = alloca i32, align 4
  %i = alloca i32, align 4
  %encordec = alloca i32, align 4
  %cp = alloca i8*, align 8
  %ch = alloca i8, align 1
  %fp = alloca %struct.__sFILE*, align 8
  %fp2 = alloca %struct.__sFILE*, align 8
  %j = alloca i32, align 4
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  store i32 0, i32* %by, align 4
  store i32 0, i32* %i, align 4
  store i32 -1, i32* %encordec, align 4
  %0 = load i32* %argc.addr, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([45 x i8]* @.str, i32 0, i32 0))
  call void @exit(i32 -1) #3
  unreachable

if.end:                                           ; preds = %entry
  %1 = load i8*** %argv.addr, align 8
  %arrayidx = getelementptr inbounds i8** %1, i64 1
  %2 = load i8** %arrayidx, align 8
  %3 = load i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 101
  br i1 %cmp1, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %4 = load i8*** %argv.addr, align 8
  %arrayidx3 = getelementptr inbounds i8** %4, i64 1
  %5 = load i8** %arrayidx3, align 8
  %6 = load i8* %5, align 1
  %conv4 = sext i8 %6 to i32
  %cmp5 = icmp eq i32 %conv4, 69
  br i1 %cmp5, label %if.then7, label %if.else

if.then7:                                         ; preds = %lor.lhs.false, %if.end
  store i32 1, i32* %encordec, align 4
  br label %if.end21

if.else:                                          ; preds = %lor.lhs.false
  %7 = load i8*** %argv.addr, align 8
  %arrayidx8 = getelementptr inbounds i8** %7, i64 1
  %8 = load i8** %arrayidx8, align 8
  %9 = load i8* %8, align 1
  %conv9 = sext i8 %9 to i32
  %cmp10 = icmp eq i32 %conv9, 100
  br i1 %cmp10, label %if.then17, label %lor.lhs.false12

lor.lhs.false12:                                  ; preds = %if.else
  %10 = load i8*** %argv.addr, align 8
  %arrayidx13 = getelementptr inbounds i8** %10, i64 1
  %11 = load i8** %arrayidx13, align 8
  %12 = load i8* %11, align 1
  %conv14 = sext i8 %12 to i32
  %cmp15 = icmp eq i32 %conv14, 68
  br i1 %cmp15, label %if.then17, label %if.else18

if.then17:                                        ; preds = %lor.lhs.false12, %if.else
  store i32 0, i32* %encordec, align 4
  br label %if.end20

if.else18:                                        ; preds = %lor.lhs.false12
  %call19 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([45 x i8]* @.str, i32 0, i32 0))
  call void @exit(i32 -1) #3
  unreachable

if.end20:                                         ; preds = %if.then17
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.then7
  %13 = load i8*** %argv.addr, align 8
  %arrayidx22 = getelementptr inbounds i8** %13, i64 4
  %14 = load i8** %arrayidx22, align 8
  store i8* %14, i8** %cp, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end61, %if.end21
  %15 = load i32* %i, align 4
  %cmp23 = icmp slt i32 %15, 64
  br i1 %cmp23, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %16 = load i8** %cp, align 8
  %17 = load i8* %16, align 1
  %conv25 = sext i8 %17 to i32
  %tobool = icmp ne i32 %conv25, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %18 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %18, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %19 = load i8** %cp, align 8
  %incdec.ptr = getelementptr inbounds i8* %19, i32 1
  store i8* %incdec.ptr, i8** %cp, align 8
  %20 = load i8* %19, align 1
  %conv26 = sext i8 %20 to i32
  %call27 = call i32 (i32, ...)* bitcast (i32 (...)* @toupper to i32 (i32, ...)*)(i32 %conv26)
  %conv28 = trunc i32 %call27 to i8
  store i8 %conv28, i8* %ch, align 1
  %21 = load i8* %ch, align 1
  %conv29 = sext i8 %21 to i32
  %cmp30 = icmp sge i32 %conv29, 48
  br i1 %cmp30, label %land.lhs.true, label %if.else37

land.lhs.true:                                    ; preds = %while.body
  %22 = load i8* %ch, align 1
  %conv32 = sext i8 %22 to i32
  %cmp33 = icmp sle i32 %conv32, 57
  br i1 %cmp33, label %if.then35, label %if.else37

if.then35:                                        ; preds = %land.lhs.true
  %23 = load i32* %by, align 4
  %shl = shl i32 %23, 4
  %24 = load i8* %ch, align 1
  %conv36 = sext i8 %24 to i32
  %add = add nsw i32 %shl, %conv36
  %sub = sub nsw i32 %add, 48
  store i32 %sub, i32* %by, align 4
  br label %if.end54

if.else37:                                        ; preds = %land.lhs.true, %while.body
  %25 = load i8* %ch, align 1
  %conv38 = sext i8 %25 to i32
  %cmp39 = icmp sge i32 %conv38, 65
  br i1 %cmp39, label %land.lhs.true41, label %if.else51

land.lhs.true41:                                  ; preds = %if.else37
  %26 = load i8* %ch, align 1
  %conv42 = sext i8 %26 to i32
  %cmp43 = icmp sle i32 %conv42, 70
  br i1 %cmp43, label %if.then45, label %if.else51

if.then45:                                        ; preds = %land.lhs.true41
  %27 = load i32* %by, align 4
  %shl46 = shl i32 %27, 4
  %28 = load i8* %ch, align 1
  %conv47 = sext i8 %28 to i32
  %add48 = add nsw i32 %shl46, %conv47
  %sub49 = sub nsw i32 %add48, 65
  %add50 = add nsw i32 %sub49, 10
  store i32 %add50, i32* %by, align 4
  br label %if.end53

if.else51:                                        ; preds = %land.lhs.true41, %if.else37
  %call52 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([37 x i8]* @.str1, i32 0, i32 0))
  call void @exit(i32 -1) #3
  unreachable

if.end53:                                         ; preds = %if.then45
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.then35
  %29 = load i32* %i, align 4
  %inc = add nsw i32 %29, 1
  store i32 %inc, i32* %i, align 4
  %and = and i32 %29, 1
  %tobool55 = icmp ne i32 %and, 0
  br i1 %tobool55, label %if.then56, label %if.end61

if.then56:                                        ; preds = %if.end54
  %30 = load i32* %by, align 4
  %and57 = and i32 %30, 255
  %conv58 = trunc i32 %and57 to i8
  %31 = load i32* %i, align 4
  %div = sdiv i32 %31, 2
  %sub59 = sub nsw i32 %div, 1
  %idxprom = sext i32 %sub59 to i64
  %arrayidx60 = getelementptr inbounds [8 x i8]* %ukey, i32 0, i64 %idxprom
  store i8 %conv58, i8* %arrayidx60, align 1
  br label %if.end61

if.end61:                                         ; preds = %if.then56, %if.end54
  br label %while.cond

while.end:                                        ; preds = %land.end
  %arraydecay = getelementptr inbounds [8 x i8]* %ukey, i32 0, i32 0
  call void @BF_set_key(%struct.bf_key_st* %key, i32 8, i8* %arraydecay)
  %32 = load i8** %cp, align 8
  %33 = load i8* %32, align 1
  %tobool62 = icmp ne i8 %33, 0
  br i1 %tobool62, label %if.then63, label %if.end65

if.then63:                                        ; preds = %while.end
  %call64 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @.str2, i32 0, i32 0))
  call void @exit(i32 -1) #3
  unreachable

if.end65:                                         ; preds = %while.end
  %34 = load i8*** %argv.addr, align 8
  %arrayidx66 = getelementptr inbounds i8** %34, i64 2
  %35 = load i8** %arrayidx66, align 8
  %call67 = call %struct.__sFILE* @"\01_fopen"(i8* %35, i8* getelementptr inbounds ([2 x i8]* @.str3, i32 0, i32 0))
  store %struct.__sFILE* %call67, %struct.__sFILE** %fp, align 8
  %cmp68 = icmp eq %struct.__sFILE* %call67, null
  br i1 %cmp68, label %if.then70, label %if.end72

if.then70:                                        ; preds = %if.end65
  %call71 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([45 x i8]* @.str, i32 0, i32 0))
  call void @exit(i32 -1) #3
  unreachable

if.end72:                                         ; preds = %if.end65
  %36 = load i8*** %argv.addr, align 8
  %arrayidx73 = getelementptr inbounds i8** %36, i64 3
  %37 = load i8** %arrayidx73, align 8
  %call74 = call %struct.__sFILE* @"\01_fopen"(i8* %37, i8* getelementptr inbounds ([2 x i8]* @.str4, i32 0, i32 0))
  store %struct.__sFILE* %call74, %struct.__sFILE** %fp2, align 8
  %cmp75 = icmp eq %struct.__sFILE* %call74, null
  br i1 %cmp75, label %if.then77, label %if.end79

if.then77:                                        ; preds = %if.end72
  %call78 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([45 x i8]* @.str, i32 0, i32 0))
  call void @exit(i32 -1) #3
  unreachable

if.end79:                                         ; preds = %if.end72
  store i32 0, i32* %i, align 4
  br label %while.cond80

while.cond80:                                     ; preds = %for.end, %if.end79
  %38 = load %struct.__sFILE** %fp, align 8
  %call81 = call i32 @feof(%struct.__sFILE* %38)
  %tobool82 = icmp ne i32 %call81, 0
  %lnot = xor i1 %tobool82, true
  br i1 %lnot, label %while.body83, label %while.end109

while.body83:                                     ; preds = %while.cond80
  br label %while.cond84

while.cond84:                                     ; preds = %while.body91, %while.body83
  %39 = load %struct.__sFILE** %fp, align 8
  %call85 = call i32 @feof(%struct.__sFILE* %39)
  %tobool86 = icmp ne i32 %call85, 0
  br i1 %tobool86, label %land.end90, label %land.rhs87

land.rhs87:                                       ; preds = %while.cond84
  %40 = load i32* %i, align 4
  %cmp88 = icmp slt i32 %40, 40
  br label %land.end90

land.end90:                                       ; preds = %land.rhs87, %while.cond84
  %41 = phi i1 [ false, %while.cond84 ], [ %cmp88, %land.rhs87 ]
  br i1 %41, label %while.body91, label %while.end97

while.body91:                                     ; preds = %land.end90
  %42 = load %struct.__sFILE** %fp, align 8
  %call92 = call i32 @getc(%struct.__sFILE* %42)
  %conv93 = trunc i32 %call92 to i8
  %43 = load i32* %i, align 4
  %inc94 = add nsw i32 %43, 1
  store i32 %inc94, i32* %i, align 4
  %idxprom95 = sext i32 %43 to i64
  %arrayidx96 = getelementptr inbounds [40 x i8]* %indata, i32 0, i64 %idxprom95
  store i8 %conv93, i8* %arrayidx96, align 1
  br label %while.cond84

while.end97:                                      ; preds = %land.end90
  %arraydecay98 = getelementptr inbounds [40 x i8]* %indata, i32 0, i32 0
  %arraydecay99 = getelementptr inbounds [40 x i8]* %outdata, i32 0, i32 0
  %44 = load i32* %i, align 4
  %conv100 = sext i32 %44 to i64
  %arraydecay101 = getelementptr inbounds [8 x i8]* %ivec, i32 0, i32 0
  %45 = load i32* %encordec, align 4
  call void @BF_cfb64_encrypt(i8* %arraydecay98, i8* %arraydecay99, i64 %conv100, %struct.bf_key_st* %key, i8* %arraydecay101, i32* %num, i32 %45)
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end97
  %46 = load i32* %j, align 4
  %47 = load i32* %i, align 4
  %cmp102 = icmp slt i32 %46, %47
  br i1 %cmp102, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %48 = load i32* %j, align 4
  %idxprom104 = sext i32 %48 to i64
  %arrayidx105 = getelementptr inbounds [40 x i8]* %outdata, i32 0, i64 %idxprom104
  %49 = load i8* %arrayidx105, align 1
  %conv106 = zext i8 %49 to i32
  %50 = load %struct.__sFILE** %fp2, align 8
  %call107 = call i32 @fputc(i32 %conv106, %struct.__sFILE* %50)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %51 = load i32* %j, align 4
  %inc108 = add nsw i32 %51, 1
  store i32 %inc108, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %while.cond80

while.end109:                                     ; preds = %while.cond80
  %52 = load %struct.__sFILE** %fp, align 8
  %call110 = call i32 (%struct.__sFILE*, ...)* bitcast (i32 (...)* @close to i32 (%struct.__sFILE*, ...)*)(%struct.__sFILE* %52)
  %53 = load %struct.__sFILE** %fp2, align 8
  %call111 = call i32 (%struct.__sFILE*, ...)* bitcast (i32 (...)* @close to i32 (%struct.__sFILE*, ...)*)(%struct.__sFILE* %53)
  call void @exit(i32 1) #3
  unreachable

return:                                           ; No predecessors!
  %54 = load i32* %retval
  ret i32 %54
}

declare i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare void @exit(i32) #2

declare i32 @toupper(...) #1

declare void @BF_set_key(%struct.bf_key_st*, i32, i8*) #1

declare %struct.__sFILE* @"\01_fopen"(i8*, i8*) #1

declare i32 @feof(%struct.__sFILE*) #1

declare i32 @getc(%struct.__sFILE*) #1

declare void @BF_cfb64_encrypt(i8*, i8*, i64, %struct.bf_key_st*, i8*, i32*, i32) #1

declare i32 @fputc(i32, %struct.__sFILE*) #1

declare i32 @close(...) #1

attributes #0 = { nounwind ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }
